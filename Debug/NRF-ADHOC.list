
NRF-ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  20000000  0800813c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b0e0  20000158  08008290  00020158  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000b238  08008290  0002b238  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035b71  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007a95  00000000  00000000  00055cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e6ea  00000000  00000000  0005d78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001260  00000000  00000000  0006be78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001708  00000000  00000000  0006d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c220  00000000  00000000  0006e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000061c0  00000000  00000000  0007aa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00080bc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032a0  00000000  00000000  00080c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000158 	.word	0x20000158
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007fb8 	.word	0x08007fb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000015c 	.word	0x2000015c
 80001d4:	08007fb8 	.word	0x08007fb8

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_ldivmod>:
 80001fc:	b97b      	cbnz	r3, 800021e <__aeabi_ldivmod+0x22>
 80001fe:	b972      	cbnz	r2, 800021e <__aeabi_ldivmod+0x22>
 8000200:	2900      	cmp	r1, #0
 8000202:	bfbe      	ittt	lt
 8000204:	2000      	movlt	r0, #0
 8000206:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800020a:	e006      	blt.n	800021a <__aeabi_ldivmod+0x1e>
 800020c:	bf08      	it	eq
 800020e:	2800      	cmpeq	r0, #0
 8000210:	bf1c      	itt	ne
 8000212:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000216:	f04f 30ff 	movne.w	r0, #4294967295
 800021a:	f000 b9c5 	b.w	80005a8 <__aeabi_idiv0>
 800021e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000222:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000226:	2900      	cmp	r1, #0
 8000228:	db09      	blt.n	800023e <__aeabi_ldivmod+0x42>
 800022a:	2b00      	cmp	r3, #0
 800022c:	db1a      	blt.n	8000264 <__aeabi_ldivmod+0x68>
 800022e:	f000 f84d 	bl	80002cc <__udivmoddi4>
 8000232:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023a:	b004      	add	sp, #16
 800023c:	4770      	bx	lr
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	2b00      	cmp	r3, #0
 8000246:	db1b      	blt.n	8000280 <__aeabi_ldivmod+0x84>
 8000248:	f000 f840 	bl	80002cc <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	4252      	negs	r2, r2
 800025e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000262:	4770      	bx	lr
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	f000 f82f 	bl	80002cc <__udivmoddi4>
 800026e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000276:	b004      	add	sp, #16
 8000278:	4240      	negs	r0, r0
 800027a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f821 	bl	80002cc <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4252      	negs	r2, r2
 8000296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97a 	b.w	80005a8 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d0:	468c      	mov	ip, r1
 80002d2:	460d      	mov	r5, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	9e08      	ldr	r6, [sp, #32]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d151      	bne.n	8000380 <__udivmoddi4+0xb4>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4617      	mov	r7, r2
 80002e0:	d96d      	bls.n	80003be <__udivmoddi4+0xf2>
 80002e2:	fab2 fe82 	clz	lr, r2
 80002e6:	f1be 0f00 	cmp.w	lr, #0
 80002ea:	d00b      	beq.n	8000304 <__udivmoddi4+0x38>
 80002ec:	f1ce 0c20 	rsb	ip, lr, #32
 80002f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80002fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000300:	fa00 f40e 	lsl.w	r4, r0, lr
 8000304:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000308:	0c25      	lsrs	r5, r4, #16
 800030a:	fbbc f8fa 	udiv	r8, ip, sl
 800030e:	fa1f f987 	uxth.w	r9, r7
 8000312:	fb0a cc18 	mls	ip, sl, r8, ip
 8000316:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031a:	fb08 f309 	mul.w	r3, r8, r9
 800031e:	42ab      	cmp	r3, r5
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x6c>
 8000322:	19ed      	adds	r5, r5, r7
 8000324:	f108 32ff 	add.w	r2, r8, #4294967295
 8000328:	f080 8123 	bcs.w	8000572 <__udivmoddi4+0x2a6>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f240 8120 	bls.w	8000572 <__udivmoddi4+0x2a6>
 8000332:	f1a8 0802 	sub.w	r8, r8, #2
 8000336:	443d      	add	r5, r7
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000340:	fb0a 5510 	mls	r5, sl, r0, r5
 8000344:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000348:	fb00 f909 	mul.w	r9, r0, r9
 800034c:	45a1      	cmp	r9, r4
 800034e:	d909      	bls.n	8000364 <__udivmoddi4+0x98>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	f080 810a 	bcs.w	800056e <__udivmoddi4+0x2a2>
 800035a:	45a1      	cmp	r9, r4
 800035c:	f240 8107 	bls.w	800056e <__udivmoddi4+0x2a2>
 8000360:	3802      	subs	r0, #2
 8000362:	443c      	add	r4, r7
 8000364:	eba4 0409 	sub.w	r4, r4, r9
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	2100      	movs	r1, #0
 800036e:	2e00      	cmp	r6, #0
 8000370:	d061      	beq.n	8000436 <__udivmoddi4+0x16a>
 8000372:	fa24 f40e 	lsr.w	r4, r4, lr
 8000376:	2300      	movs	r3, #0
 8000378:	6034      	str	r4, [r6, #0]
 800037a:	6073      	str	r3, [r6, #4]
 800037c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xc8>
 8000384:	2e00      	cmp	r6, #0
 8000386:	d054      	beq.n	8000432 <__udivmoddi4+0x166>
 8000388:	2100      	movs	r1, #0
 800038a:	e886 0021 	stmia.w	r6, {r0, r5}
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	f040 808e 	bne.w	80004ba <__udivmoddi4+0x1ee>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xdc>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80fa 	bhi.w	800059c <__udivmoddi4+0x2d0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb65 0503 	sbc.w	r5, r5, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	46ac      	mov	ip, r5
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d03f      	beq.n	8000436 <__udivmoddi4+0x16a>
 80003b6:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	b912      	cbnz	r2, 80003c6 <__udivmoddi4+0xfa>
 80003c0:	2701      	movs	r7, #1
 80003c2:	fbb7 f7f2 	udiv	r7, r7, r2
 80003c6:	fab7 fe87 	clz	lr, r7
 80003ca:	f1be 0f00 	cmp.w	lr, #0
 80003ce:	d134      	bne.n	800043a <__udivmoddi4+0x16e>
 80003d0:	1beb      	subs	r3, r5, r7
 80003d2:	0c3a      	lsrs	r2, r7, #16
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb3 f8f2 	udiv	r8, r3, r2
 80003de:	0c25      	lsrs	r5, r4, #16
 80003e0:	fb02 3318 	mls	r3, r2, r8, r3
 80003e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e8:	fb0c f308 	mul.w	r3, ip, r8
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x134>
 80003f0:	19ed      	adds	r5, r5, r7
 80003f2:	f108 30ff 	add.w	r0, r8, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x132>
 80003f8:	42ab      	cmp	r3, r5
 80003fa:	f200 80d1 	bhi.w	80005a0 <__udivmoddi4+0x2d4>
 80003fe:	4680      	mov	r8, r0
 8000400:	1aed      	subs	r5, r5, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb5 f0f2 	udiv	r0, r5, r2
 8000408:	fb02 5510 	mls	r5, r2, r0, r5
 800040c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000410:	fb0c fc00 	mul.w	ip, ip, r0
 8000414:	45a4      	cmp	ip, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x15c>
 8000418:	19e4      	adds	r4, r4, r7
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x15a>
 8000420:	45a4      	cmp	ip, r4
 8000422:	f200 80b8 	bhi.w	8000596 <__udivmoddi4+0x2ca>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 040c 	sub.w	r4, r4, ip
 800042c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000430:	e79d      	b.n	800036e <__udivmoddi4+0xa2>
 8000432:	4631      	mov	r1, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1ce 0420 	rsb	r4, lr, #32
 800043e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000442:	fa07 f70e 	lsl.w	r7, r7, lr
 8000446:	fa20 f804 	lsr.w	r8, r0, r4
 800044a:	0c3a      	lsrs	r2, r7, #16
 800044c:	fa25 f404 	lsr.w	r4, r5, r4
 8000450:	ea48 0803 	orr.w	r8, r8, r3
 8000454:	fbb4 f1f2 	udiv	r1, r4, r2
 8000458:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800045c:	fb02 4411 	mls	r4, r2, r1, r4
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000468:	fb01 f30c 	mul.w	r3, r1, ip
 800046c:	42ab      	cmp	r3, r5
 800046e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000472:	d909      	bls.n	8000488 <__udivmoddi4+0x1bc>
 8000474:	19ed      	adds	r5, r5, r7
 8000476:	f101 30ff 	add.w	r0, r1, #4294967295
 800047a:	f080 808a 	bcs.w	8000592 <__udivmoddi4+0x2c6>
 800047e:	42ab      	cmp	r3, r5
 8000480:	f240 8087 	bls.w	8000592 <__udivmoddi4+0x2c6>
 8000484:	3902      	subs	r1, #2
 8000486:	443d      	add	r5, r7
 8000488:	1aeb      	subs	r3, r5, r3
 800048a:	fa1f f588 	uxth.w	r5, r8
 800048e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000492:	fb02 3310 	mls	r3, r2, r0, r3
 8000496:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049a:	fb00 f30c 	mul.w	r3, r0, ip
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1e6>
 80004a2:	19ed      	adds	r5, r5, r7
 80004a4:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a8:	d26f      	bcs.n	800058a <__udivmoddi4+0x2be>
 80004aa:	42ab      	cmp	r3, r5
 80004ac:	d96d      	bls.n	800058a <__udivmoddi4+0x2be>
 80004ae:	3802      	subs	r0, #2
 80004b0:	443d      	add	r5, r7
 80004b2:	1aeb      	subs	r3, r5, r3
 80004b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b8:	e78f      	b.n	80003da <__udivmoddi4+0x10e>
 80004ba:	f1c1 0720 	rsb	r7, r1, #32
 80004be:	fa22 f807 	lsr.w	r8, r2, r7
 80004c2:	408b      	lsls	r3, r1
 80004c4:	fa05 f401 	lsl.w	r4, r5, r1
 80004c8:	ea48 0303 	orr.w	r3, r8, r3
 80004cc:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d4:	40fd      	lsrs	r5, r7
 80004d6:	ea4e 0e04 	orr.w	lr, lr, r4
 80004da:	fbb5 f9fc 	udiv	r9, r5, ip
 80004de:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e2:	fb0c 5519 	mls	r5, ip, r9, r5
 80004e6:	fa1f f883 	uxth.w	r8, r3
 80004ea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004ee:	fb09 f408 	mul.w	r4, r9, r8
 80004f2:	42ac      	cmp	r4, r5
 80004f4:	fa02 f201 	lsl.w	r2, r2, r1
 80004f8:	fa00 fa01 	lsl.w	sl, r0, r1
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x244>
 80004fe:	18ed      	adds	r5, r5, r3
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d243      	bcs.n	800058e <__udivmoddi4+0x2c2>
 8000506:	42ac      	cmp	r4, r5
 8000508:	d941      	bls.n	800058e <__udivmoddi4+0x2c2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	441d      	add	r5, r3
 8000510:	1b2d      	subs	r5, r5, r4
 8000512:	fa1f fe8e 	uxth.w	lr, lr
 8000516:	fbb5 f0fc 	udiv	r0, r5, ip
 800051a:	fb0c 5510 	mls	r5, ip, r0, r5
 800051e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45a0      	cmp	r8, r4
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x26e>
 800052a:	18e4      	adds	r4, r4, r3
 800052c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000530:	d229      	bcs.n	8000586 <__udivmoddi4+0x2ba>
 8000532:	45a0      	cmp	r8, r4
 8000534:	d927      	bls.n	8000586 <__udivmoddi4+0x2ba>
 8000536:	3802      	subs	r0, #2
 8000538:	441c      	add	r4, r3
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba4 0408 	sub.w	r4, r4, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454c      	cmp	r4, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	464d      	mov	r5, r9
 800054c:	d315      	bcc.n	800057a <__udivmoddi4+0x2ae>
 800054e:	d012      	beq.n	8000576 <__udivmoddi4+0x2aa>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x29c>
 8000552:	ebba 030e 	subs.w	r3, sl, lr
 8000556:	eb64 0405 	sbc.w	r4, r4, r5
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40cb      	lsrs	r3, r1
 8000560:	431f      	orrs	r7, r3
 8000562:	40cc      	lsrs	r4, r1
 8000564:	6037      	str	r7, [r6, #0]
 8000566:	6074      	str	r4, [r6, #4]
 8000568:	2100      	movs	r1, #0
 800056a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056e:	4618      	mov	r0, r3
 8000570:	e6f8      	b.n	8000364 <__udivmoddi4+0x98>
 8000572:	4690      	mov	r8, r2
 8000574:	e6e0      	b.n	8000338 <__udivmoddi4+0x6c>
 8000576:	45c2      	cmp	sl, r8
 8000578:	d2ea      	bcs.n	8000550 <__udivmoddi4+0x284>
 800057a:	ebb8 0e02 	subs.w	lr, r8, r2
 800057e:	eb69 0503 	sbc.w	r5, r9, r3
 8000582:	3801      	subs	r0, #1
 8000584:	e7e4      	b.n	8000550 <__udivmoddi4+0x284>
 8000586:	4628      	mov	r0, r5
 8000588:	e7d7      	b.n	800053a <__udivmoddi4+0x26e>
 800058a:	4640      	mov	r0, r8
 800058c:	e791      	b.n	80004b2 <__udivmoddi4+0x1e6>
 800058e:	4681      	mov	r9, r0
 8000590:	e7be      	b.n	8000510 <__udivmoddi4+0x244>
 8000592:	4601      	mov	r1, r0
 8000594:	e778      	b.n	8000488 <__udivmoddi4+0x1bc>
 8000596:	3802      	subs	r0, #2
 8000598:	443c      	add	r4, r7
 800059a:	e745      	b.n	8000428 <__udivmoddi4+0x15c>
 800059c:	4608      	mov	r0, r1
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xe6>
 80005a0:	f1a8 0802 	sub.w	r8, r8, #2
 80005a4:	443d      	add	r5, r7
 80005a6:	e72b      	b.n	8000400 <__udivmoddi4+0x134>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_InitTick+0x3c>)
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_InitTick+0x40>)
{
 80005b2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b4:	7818      	ldrb	r0, [r3, #0]
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	fbb3 f3f0 	udiv	r3, r3, r0
 80005be:	6810      	ldr	r0, [r2, #0]
 80005c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c4:	f000 f8a8 	bl	8000718 <HAL_SYSTICK_Config>
 80005c8:	4604      	mov	r4, r0
 80005ca:	b958      	cbnz	r0, 80005e4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005cc:	2d0f      	cmp	r5, #15
 80005ce:	d809      	bhi.n	80005e4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d0:	4602      	mov	r2, r0
 80005d2:	4629      	mov	r1, r5
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295
 80005d8:	f000 f85e 	bl	8000698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_InitTick+0x44>)
 80005de:	4620      	mov	r0, r4
 80005e0:	601d      	str	r5, [r3, #0]
 80005e2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005e4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
 80005e8:	20000100 	.word	0x20000100
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_Init>:
{
 80005f4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_Init+0x30>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005fe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000606:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800060e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f82f 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffc8 	bl	80005ac <HAL_InitTick>
  HAL_MspInit();
 800061c:	f002 fde3 	bl	80031e6 <HAL_MspInit>
}
 8000620:	2000      	movs	r0, #0
 8000622:	bd08      	pop	{r3, pc}
 8000624:	40023c00 	.word	0x40023c00

08000628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <HAL_IncTick+0x10>)
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_IncTick+0x14>)
 800062c:	6811      	ldr	r1, [r2, #0]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	440b      	add	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20007884 	.word	0x20007884
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <HAL_GetTick+0x8>)
 8000642:	6818      	ldr	r0, [r3, #0]
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20007884 	.word	0x20007884

0800064c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800064c:	b538      	push	{r3, r4, r5, lr}
 800064e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000650:	f7ff fff6 	bl	8000640 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000654:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000656:	bf1c      	itt	ne
 8000658:	4b05      	ldrne	r3, [pc, #20]	; (8000670 <HAL_Delay+0x24>)
 800065a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800065c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800065e:	bf18      	it	ne
 8000660:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000662:	f7ff ffed 	bl	8000640 <HAL_GetTick>
 8000666:	1b40      	subs	r0, r0, r5
 8000668:	4284      	cmp	r4, r0
 800066a:	d8fa      	bhi.n	8000662 <HAL_Delay+0x16>
  {
  }
}
 800066c:	bd38      	pop	{r3, r4, r5, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000

08000674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000676:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	0c1b      	lsrs	r3, r3, #16
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000684:	0200      	lsls	r0, r0, #8
 8000686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800068e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000690:	60d3      	str	r3, [r2, #12]
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	68dc      	ldr	r4, [r3, #12]
 800069e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	bf28      	it	cs
 80006ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 0501 	mov.w	r5, #1
 80006b4:	fa05 f303 	lsl.w	r3, r5, r3
 80006b8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006bc:	bf8c      	ite	hi
 80006be:	3c03      	subhi	r4, #3
 80006c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c2:	4019      	ands	r1, r3
 80006c4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c6:	fa05 f404 	lsl.w	r4, r5, r4
 80006ca:	3c01      	subs	r4, #1
 80006cc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	ea42 0201 	orr.w	r2, r2, r1
 80006d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	bfaf      	iteee	ge
 80006da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	f000 000f 	andlt.w	r0, r0, #15
 80006e2:	4b06      	ldrlt	r3, [pc, #24]	; (80006fc <HAL_NVIC_SetPriority+0x64>)
 80006e4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	bfa5      	ittet	ge
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006ec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00
 80006fc:	e000ed14 	.word	0xe000ed14

08000700 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000700:	0942      	lsrs	r2, r0, #5
 8000702:	2301      	movs	r3, #1
 8000704:	f000 001f 	and.w	r0, r0, #31
 8000708:	fa03 f000 	lsl.w	r0, r3, r0
 800070c:	4b01      	ldr	r3, [pc, #4]	; (8000714 <HAL_NVIC_EnableIRQ+0x14>)
 800070e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100

08000718 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	3801      	subs	r0, #1
 800071a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800071e:	d20a      	bcs.n	8000736 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000724:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	21f0      	movs	r1, #240	; 0xf0
 8000728:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e010 	.word	0xe000e010
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000746:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000748:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800074a:	bf0c      	ite	eq
 800074c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000750:	f022 0204 	bicne.w	r2, r2, #4
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	4770      	bx	lr
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800075c:	4770      	bx	lr

0800075e <HAL_SYSTICK_IRQHandler>:
{
 800075e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000760:	f7ff fffc 	bl	800075c <HAL_SYSTICK_Callback>
 8000764:	bd08      	pop	{r3, pc}
	...

08000768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800076c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000910 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000774:	4a64      	ldr	r2, [pc, #400]	; (8000908 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000776:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000778:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800077c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000780:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000784:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000788:	42b7      	cmp	r7, r6
 800078a:	f040 80ad 	bne.w	80008e8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078e:	684c      	ldr	r4, [r1, #4]
 8000790:	f024 0a10 	bic.w	sl, r4, #16
 8000794:	f1ba 0f02 	cmp.w	sl, #2
 8000798:	d116      	bne.n	80007c8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800079a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800079e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007a6:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007ae:	f04f 0e0f 	mov.w	lr, #15
 80007b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007b6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007ba:	690d      	ldr	r5, [r1, #16]
 80007bc:	fa05 f50b 	lsl.w	r5, r5, fp
 80007c0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80007c4:	f8cc 5020 	str.w	r5, [ip, #32]
 80007c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007cc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80007d6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007dc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ec:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007f0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007f2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f6:	d815      	bhi.n	8000824 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007f8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007fc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000800:	68cd      	ldr	r5, [r1, #12]
 8000802:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000806:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800080a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800080e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000812:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000816:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800081a:	fa0e fe03 	lsl.w	lr, lr, r3
 800081e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000822:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000824:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000826:	9d00      	ldr	r5, [sp, #0]
 8000828:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800082a:	688f      	ldr	r7, [r1, #8]
 800082c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000830:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000832:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000834:	00e5      	lsls	r5, r4, #3
 8000836:	d557      	bpl.n	80008e8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000838:	f04f 0b00 	mov.w	fp, #0
 800083c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000840:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000844:	4d31      	ldr	r5, [pc, #196]	; (800090c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800084a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800084e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000852:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000856:	9703      	str	r7, [sp, #12]
 8000858:	9f03      	ldr	r7, [sp, #12]
 800085a:	f023 0703 	bic.w	r7, r3, #3
 800085e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000862:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000866:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800086a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800086e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000872:	f04f 0e0f 	mov.w	lr, #15
 8000876:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800087a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800087c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000880:	d039      	beq.n	80008f6 <HAL_GPIO_Init+0x18e>
 8000882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000886:	42a8      	cmp	r0, r5
 8000888:	d037      	beq.n	80008fa <HAL_GPIO_Init+0x192>
 800088a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088e:	42a8      	cmp	r0, r5
 8000890:	d035      	beq.n	80008fe <HAL_GPIO_Init+0x196>
 8000892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000896:	42a8      	cmp	r0, r5
 8000898:	d033      	beq.n	8000902 <HAL_GPIO_Init+0x19a>
 800089a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089e:	42a8      	cmp	r0, r5
 80008a0:	bf14      	ite	ne
 80008a2:	2507      	movne	r5, #7
 80008a4:	2504      	moveq	r5, #4
 80008a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80008aa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008ae:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008b0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008b2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008b8:	bf0c      	ite	eq
 80008ba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008bc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008be:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008c0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008c6:	bf0c      	ite	eq
 80008c8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008ca:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008cc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008ce:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008d0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008d4:	bf0c      	ite	eq
 80008d6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008d8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008da:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008dc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008de:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008e0:	bf54      	ite	pl
 80008e2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008e4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008e6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e8:	3301      	adds	r3, #1
 80008ea:	2b10      	cmp	r3, #16
 80008ec:	f47f af47 	bne.w	800077e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008f0:	b005      	add	sp, #20
 80008f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f6:	465d      	mov	r5, fp
 80008f8:	e7d5      	b.n	80008a6 <HAL_GPIO_Init+0x13e>
 80008fa:	2501      	movs	r5, #1
 80008fc:	e7d3      	b.n	80008a6 <HAL_GPIO_Init+0x13e>
 80008fe:	2502      	movs	r5, #2
 8000900:	e7d1      	b.n	80008a6 <HAL_GPIO_Init+0x13e>
 8000902:	2503      	movs	r5, #3
 8000904:	e7cf      	b.n	80008a6 <HAL_GPIO_Init+0x13e>
 8000906:	bf00      	nop
 8000908:	40013c00 	.word	0x40013c00
 800090c:	40020000 	.word	0x40020000
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000916:	4606      	mov	r6, r0
{ 
 8000918:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 800091a:	2800      	cmp	r0, #0
 800091c:	d064      	beq.n	80009e8 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800091e:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000920:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000922:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000926:	f002 fcf3 	bl	8003310 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800092a:	f854 0b10 	ldr.w	r0, [r4], #16
 800092e:	f000 fff5 	bl	800191c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000934:	466d      	mov	r5, sp
 8000936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000940:	e885 0003 	stmia.w	r5, {r0, r1}
 8000944:	1d37      	adds	r7, r6, #4
 8000946:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800094a:	6830      	ldr	r0, [r6, #0]
 800094c:	f000 ffa6 	bl	800189c <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000950:	2100      	movs	r1, #0
 8000952:	6830      	ldr	r0, [r6, #0]
 8000954:	f000 ffe8 	bl	8001928 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000958:	2100      	movs	r1, #0
 800095a:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800095c:	4632      	mov	r2, r6
 800095e:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000962:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000964:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000966:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 800096a:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 800096c:	3101      	adds	r1, #1
 800096e:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8000970:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000974:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8000978:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 800097a:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 800097c:	64d0      	str	r0, [r2, #76]	; 0x4c
 800097e:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8000982:	d1f0      	bne.n	8000966 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000984:	2200      	movs	r2, #0
 8000986:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 800098a:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 800098c:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8000990:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000994:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000996:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 800099a:	3201      	adds	r2, #1
 800099c:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 800099e:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009a2:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80009a6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80009aa:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80009ae:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 80009b2:	6041      	str	r1, [r0, #4]
 80009b4:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80009b8:	d1e8      	bne.n	800098c <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80009ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009bc:	466d      	mov	r5, sp
 80009be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80009cc:	4670      	mov	r0, lr
 80009ce:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80009d2:	f000 ffc1 	bl	8001958 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80009dc:	6830      	ldr	r0, [r6, #0]
 80009de:	f001 fade 	bl	8001f9e <USB_DevDisconnect>
 return HAL_OK;
 80009e2:	2000      	movs	r0, #0
}
 80009e4:	b00b      	add	sp, #44	; 0x2c
 80009e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80009e8:	2001      	movs	r0, #1
 80009ea:	e7fb      	b.n	80009e4 <HAL_PCD_Init+0xd0>

080009ec <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80009ec:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80009f0:	2b01      	cmp	r3, #1
{ 
 80009f2:	b510      	push	{r4, lr}
 80009f4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80009f6:	d00c      	beq.n	8000a12 <HAL_PCD_Start+0x26>
 80009f8:	2301      	movs	r3, #1
 80009fa:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80009fe:	6800      	ldr	r0, [r0, #0]
 8000a00:	f001 fac1 	bl	8001f86 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a04:	6820      	ldr	r0, [r4, #0]
 8000a06:	f000 ff83 	bl	8001910 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000a10:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000a12:	2002      	movs	r0, #2
}
 8000a14:	bd10      	pop	{r4, pc}
	...

08000a18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a1c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000a20:	b087      	sub	sp, #28
 8000a22:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000a24:	4648      	mov	r0, r9
 8000a26:	f001 faf4 	bl	8002012 <USB_GetMode>
 8000a2a:	9002      	str	r0, [sp, #8]
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	f040 812e 	bne.w	8000c8e <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000a32:	6820      	ldr	r0, [r4, #0]
 8000a34:	f001 fabf 	bl	8001fb6 <USB_ReadInterrupts>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	f000 8128 	beq.w	8000c8e <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000a3e:	6820      	ldr	r0, [r4, #0]
 8000a40:	f001 fab9 	bl	8001fb6 <USB_ReadInterrupts>
 8000a44:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a46:	bf48      	it	mi
 8000a48:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a4a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a4c:	bf42      	ittt	mi
 8000a4e:	6953      	ldrmi	r3, [r2, #20]
 8000a50:	f003 0302 	andmi.w	r3, r3, #2
 8000a54:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a56:	f001 faae 	bl	8001fb6 <USB_ReadInterrupts>
 8000a5a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000a5e:	d00a      	beq.n	8000a76 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a60:	6820      	ldr	r0, [r4, #0]
 8000a62:	f001 faac 	bl	8001fbe <USB_ReadDevAllOutEpInterrupt>
 8000a66:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8000a6a:	4607      	mov	r7, r0
 8000a6c:	46a2      	mov	sl, r4
      epnum = 0U;
 8000a6e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a70:	2f00      	cmp	r7, #0
 8000a72:	f040 810f 	bne.w	8000c94 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000a76:	6820      	ldr	r0, [r4, #0]
 8000a78:	f001 fa9d 	bl	8001fb6 <USB_ReadInterrupts>
 8000a7c:	0341      	lsls	r1, r0, #13
 8000a7e:	d50b      	bpl.n	8000a98 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	f001 faa4 	bl	8001fce <USB_ReadDevAllInEpInterrupt>
 8000a86:	4626      	mov	r6, r4
 8000a88:	9003      	str	r0, [sp, #12]
 8000a8a:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8000a8e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a90:	9b03      	ldr	r3, [sp, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f040 813f 	bne.w	8000d16 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	f001 fa8c 	bl	8001fb6 <USB_ReadInterrupts>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	da0d      	bge.n	8000abe <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000aa2:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f002 fcae 	bl	8003410 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000ab4:	6822      	ldr	r2, [r4, #0]
 8000ab6:	6953      	ldr	r3, [r2, #20]
 8000ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000abc:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000abe:	6820      	ldr	r0, [r4, #0]
 8000ac0:	f001 fa79 	bl	8001fb6 <USB_ReadInterrupts>
 8000ac4:	0506      	lsls	r6, r0, #20
 8000ac6:	d50b      	bpl.n	8000ae0 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000ac8:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000acc:	07d8      	lsls	r0, r3, #31
 8000ace:	d502      	bpl.n	8000ad6 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f002 fc85 	bl	80033e0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000ad6:	6822      	ldr	r2, [r4, #0]
 8000ad8:	6953      	ldr	r3, [r2, #20]
 8000ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ade:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	f001 fa68 	bl	8001fb6 <USB_ReadInterrupts>
 8000ae6:	04c1      	lsls	r1, r0, #19
 8000ae8:	d537      	bpl.n	8000b5a <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000aea:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000aee:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000af0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000af8:	2110      	movs	r1, #16
 8000afa:	f000 ffc9 	bl	8001a90 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000afe:	6861      	ldr	r1, [r4, #4]
 8000b00:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000b04:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b06:	9802      	ldr	r0, [sp, #8]
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f040 8192 	bne.w	8000e32 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000b14:	69f3      	ldr	r3, [r6, #28]
 8000b16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000b1a:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 818f 	beq.w	8000e42 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000b24:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000b28:	f043 030b 	orr.w	r3, r3, #11
 8000b2c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000b30:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000b32:	f043 030b 	orr.w	r3, r3, #11
 8000b36:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b38:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b3c:	7c21      	ldrb	r1, [r4, #16]
 8000b3e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000b44:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b48:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000b4c:	f001 fa80 	bl	8002050 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	6953      	ldr	r3, [r2, #20]
 8000b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b58:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000b5a:	6820      	ldr	r0, [r4, #0]
 8000b5c:	f001 fa2b 	bl	8001fb6 <USB_ReadInterrupts>
 8000b60:	0482      	lsls	r2, r0, #18
 8000b62:	d51d      	bpl.n	8000ba0 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	f001 fa58 	bl	800201a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000b6a:	6820      	ldr	r0, [r4, #0]
 8000b6c:	68c3      	ldr	r3, [r0, #12]
 8000b6e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b72:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000b74:	f000 ffb5 	bl	8001ae2 <USB_GetDevSpeed>
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	f040 816b 	bne.w	8000e54 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b7e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000b80:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b86:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b88:	68d3      	ldr	r3, [r2, #12]
 8000b8a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000b8e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f002 fc14 	bl	80033be <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b96:	6822      	ldr	r2, [r4, #0]
 8000b98:	6953      	ldr	r3, [r2, #20]
 8000b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ba0:	6820      	ldr	r0, [r4, #0]
 8000ba2:	f001 fa08 	bl	8001fb6 <USB_ReadInterrupts>
 8000ba6:	06c3      	lsls	r3, r0, #27
 8000ba8:	d52b      	bpl.n	8000c02 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000baa:	6822      	ldr	r2, [r4, #0]
 8000bac:	6993      	ldr	r3, [r2, #24]
 8000bae:	f023 0310 	bic.w	r3, r3, #16
 8000bb2:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000bb4:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000bb8:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000bbc:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000bbe:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000bc2:	f040 81a8 	bne.w	8000f16 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000bc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000bca:	421e      	tst	r6, r3
 8000bcc:	d014      	beq.n	8000bf8 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000bce:	271c      	movs	r7, #28
 8000bd0:	fb07 4708 	mla	r7, r7, r8, r4
 8000bd4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000bd8:	4632      	mov	r2, r6
 8000bda:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000bde:	4648      	mov	r0, r9
 8000be0:	f001 f97b 	bl	8001eda <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000be4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000be8:	4433      	add	r3, r6
 8000bea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bf2:	441e      	add	r6, r3
 8000bf4:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bf8:	6822      	ldr	r2, [r4, #0]
 8000bfa:	6993      	ldr	r3, [r2, #24]
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000c02:	6820      	ldr	r0, [r4, #0]
 8000c04:	f001 f9d7 	bl	8001fb6 <USB_ReadInterrupts>
 8000c08:	0707      	lsls	r7, r0, #28
 8000c0a:	d507      	bpl.n	8000c1c <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f002 fbd2 	bl	80033b6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	6953      	ldr	r3, [r2, #20]
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000c1c:	6820      	ldr	r0, [r4, #0]
 8000c1e:	f001 f9ca 	bl	8001fb6 <USB_ReadInterrupts>
 8000c22:	02c6      	lsls	r6, r0, #11
 8000c24:	d508      	bpl.n	8000c38 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000c26:	b2e9      	uxtb	r1, r5
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f002 fbf9 	bl	8003420 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	6953      	ldr	r3, [r2, #20]
 8000c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c36:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c38:	6820      	ldr	r0, [r4, #0]
 8000c3a:	f001 f9bc 	bl	8001fb6 <USB_ReadInterrupts>
 8000c3e:	0280      	lsls	r0, r0, #10
 8000c40:	d508      	bpl.n	8000c54 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000c42:	b2e9      	uxtb	r1, r5
 8000c44:	4620      	mov	r0, r4
 8000c46:	f002 fbe7 	bl	8003418 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	6953      	ldr	r3, [r2, #20]
 8000c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c52:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c54:	6820      	ldr	r0, [r4, #0]
 8000c56:	f001 f9ae 	bl	8001fb6 <USB_ReadInterrupts>
 8000c5a:	0041      	lsls	r1, r0, #1
 8000c5c:	d507      	bpl.n	8000c6e <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f002 fbe2 	bl	8003428 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c64:	6822      	ldr	r2, [r4, #0]
 8000c66:	6953      	ldr	r3, [r2, #20]
 8000c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c6c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c6e:	6820      	ldr	r0, [r4, #0]
 8000c70:	f001 f9a1 	bl	8001fb6 <USB_ReadInterrupts>
 8000c74:	0742      	lsls	r2, r0, #29
 8000c76:	d50a      	bpl.n	8000c8e <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c7c:	076b      	lsls	r3, r5, #29
 8000c7e:	d502      	bpl.n	8000c86 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000c80:	4620      	mov	r0, r4
 8000c82:	f002 fbd5 	bl	8003430 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	4315      	orrs	r5, r2
 8000c8c:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000c8e:	b007      	add	sp, #28
 8000c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000c94:	07f8      	lsls	r0, r7, #31
 8000c96:	d538      	bpl.n	8000d0a <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c98:	fa5f fb85 	uxtb.w	fp, r5
 8000c9c:	4659      	mov	r1, fp
 8000c9e:	6820      	ldr	r0, [r4, #0]
 8000ca0:	f001 f99d 	bl	8001fde <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ca4:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000ca8:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000caa:	d021      	beq.n	8000cf0 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000cac:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000cae:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000cb0:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000cb2:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000cb6:	6931      	ldr	r1, [r6, #16]
 8000cb8:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000cbc:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000cc0:	1a41      	subs	r1, r0, r1
 8000cc2:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000cc6:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000cca:	4408      	add	r0, r1
 8000ccc:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000cd0:	4659      	mov	r1, fp
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f002 fb5e 	bl	8003394 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000cd8:	6921      	ldr	r1, [r4, #16]
 8000cda:	2901      	cmp	r1, #1
 8000cdc:	d108      	bne.n	8000cf0 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000cde:	b93d      	cbnz	r5, 8000cf0 <HAL_PCD_IRQHandler+0x2d8>
 8000ce0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000ce4:	b922      	cbnz	r2, 8000cf0 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ce6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	f001 f9b0 	bl	8002050 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000cf0:	f018 0f08 	tst.w	r8, #8
 8000cf4:	d004      	beq.n	8000d00 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f002 fb46 	bl	8003388 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000d00:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000d04:	bf1c      	itt	ne
 8000d06:	2310      	movne	r3, #16
 8000d08:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000d0a:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000d0c:	087f      	lsrs	r7, r7, #1
 8000d0e:	3620      	adds	r6, #32
 8000d10:	f10a 0a1c 	add.w	sl, sl, #28
 8000d14:	e6ac      	b.n	8000a70 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000d16:	9b03      	ldr	r3, [sp, #12]
 8000d18:	07da      	lsls	r2, r3, #31
 8000d1a:	d558      	bpl.n	8000dce <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d1c:	fa5f fb85 	uxtb.w	fp, r5
 8000d20:	4659      	mov	r1, fp
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	f001 f965 	bl	8001ff2 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d28:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d2a:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d2c:	d520      	bpl.n	8000d70 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d2e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000d32:	2101      	movs	r1, #1
 8000d34:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d36:	ea23 0301 	bic.w	r3, r3, r1
 8000d3a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000d44:	6923      	ldr	r3, [r4, #16]
 8000d46:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000d48:	bf01      	itttt	eq
 8000d4a:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000d4c:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000d4e:	189b      	addeq	r3, r3, r2
 8000d50:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000d52:	4659      	mov	r1, fp
 8000d54:	4620      	mov	r0, r4
 8000d56:	f002 fb26 	bl	80033a6 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000d5a:	6921      	ldr	r1, [r4, #16]
 8000d5c:	2901      	cmp	r1, #1
 8000d5e:	d107      	bne.n	8000d70 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000d60:	b935      	cbnz	r5, 8000d70 <HAL_PCD_IRQHandler+0x358>
 8000d62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d64:	b923      	cbnz	r3, 8000d70 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d66:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	f001 f970 	bl	8002050 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d70:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d72:	bf44      	itt	mi
 8000d74:	2308      	movmi	r3, #8
 8000d76:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d7a:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d7c:	bf44      	itt	mi
 8000d7e:	2310      	movmi	r3, #16
 8000d80:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d84:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d86:	bf44      	itt	mi
 8000d88:	2340      	movmi	r3, #64	; 0x40
 8000d8a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d8e:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000d90:	bf44      	itt	mi
 8000d92:	2302      	movmi	r3, #2
 8000d94:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d98:	063f      	lsls	r7, r7, #24
 8000d9a:	d518      	bpl.n	8000dce <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000da0:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000da2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000da4:	1aff      	subs	r7, r7, r3
 8000da6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000da8:	429f      	cmp	r7, r3
 8000daa:	bf28      	it	cs
 8000dac:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000dae:	9b04      	ldr	r3, [sp, #16]
 8000db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000db4:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000db8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000dbc:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000dc0:	9305      	str	r3, [sp, #20]
 8000dc2:	9b05      	ldr	r3, [sp, #20]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4553      	cmp	r3, sl
 8000dca:	d808      	bhi.n	8000dde <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000dcc:	b32f      	cbz	r7, 8000e1a <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000dce:	9b03      	ldr	r3, [sp, #12]
 8000dd0:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000dd2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	361c      	adds	r6, #28
 8000dd8:	f108 0820 	add.w	r8, r8, #32
 8000ddc:	e658      	b.n	8000a90 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000dde:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000de0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d9f2      	bls.n	8000dcc <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_PCD_IRQHandler+0x3b4>
 8000dea:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000dec:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	429f      	cmp	r7, r3
 8000df2:	bf28      	it	cs
 8000df4:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000df6:	7c23      	ldrb	r3, [r4, #16]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	465a      	mov	r2, fp
 8000dfc:	b2bb      	uxth	r3, r7
 8000dfe:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000e00:	f001 f857 	bl	8001eb2 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000e04:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000e06:	443b      	add	r3, r7
 8000e08:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000e0a:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000e0c:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000e10:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000e12:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000e16:	6533      	str	r3, [r6, #80]	; 0x50
 8000e18:	e7d3      	b.n	8000dc2 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e1a:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000e1c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e1e:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000e22:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000e26:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e28:	ea23 0302 	bic.w	r3, r3, r2
 8000e2c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000e30:	e7cd      	b.n	8000dce <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e32:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000e34:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e36:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000e38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3c:	9002      	str	r0, [sp, #8]
 8000e3e:	3320      	adds	r3, #32
 8000e40:	e661      	b.n	8000b06 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000e42:	6973      	ldr	r3, [r6, #20]
 8000e44:	f043 030b 	orr.w	r3, r3, #11
 8000e48:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000e4a:	6933      	ldr	r3, [r6, #16]
 8000e4c:	f043 030b 	orr.w	r3, r3, #11
 8000e50:	6133      	str	r3, [r6, #16]
 8000e52:	e671      	b.n	8000b38 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000e54:	2303      	movs	r3, #3
 8000e56:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000e5c:	f000 fbf8 	bl	8001650 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <HAL_PCD_IRQHandler+0x51c>)
 8000e62:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <HAL_PCD_IRQHandler+0x520>)
 8000e64:	4403      	add	r3, r0
 8000e66:	4293      	cmp	r3, r2
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	d804      	bhi.n	8000e76 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	e68c      	b.n	8000b90 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_PCD_IRQHandler+0x524>)
 8000e78:	4931      	ldr	r1, [pc, #196]	; (8000f40 <HAL_PCD_IRQHandler+0x528>)
 8000e7a:	4402      	add	r2, r0
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d803      	bhi.n	8000e88 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e86:	e7f4      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000e88:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000e8c:	492d      	ldr	r1, [pc, #180]	; (8000f44 <HAL_PCD_IRQHandler+0x52c>)
 8000e8e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d803      	bhi.n	8000e9e <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e9c:	e7e9      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000e9e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000ea2:	4929      	ldr	r1, [pc, #164]	; (8000f48 <HAL_PCD_IRQHandler+0x530>)
 8000ea4:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d803      	bhi.n	8000eb4 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000eb2:	e7de      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000eb4:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <HAL_PCD_IRQHandler+0x534>)
 8000eb6:	4926      	ldr	r1, [pc, #152]	; (8000f50 <HAL_PCD_IRQHandler+0x538>)
 8000eb8:	4402      	add	r2, r0
 8000eba:	428a      	cmp	r2, r1
 8000ebc:	d803      	bhi.n	8000ec6 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000ec4:	e7d5      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <HAL_PCD_IRQHandler+0x53c>)
 8000ec8:	4923      	ldr	r1, [pc, #140]	; (8000f58 <HAL_PCD_IRQHandler+0x540>)
 8000eca:	4402      	add	r2, r0
 8000ecc:	428a      	cmp	r2, r1
 8000ece:	d803      	bhi.n	8000ed8 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000ed6:	e7cc      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000ed8:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <HAL_PCD_IRQHandler+0x544>)
 8000eda:	4921      	ldr	r1, [pc, #132]	; (8000f60 <HAL_PCD_IRQHandler+0x548>)
 8000edc:	4402      	add	r2, r0
 8000ede:	428a      	cmp	r2, r1
 8000ee0:	d803      	bhi.n	8000eea <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000ee8:	e7c3      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000eea:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000eee:	491d      	ldr	r1, [pc, #116]	; (8000f64 <HAL_PCD_IRQHandler+0x54c>)
 8000ef0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	d803      	bhi.n	8000f00 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000efe:	e7b8      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_PCD_IRQHandler+0x550>)
 8000f02:	491a      	ldr	r1, [pc, #104]	; (8000f6c <HAL_PCD_IRQHandler+0x554>)
 8000f04:	4402      	add	r2, r0
 8000f06:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	bf94      	ite	ls
 8000f0c:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000f10:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000f14:	e7ad      	b.n	8000e72 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	f47f ae6e 	bne.w	8000bf8 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000f22:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f24:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f26:	f000 ffd8 	bl	8001eda <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f2a:	fb07 4708 	mla	r7, r7, r8, r4
 8000f2e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000f32:	e65c      	b.n	8000bee <HAL_PCD_IRQHandler+0x1d6>
 8000f34:	ff275340 	.word	0xff275340
 8000f38:	000c34ff 	.word	0x000c34ff
 8000f3c:	ff1b1e40 	.word	0xff1b1e40
 8000f40:	000f423f 	.word	0x000f423f
 8000f44:	00124f7f 	.word	0x00124f7f
 8000f48:	0013d61f 	.word	0x0013d61f
 8000f4c:	fee5b660 	.word	0xfee5b660
 8000f50:	0016e35f 	.word	0x0016e35f
 8000f54:	feced300 	.word	0xfeced300
 8000f58:	001b773f 	.word	0x001b773f
 8000f5c:	feb35bc0 	.word	0xfeb35bc0
 8000f60:	002191bf 	.word	0x002191bf
 8000f64:	0038751f 	.word	0x0038751f
 8000f68:	fe5954e0 	.word	0xfe5954e0
 8000f6c:	00419cdf 	.word	0x00419cdf

08000f70 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000f70:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000f74:	2b01      	cmp	r3, #1
{
 8000f76:	b510      	push	{r4, lr}
 8000f78:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000f7a:	d009      	beq.n	8000f90 <HAL_PCD_SetAddress+0x20>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000f82:	6800      	ldr	r0, [r0, #0]
 8000f84:	f000 ffef 	bl	8001f66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f90:	2002      	movs	r0, #2
}
 8000f92:	bd10      	pop	{r4, pc}

08000f94 <HAL_PCD_EP_Open>:
{
 8000f94:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000f96:	b24e      	sxtb	r6, r1
 8000f98:	2e00      	cmp	r6, #0
{
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	f04f 051c 	mov.w	r5, #28
 8000fa0:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fa4:	bfb5      	itete	lt
 8000fa6:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000faa:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fae:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fb0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000fb4:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000fb6:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000fb8:	bfb8      	it	lt
 8000fba:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000fbc:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000fbe:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fc0:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000fc4:	bf04      	itt	eq
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000fca:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fcc:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000fce:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000fd2:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d009      	beq.n	8000fec <HAL_PCD_EP_Open+0x58>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000fde:	6820      	ldr	r0, [r4, #0]
 8000fe0:	f000 fd9a 	bl	8001b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000fec:	2002      	movs	r0, #2
}
 8000fee:	bd70      	pop	{r4, r5, r6, pc}

08000ff0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000ff0:	b24b      	sxtb	r3, r1
 8000ff2:	2b00      	cmp	r3, #0
{  
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	f04f 021c 	mov.w	r2, #28
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001000:	bfb5      	itete	lt
 8001002:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001006:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800100a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800100c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8001010:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001012:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001014:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001016:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 800101a:	2b01      	cmp	r3, #1
 800101c:	d009      	beq.n	8001032 <HAL_PCD_EP_Close+0x42>
 800101e:	2301      	movs	r3, #1
 8001020:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	f000 fdb6 	bl	8001b96 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800102a:	2000      	movs	r0, #0
 800102c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001030:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001032:	2002      	movs	r0, #2
}
 8001034:	bd10      	pop	{r4, pc}

08001036 <HAL_PCD_EP_Receive>:
{
 8001036:	b538      	push	{r3, r4, r5, lr}
 8001038:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800103c:	241c      	movs	r4, #28
 800103e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001042:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001046:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 800104a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 800104e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8001050:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001054:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001058:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 800105c:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8001060:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001062:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001064:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001066:	bf08      	it	eq
 8001068:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 800106c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800106e:	b91d      	cbnz	r5, 8001078 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001070:	f000 feb2 	bl	8001dd8 <USB_EP0StartXfer>
}
 8001074:	2000      	movs	r0, #0
 8001076:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001078:	f000 fde8 	bl	8001c4c <USB_EPStartXfer>
 800107c:	e7fa      	b.n	8001074 <HAL_PCD_EP_Receive+0x3e>

0800107e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800107e:	231c      	movs	r3, #28
 8001080:	f001 010f 	and.w	r1, r1, #15
 8001084:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001088:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 800108c:	4770      	bx	lr

0800108e <HAL_PCD_EP_Transmit>:
{
 800108e:	b538      	push	{r3, r4, r5, lr}
 8001090:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001094:	241c      	movs	r4, #28
 8001096:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800109a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800109e:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 80010a0:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 80010a6:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 80010a8:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80010aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 80010ae:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 80010b2:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010b4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80010b6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80010b8:	bf08      	it	eq
 80010ba:	64a2      	streq	r2, [r4, #72]	; 0x48
 80010bc:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 80010be:	b91d      	cbnz	r5, 80010c8 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010c0:	f000 fe8a 	bl	8001dd8 <USB_EP0StartXfer>
}
 80010c4:	2000      	movs	r0, #0
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010c8:	f000 fdc0 	bl	8001c4c <USB_EPStartXfer>
 80010cc:	e7fa      	b.n	80010c4 <HAL_PCD_EP_Transmit+0x36>

080010ce <HAL_PCD_EP_SetStall>:
{
 80010ce:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80010d0:	b24b      	sxtb	r3, r1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80010d8:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010dc:	bfb5      	itete	lt
 80010de:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80010e2:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010e6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80010e8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80010ec:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010ee:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80010f0:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80010f2:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010f4:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010f6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010f8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80010fc:	4293      	cmp	r3, r2
{
 80010fe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001100:	d00f      	beq.n	8001122 <HAL_PCD_EP_SetStall+0x54>
 8001102:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	f000 fef5 	bl	8001ef6 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800110c:	b92d      	cbnz	r5, 800111a <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800110e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001112:	7c21      	ldrb	r1, [r4, #16]
 8001114:	6820      	ldr	r0, [r4, #0]
 8001116:	f000 ff9b 	bl	8002050 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800111a:	2000      	movs	r0, #0
 800111c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001120:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001122:	2002      	movs	r0, #2
}
 8001124:	bd38      	pop	{r3, r4, r5, pc}

08001126 <HAL_PCD_EP_ClrStall>:
{
 8001126:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001128:	b24b      	sxtb	r3, r1
 800112a:	2b00      	cmp	r3, #0
{
 800112c:	4605      	mov	r5, r0
 800112e:	f04f 021c 	mov.w	r2, #28
 8001132:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001136:	bfb5      	itete	lt
 8001138:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 800113c:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001140:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001142:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001146:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001148:	2400      	movs	r4, #0
 800114a:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800114c:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800114e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001150:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001154:	2b01      	cmp	r3, #1
 8001156:	d009      	beq.n	800116c <HAL_PCD_EP_ClrStall+0x46>
 8001158:	2301      	movs	r3, #1
 800115a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800115e:	6828      	ldr	r0, [r5, #0]
 8001160:	f000 fee8 	bl	8001f34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001164:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001168:	4620      	mov	r0, r4
 800116a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800116c:	2002      	movs	r0, #2
}
 800116e:	bd38      	pop	{r3, r4, r5, pc}

08001170 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001170:	6800      	ldr	r0, [r0, #0]
{
 8001172:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001174:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001176:	b921      	cbnz	r1, 8001182 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800117c:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 800117e:	2000      	movs	r0, #0
 8001180:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001182:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001184:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001186:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800118a:	1e4e      	subs	r6, r1, #1
 800118c:	b2ec      	uxtb	r4, r5
 800118e:	42b4      	cmp	r4, r6
 8001190:	f105 0501 	add.w	r5, r5, #1
 8001194:	db06      	blt.n	80011a4 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001196:	313f      	adds	r1, #63	; 0x3f
 8001198:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800119c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011a0:	6043      	str	r3, [r0, #4]
 80011a2:	e7ec      	b.n	800117e <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80011a4:	3440      	adds	r4, #64	; 0x40
 80011a6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80011aa:	6864      	ldr	r4, [r4, #4]
 80011ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80011b0:	e7ec      	b.n	800118c <HAL_PCDEx_SetTxFiFo+0x1c>

080011b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80011b2:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80011b4:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80011b6:	6259      	str	r1, [r3, #36]	; 0x24
}
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	4604      	mov	r4, r0
 80011c2:	b918      	cbnz	r0, 80011cc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80011c4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011c6:	b002      	add	sp, #8
 80011c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011cc:	6803      	ldr	r3, [r0, #0]
 80011ce:	07dd      	lsls	r5, r3, #31
 80011d0:	d410      	bmi.n	80011f4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	0798      	lsls	r0, r3, #30
 80011d6:	d458      	bmi.n	800128a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	071a      	lsls	r2, r3, #28
 80011dc:	f100 809a 	bmi.w	8001314 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	075b      	lsls	r3, r3, #29
 80011e4:	f100 80b8 	bmi.w	8001358 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e8:	69a2      	ldr	r2, [r4, #24]
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	f040 8119 	bne.w	8001422 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80011f0:	2000      	movs	r0, #0
 80011f2:	e7e8      	b.n	80011c6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f4:	4ba6      	ldr	r3, [pc, #664]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	f002 020c 	and.w	r2, r2, #12
 80011fc:	2a04      	cmp	r2, #4
 80011fe:	d007      	beq.n	8001210 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001206:	2a08      	cmp	r2, #8
 8001208:	d10a      	bne.n	8001220 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	0259      	lsls	r1, r3, #9
 800120e:	d507      	bpl.n	8001220 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b9f      	ldr	r3, [pc, #636]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	039a      	lsls	r2, r3, #14
 8001216:	d5dc      	bpl.n	80011d2 <HAL_RCC_OscConfig+0x16>
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1d9      	bne.n	80011d2 <HAL_RCC_OscConfig+0x16>
 800121e:	e7d1      	b.n	80011c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001220:	6863      	ldr	r3, [r4, #4]
 8001222:	4d9b      	ldr	r5, [pc, #620]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d111      	bne.n	800124e <HAL_RCC_OscConfig+0x92>
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001232:	f7ff fa05 	bl	8000640 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4d96      	ldr	r5, [pc, #600]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001238:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	039b      	lsls	r3, r3, #14
 800123e:	d4c8      	bmi.n	80011d2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff f9fe 	bl	8000640 <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2864      	cmp	r0, #100	; 0x64
 8001248:	d9f7      	bls.n	800123a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800124a:	2003      	movs	r0, #3
 800124c:	e7bb      	b.n	80011c6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001252:	d104      	bne.n	800125e <HAL_RCC_OscConfig+0xa2>
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125a:	602b      	str	r3, [r5, #0]
 800125c:	e7e5      	b.n	800122a <HAL_RCC_OscConfig+0x6e>
 800125e:	682a      	ldr	r2, [r5, #0]
 8001260:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001264:	602a      	str	r2, [r5, #0]
 8001266:	682a      	ldr	r2, [r5, #0]
 8001268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800126c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1df      	bne.n	8001232 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001272:	f7ff f9e5 	bl	8000640 <HAL_GetTick>
 8001276:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	039f      	lsls	r7, r3, #14
 800127c:	d5a9      	bpl.n	80011d2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff f9df 	bl	8000640 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	2864      	cmp	r0, #100	; 0x64
 8001286:	d9f7      	bls.n	8001278 <HAL_RCC_OscConfig+0xbc>
 8001288:	e7df      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	f012 0f0c 	tst.w	r2, #12
 8001292:	d007      	beq.n	80012a4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2a08      	cmp	r2, #8
 800129c:	d111      	bne.n	80012c2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	025e      	lsls	r6, r3, #9
 80012a2:	d40e      	bmi.n	80012c2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	4b7a      	ldr	r3, [pc, #488]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	0795      	lsls	r5, r2, #30
 80012aa:	d502      	bpl.n	80012b2 <HAL_RCC_OscConfig+0xf6>
 80012ac:	68e2      	ldr	r2, [r4, #12]
 80012ae:	2a01      	cmp	r2, #1
 80012b0:	d188      	bne.n	80011c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	6921      	ldr	r1, [r4, #16]
 80012b6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012ba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	e78a      	b.n	80011d8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c2:	68e2      	ldr	r2, [r4, #12]
 80012c4:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_RCC_OscConfig+0x2d8>)
 80012c6:	b1b2      	cbz	r2, 80012f6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012cc:	f7ff f9b8 	bl	8000640 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4d6f      	ldr	r5, [pc, #444]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	0798      	lsls	r0, r3, #30
 80012d8:	d507      	bpl.n	80012ea <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	6922      	ldr	r2, [r4, #16]
 80012de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	e776      	b.n	80011d8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff f9a9 	bl	8000640 <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	2802      	cmp	r0, #2
 80012f2:	d9ef      	bls.n	80012d4 <HAL_RCC_OscConfig+0x118>
 80012f4:	e7a9      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80012f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f8:	f7ff f9a2 	bl	8000640 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	4d64      	ldr	r5, [pc, #400]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	0799      	lsls	r1, r3, #30
 8001304:	f57f af68 	bpl.w	80011d8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff f99a 	bl	8000640 <HAL_GetTick>
 800130c:	1b80      	subs	r0, r0, r6
 800130e:	2802      	cmp	r0, #2
 8001310:	d9f6      	bls.n	8001300 <HAL_RCC_OscConfig+0x144>
 8001312:	e79a      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001314:	6962      	ldr	r2, [r4, #20]
 8001316:	4b60      	ldr	r3, [pc, #384]	; (8001498 <HAL_RCC_OscConfig+0x2dc>)
 8001318:	b17a      	cbz	r2, 800133a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800131e:	f7ff f98f 	bl	8000640 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4d5b      	ldr	r5, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001324:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001328:	079f      	lsls	r7, r3, #30
 800132a:	f53f af59 	bmi.w	80011e0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff f987 	bl	8000640 <HAL_GetTick>
 8001332:	1b80      	subs	r0, r0, r6
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f6      	bls.n	8001326 <HAL_RCC_OscConfig+0x16a>
 8001338:	e787      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800133a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800133c:	f7ff f980 	bl	8000640 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	4d53      	ldr	r5, [pc, #332]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001342:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001346:	0798      	lsls	r0, r3, #30
 8001348:	f57f af4a 	bpl.w	80011e0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff f978 	bl	8000640 <HAL_GetTick>
 8001350:	1b80      	subs	r0, r0, r6
 8001352:	2802      	cmp	r0, #2
 8001354:	d9f6      	bls.n	8001344 <HAL_RCC_OscConfig+0x188>
 8001356:	e778      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 800135a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001360:	d128      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001376:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4d48      	ldr	r5, [pc, #288]	; (800149c <HAL_RCC_OscConfig+0x2e0>)
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	05d9      	lsls	r1, r3, #23
 800137e:	d51b      	bpl.n	80013b8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	68a3      	ldr	r3, [r4, #8]
 8001382:	4d43      	ldr	r5, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 8001384:	2b01      	cmp	r3, #1
 8001386:	d127      	bne.n	80013d8 <HAL_RCC_OscConfig+0x21c>
 8001388:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001390:	f7ff f956 	bl	8000640 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	4d3e      	ldr	r5, [pc, #248]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001396:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800139e:	079b      	lsls	r3, r3, #30
 80013a0:	d539      	bpl.n	8001416 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	f43f af20 	beq.w	80011e8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4a39      	ldr	r2, [pc, #228]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 80013aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	e719      	b.n	80011e8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80013b4:	2600      	movs	r6, #0
 80013b6:	e7df      	b.n	8001378 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013be:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013c0:	f7ff f93e 	bl	8000640 <HAL_GetTick>
 80013c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	05da      	lsls	r2, r3, #23
 80013ca:	d4d9      	bmi.n	8001380 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013cc:	f7ff f938 	bl	8000640 <HAL_GetTick>
 80013d0:	1bc0      	subs	r0, r0, r7
 80013d2:	2802      	cmp	r0, #2
 80013d4:	d9f7      	bls.n	80013c6 <HAL_RCC_OscConfig+0x20a>
 80013d6:	e738      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d104      	bne.n	80013e6 <HAL_RCC_OscConfig+0x22a>
 80013dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	672b      	str	r3, [r5, #112]	; 0x70
 80013e4:	e7d0      	b.n	8001388 <HAL_RCC_OscConfig+0x1cc>
 80013e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	672a      	str	r2, [r5, #112]	; 0x70
 80013ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013f0:	f022 0204 	bic.w	r2, r2, #4
 80013f4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ca      	bne.n	8001390 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80013fa:	f7ff f921 	bl	8000640 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001402:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001406:	0798      	lsls	r0, r3, #30
 8001408:	d5cb      	bpl.n	80013a2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff f919 	bl	8000640 <HAL_GetTick>
 800140e:	1bc0      	subs	r0, r0, r7
 8001410:	4540      	cmp	r0, r8
 8001412:	d9f7      	bls.n	8001404 <HAL_RCC_OscConfig+0x248>
 8001414:	e719      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff f913 	bl	8000640 <HAL_GetTick>
 800141a:	1bc0      	subs	r0, r0, r7
 800141c:	4540      	cmp	r0, r8
 800141e:	d9bd      	bls.n	800139c <HAL_RCC_OscConfig+0x1e0>
 8001420:	e713      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001422:	4d1b      	ldr	r5, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
 8001424:	68ab      	ldr	r3, [r5, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b08      	cmp	r3, #8
 800142c:	f43f aeca 	beq.w	80011c4 <HAL_RCC_OscConfig+0x8>
 8001430:	4e1b      	ldr	r6, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x2e4>)
 8001432:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001434:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001436:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001438:	d134      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800143a:	f7ff f901 	bl	8000640 <HAL_GetTick>
 800143e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	0199      	lsls	r1, r3, #6
 8001444:	d41e      	bmi.n	8001484 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001446:	6a22      	ldr	r2, [r4, #32]
 8001448:	69e3      	ldr	r3, [r4, #28]
 800144a:	4313      	orrs	r3, r2
 800144c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800144e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001452:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001454:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001458:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4c0d      	ldr	r4, [pc, #52]	; (8001490 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145c:	0852      	lsrs	r2, r2, #1
 800145e:	3a01      	subs	r2, #1
 8001460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001464:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001466:	2301      	movs	r3, #1
 8001468:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800146a:	f7ff f8e9 	bl	8000640 <HAL_GetTick>
 800146e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	019a      	lsls	r2, r3, #6
 8001474:	f53f aebc 	bmi.w	80011f0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff f8e2 	bl	8000640 <HAL_GetTick>
 800147c:	1b40      	subs	r0, r0, r5
 800147e:	2802      	cmp	r0, #2
 8001480:	d9f6      	bls.n	8001470 <HAL_RCC_OscConfig+0x2b4>
 8001482:	e6e2      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff f8dc 	bl	8000640 <HAL_GetTick>
 8001488:	1bc0      	subs	r0, r0, r7
 800148a:	2802      	cmp	r0, #2
 800148c:	d9d8      	bls.n	8001440 <HAL_RCC_OscConfig+0x284>
 800148e:	e6dc      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
 800149c:	40007000 	.word	0x40007000
 80014a0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80014a4:	f7ff f8cc 	bl	8000640 <HAL_GetTick>
 80014a8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	f57f ae9f 	bpl.w	80011f0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff f8c5 	bl	8000640 <HAL_GetTick>
 80014b6:	1b00      	subs	r0, r0, r4
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d9f6      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ee>
 80014bc:	e6c5      	b.n	800124a <HAL_RCC_OscConfig+0x8e>
 80014be:	bf00      	nop

080014c0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c0:	4913      	ldr	r1, [pc, #76]	; (8001510 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014c2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c4:	688b      	ldr	r3, [r1, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d003      	beq.n	80014d6 <HAL_RCC_GetSysClockFreq+0x16>
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d003      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d2:	4810      	ldr	r0, [pc, #64]	; (8001514 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014d4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014d6:	4810      	ldr	r0, [pc, #64]	; (8001518 <HAL_RCC_GetSysClockFreq+0x58>)
 80014d8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014da:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014dc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014de:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	bf14      	ite	ne
 80014e6:	480c      	ldrne	r0, [pc, #48]	; (8001518 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e8:	480a      	ldreq	r0, [pc, #40]	; (8001514 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014ee:	bf18      	it	ne
 80014f0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f6:	fba1 0100 	umull	r0, r1, r1, r0
 80014fa:	f7fe fecf 	bl	800029c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_RCC_GetSysClockFreq+0x50>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800150a:	fbb0 f0f3 	udiv	r0, r0, r3
 800150e:	bd08      	pop	{r3, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	007a1200 	.word	0x007a1200

0800151c <HAL_RCC_ClockConfig>:
{
 800151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001520:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001522:	4604      	mov	r4, r0
 8001524:	b910      	cbnz	r0, 800152c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_RCC_ClockConfig+0x124>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f002 020f 	and.w	r2, r2, #15
 8001534:	428a      	cmp	r2, r1
 8001536:	d328      	bcc.n	800158a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	6821      	ldr	r1, [r4, #0]
 800153a:	078f      	lsls	r7, r1, #30
 800153c:	d42d      	bmi.n	800159a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153e:	07c8      	lsls	r0, r1, #31
 8001540:	d440      	bmi.n	80015c4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <HAL_RCC_ClockConfig+0x124>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	f002 020f 	and.w	r2, r2, #15
 800154a:	4295      	cmp	r5, r2
 800154c:	d366      	bcc.n	800161c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154e:	6822      	ldr	r2, [r4, #0]
 8001550:	0751      	lsls	r1, r2, #29
 8001552:	d46c      	bmi.n	800162e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	0713      	lsls	r3, r2, #28
 8001556:	d507      	bpl.n	8001568 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001558:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 800155a:	6921      	ldr	r1, [r4, #16]
 800155c:	6893      	ldr	r3, [r2, #8]
 800155e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001562:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001566:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001568:	f7ff ffaa 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 800156e:	4a36      	ldr	r2, [pc, #216]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	40d8      	lsrs	r0, r3
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_ClockConfig+0x130>)
 800157c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff f814 	bl	80005ac <HAL_InitTick>
  return HAL_OK;
 8001584:	2000      	movs	r0, #0
 8001586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	4299      	cmp	r1, r3
 8001596:	d1c6      	bne.n	8001526 <HAL_RCC_ClockConfig+0xa>
 8001598:	e7ce      	b.n	8001538 <HAL_RCC_ClockConfig+0x1c>
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	bf1e      	ittt	ne
 80015a2:	689a      	ldrne	r2, [r3, #8]
 80015a4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015a8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015aa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ac:	bf42      	ittt	mi
 80015ae:	689a      	ldrmi	r2, [r3, #8]
 80015b0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015b4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	68a0      	ldr	r0, [r4, #8]
 80015ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015be:	4302      	orrs	r2, r0
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	e7bc      	b.n	800153e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c4:	6862      	ldr	r2, [r4, #4]
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d11d      	bne.n	8001608 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	d0a8      	beq.n	8001526 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d4:	4e1b      	ldr	r6, [pc, #108]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 80015d6:	68b3      	ldr	r3, [r6, #8]
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	4313      	orrs	r3, r2
 80015de:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015e0:	f7ff f82e 	bl	8000640 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80015e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	68b3      	ldr	r3, [r6, #8]
 80015ec:	6862      	ldr	r2, [r4, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015f6:	d0a4      	beq.n	8001542 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff f822 	bl	8000640 <HAL_GetTick>
 80015fc:	1bc0      	subs	r0, r0, r7
 80015fe:	4540      	cmp	r0, r8
 8001600:	d9f3      	bls.n	80015ea <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001602:	2003      	movs	r0, #3
}
 8001604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001608:	1e91      	subs	r1, r2, #2
 800160a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	d802      	bhi.n	8001616 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001614:	e7dd      	b.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001616:	f013 0f02 	tst.w	r3, #2
 800161a:	e7da      	b.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161c:	b2ea      	uxtb	r2, r5
 800161e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	429d      	cmp	r5, r3
 8001628:	f47f af7d 	bne.w	8001526 <HAL_RCC_ClockConfig+0xa>
 800162c:	e78f      	b.n	800154e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162e:	4905      	ldr	r1, [pc, #20]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 8001630:	68e0      	ldr	r0, [r4, #12]
 8001632:	688b      	ldr	r3, [r1, #8]
 8001634:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001638:	4303      	orrs	r3, r0
 800163a:	608b      	str	r3, [r1, #8]
 800163c:	e78a      	b.n	8001554 <HAL_RCC_ClockConfig+0x38>
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00
 8001644:	40023800 	.word	0x40023800
 8001648:	0800805e 	.word	0x0800805e
 800164c:	20000100 	.word	0x20000100

08001650 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <HAL_RCC_GetHCLKFreq+0x8>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000100 	.word	0x20000100

0800165c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	f013 0f05 	tst.w	r3, #5
{
 8001662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001664:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001666:	d13c      	bne.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	079a      	lsls	r2, r3, #30
 800166c:	d530      	bpl.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x12c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001674:	4d45      	ldr	r5, [pc, #276]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001678:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001690:	f7fe ffd6 	bl	8000640 <HAL_GetTick>
 8001694:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	05d9      	lsls	r1, r3, #23
 800169a:	d54c      	bpl.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0xda>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800169c:	4d3a      	ldr	r5, [pc, #232]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800169e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016a4:	d14d      	bne.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016a6:	6923      	ldr	r3, [r4, #16]
 80016a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80016ac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80016b0:	4a35      	ldr	r2, [pc, #212]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80016b2:	d165      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80016b4:	6891      	ldr	r1, [r2, #8]
 80016b6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80016ba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80016be:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80016c2:	4301      	orrs	r1, r0
 80016c4:	6091      	str	r1, [r2, #8]
 80016c6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016d6:	bf1f      	itttt	ne
 80016d8:	4b2d      	ldrne	r3, [pc, #180]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80016da:	7d22      	ldrbne	r2, [r4, #20]
 80016dc:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80016de:	2000      	movne	r0, #0
 80016e0:	e027      	b.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 80016e2:	4e2c      	ldr	r6, [pc, #176]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016e4:	4d28      	ldr	r5, [pc, #160]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PLLI2S_DISABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016ea:	f7fe ffa9 	bl	8000640 <HAL_GetTick>
 80016ee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	d417      	bmi.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80016f6:	68e3      	ldr	r3, [r4, #12]
 80016f8:	68a2      	ldr	r2, [r4, #8]
 80016fa:	071b      	lsls	r3, r3, #28
 80016fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001700:	6862      	ldr	r2, [r4, #4]
 8001702:	4313      	orrs	r3, r2
 8001704:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001708:	2301      	movs	r3, #1
 800170a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800170c:	f7fe ff98 	bl	8000640 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001710:	4d1d      	ldr	r5, [pc, #116]	; (8001788 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    tickstart = HAL_GetTick();
 8001712:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	0118      	lsls	r0, r3, #4
 8001718:	d4a6      	bmi.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800171a:	f7fe ff91 	bl	8000640 <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	2802      	cmp	r0, #2
 8001722:	d9f7      	bls.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001724:	e004      	b.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001726:	f7fe ff8b 	bl	8000640 <HAL_GetTick>
 800172a:	1bc0      	subs	r0, r0, r7
 800172c:	2802      	cmp	r0, #2
 800172e:	d9df      	bls.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 8001730:	2003      	movs	r0, #3
}
 8001732:	b003      	add	sp, #12
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7fe ff83 	bl	8000640 <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2802      	cmp	r0, #2
 800173e:	d9aa      	bls.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001740:	e7f6      	b.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001742:	6922      	ldr	r2, [r4, #16]
 8001744:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001748:	4293      	cmp	r3, r2
 800174a:	d0ac      	beq.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800174c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001750:	2101      	movs	r1, #1
 8001752:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001758:	2100      	movs	r1, #0
 800175a:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800175c:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800175e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001760:	07da      	lsls	r2, r3, #31
 8001762:	d5a0      	bpl.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8001764:	f7fe ff6c 	bl	8000640 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800176c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001770:	079b      	lsls	r3, r3, #30
 8001772:	d498      	bmi.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7fe ff64 	bl	8000640 <HAL_GetTick>
 8001778:	1b80      	subs	r0, r0, r6
 800177a:	42b8      	cmp	r0, r7
 800177c:	d9f7      	bls.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x112>
 800177e:	e7d7      	b.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001780:	6891      	ldr	r1, [r2, #8]
 8001782:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001786:	e79d      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	424711e0 	.word	0x424711e0
 8001794:	42470068 	.word	0x42470068
 8001798:	42470e40 	.word	0x42470e40

0800179c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800179c:	6802      	ldr	r2, [r0, #0]
{
 800179e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017a0:	68d3      	ldr	r3, [r2, #12]
 80017a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80017a6:	60d3      	str	r3, [r2, #12]
{
 80017a8:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 80017aa:	f7fe ff49 	bl	8000640 <HAL_GetTick>
 80017ae:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	069b      	lsls	r3, r3, #26
 80017b6:	d501      	bpl.n	80017bc <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 80017b8:	2000      	movs	r0, #0
 80017ba:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80017bc:	f7fe ff40 	bl	8000640 <HAL_GetTick>
 80017c0:	1b40      	subs	r0, r0, r5
 80017c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017c6:	d9f3      	bls.n	80017b0 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80017c8:	2003      	movs	r0, #3
}
 80017ca:	bd38      	pop	{r3, r4, r5, pc}

080017cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80017cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80017ce:	6803      	ldr	r3, [r0, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	0652      	lsls	r2, r2, #25
{
 80017d4:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80017d6:	d501      	bpl.n	80017dc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80017d8:	2000      	movs	r0, #0
 80017da:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80017e2:	f7fe ff2d 	bl	8000640 <HAL_GetTick>
 80017e6:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	065b      	lsls	r3, r3, #25
 80017ee:	d4f3      	bmi.n	80017d8 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80017f0:	f7fe ff26 	bl	8000640 <HAL_GetTick>
 80017f4:	1b40      	subs	r0, r0, r5
 80017f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017fa:	d9f5      	bls.n	80017e8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80017fc:	2003      	movs	r0, #3
}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}

08001800 <HAL_RTC_Init>:
{
 8001800:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001802:	4604      	mov	r4, r0
 8001804:	b1b8      	cbz	r0, 8001836 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001806:	7f43      	ldrb	r3, [r0, #29]
 8001808:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800180c:	b913      	cbnz	r3, 8001814 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800180e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001810:	f001 fd1a 	bl	8003248 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001814:	2302      	movs	r3, #2
 8001816:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	22ca      	movs	r2, #202	; 0xca
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
 800181e:	2253      	movs	r2, #83	; 0x53
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ffd2 	bl	80017cc <RTC_EnterInitMode>
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	4605      	mov	r5, r0
 800182c:	b128      	cbz	r0, 800183a <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800182e:	22ff      	movs	r2, #255	; 0xff
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001832:	2304      	movs	r3, #4
 8001834:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001836:	2501      	movs	r5, #1
 8001838:	e02e      	b.n	8001898 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800183a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800183c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800183e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001846:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001848:	6862      	ldr	r2, [r4, #4]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	4302      	orrs	r2, r0
 800184e:	6960      	ldr	r0, [r4, #20]
 8001850:	4302      	orrs	r2, r0
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001856:	68e2      	ldr	r2, [r4, #12]
 8001858:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	68a1      	ldr	r1, [r4, #8]
 800185e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001862:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800186a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	069b      	lsls	r3, r3, #26
 8001870:	d405      	bmi.n	800187e <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff ff92 	bl	800179c <HAL_RTC_WaitForSynchro>
 8001878:	b108      	cbz	r0, 800187e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	e7d7      	b.n	800182e <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800187e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001880:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800188a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188c:	430a      	orrs	r2, r1
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001890:	22ff      	movs	r2, #255	; 0xff
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001894:	2301      	movs	r3, #1
 8001896:	7763      	strb	r3, [r4, #29]
}
 8001898:	4628      	mov	r0, r5
 800189a:	bd38      	pop	{r3, r4, r5, pc}

0800189c <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800189c:	b084      	sub	sp, #16
 800189e:	b538      	push	{r3, r4, r5, lr}
 80018a0:	ad05      	add	r5, sp, #20
 80018a2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80018a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018a8:	2b01      	cmp	r3, #1
{
 80018aa:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80018ac:	d126      	bne.n	80018fc <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80018ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80018b6:	68c3      	ldr	r3, [r0, #12]
 80018b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80018bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018c0:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80018c2:	68c3      	ldr	r3, [r0, #12]
 80018c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018c8:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80018ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018cc:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80018ce:	bf02      	ittt	eq
 80018d0:	68c3      	ldreq	r3, [r0, #12]
 80018d2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80018d6:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80018d8:	f000 fbde 	bl	8002098 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 80018dc:	9b08      	ldr	r3, [sp, #32]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80018e2:	68a3      	ldr	r3, [r4, #8]
 80018e4:	f043 0306 	orr.w	r3, r3, #6
 80018e8:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80018ea:	68a3      	ldr	r3, [r4, #8]
 80018ec:	f043 0320 	orr.w	r3, r3, #32
 80018f0:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80018f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018f6:	2000      	movs	r0, #0
 80018f8:	b004      	add	sp, #16
 80018fa:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80018fc:	68c3      	ldr	r3, [r0, #12]
 80018fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001902:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001904:	f000 fbc8 	bl	8002098 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190c:	63a3      	str	r3, [r4, #56]	; 0x38
 800190e:	e7e5      	b.n	80018dc <USB_CoreInit+0x40>

08001910 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001910:	6883      	ldr	r3, [r0, #8]
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001918:	2000      	movs	r0, #0
 800191a:	4770      	bx	lr

0800191c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800191c:	6883      	ldr	r3, [r0, #8]
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001924:	2000      	movs	r0, #0
 8001926:	4770      	bx	lr

08001928 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8001928:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800192a:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800192c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800192e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001932:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001934:	d108      	bne.n	8001948 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8001936:	68c3      	ldr	r3, [r0, #12]
 8001938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800193c:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 800193e:	2032      	movs	r0, #50	; 0x32
 8001940:	f7fe fe84 	bl	800064c <HAL_Delay>
  
  return HAL_OK;
}
 8001944:	2000      	movs	r0, #0
 8001946:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8001948:	2900      	cmp	r1, #0
 800194a:	d1f8      	bne.n	800193e <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800194c:	68c3      	ldr	r3, [r0, #12]
 800194e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001952:	60c3      	str	r3, [r0, #12]
 8001954:	e7f3      	b.n	800193e <USB_SetCurrentMode+0x16>
	...

08001958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001958:	b084      	sub	sp, #16
 800195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800195e:	4604      	mov	r4, r0
 8001960:	a807      	add	r0, sp, #28
 8001962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001966:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001968:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800196a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800196c:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 800196e:	b9a6      	cbnz	r6, 800199a <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001974:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800197c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001980:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001986:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001988:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800198c:	d15e      	bne.n	8001a4c <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800198e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001990:	b939      	cbnz	r1, 80019a2 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001992:	4620      	mov	r0, r4
 8001994:	f000 f89e 	bl	8001ad4 <USB_SetDevSpeed>
 8001998:	e007      	b.n	80019aa <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800199a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800199e:	63a3      	str	r3, [r4, #56]	; 0x38
 80019a0:	e7e9      	b.n	8001976 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80019a2:	4619      	mov	r1, r3
 80019a4:	4620      	mov	r0, r4
 80019a6:	f000 f895 	bl	8001ad4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80019aa:	2110      	movs	r1, #16
 80019ac:	4620      	mov	r0, r4
 80019ae:	f000 f86f 	bl	8001a90 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f000 f87e 	bl	8001ab4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80019b8:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 80019be:	612b      	str	r3, [r5, #16]
 80019c0:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 80019c2:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80019c8:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80019ca:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 80019ce:	61eb      	str	r3, [r5, #28]
 80019d0:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019d4:	4543      	cmp	r3, r8
 80019d6:	d13b      	bne.n	8001a50 <USB_DevInit+0xf8>
 80019d8:	2100      	movs	r1, #0
 80019da:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 80019de:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80019e0:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80019e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d13e      	bne.n	8001a6a <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80019ec:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 80019ee:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f4:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80019f6:	d108      	bne.n	8001a0a <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <USB_DevInit+0x130>)
 80019fa:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80019fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	f043 0303 	orr.w	r3, r3, #3
 8001a06:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8001a08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001a0e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001a12:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001a14:	b91f      	cbnz	r7, 8001a1e <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8001a16:	69a3      	ldr	r3, [r4, #24]
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8001a1e:	69a2      	ldr	r2, [r4, #24]
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <USB_DevInit+0x134>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8001a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a28:	b11b      	cbz	r3, 8001a32 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001a2a:	69a3      	ldr	r3, [r4, #24]
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8001a32:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8001a34:	bf01      	itttt	eq
 8001a36:	69a3      	ldreq	r3, [r4, #24]
 8001a38:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001a3c:	f043 0304 	orreq.w	r3, r3, #4
 8001a40:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8001a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a46:	2000      	movs	r0, #0
 8001a48:	b004      	add	sp, #16
 8001a4a:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001a4c:	2103      	movs	r1, #3
 8001a4e:	e7a0      	b.n	8001992 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001a50:	f8d2 c000 	ldr.w	ip, [r2]
 8001a54:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001a58:	bfb4      	ite	lt
 8001a5a:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001a5c:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001a5e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001a60:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001a62:	f8c2 e008 	str.w	lr, [r2, #8]
 8001a66:	3220      	adds	r2, #32
 8001a68:	e7b4      	b.n	80019d4 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001a6a:	f8d2 8000 	ldr.w	r8, [r2]
 8001a6e:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001a72:	bfb4      	ite	lt
 8001a74:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001a78:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001a7a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001a7c:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001a7e:	f8c2 c008 	str.w	ip, [r2, #8]
 8001a82:	3220      	adds	r2, #32
 8001a84:	e7b0      	b.n	80019e8 <USB_DevInit+0x90>
 8001a86:	bf00      	nop
 8001a88:	00800100 	.word	0x00800100
 8001a8c:	803c3800 	.word	0x803c3800

08001a90 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8001a90:	0189      	lsls	r1, r1, #6
 8001a92:	f041 0120 	orr.w	r1, r1, #32
 8001a96:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <USB_FlushTxFifo+0x20>)
 8001a98:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	d005      	beq.n	8001aaa <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001a9e:	6903      	ldr	r3, [r0, #16]
 8001aa0:	f013 0320 	ands.w	r3, r3, #32
 8001aa4:	d1f9      	bne.n	8001a9a <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001aaa:	2003      	movs	r0, #3
}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	00030d41 	.word	0x00030d41

08001ab4 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001ab4:	2310      	movs	r3, #16
 8001ab6:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <USB_FlushRxFifo+0x1c>)
 8001ab8:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001aba:	3a01      	subs	r2, #1
 8001abc:	d005      	beq.n	8001aca <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001abe:	6903      	ldr	r3, [r0, #16]
 8001ac0:	f013 0310 	ands.w	r3, r3, #16
 8001ac4:	d1f9      	bne.n	8001aba <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001aca:	2003      	movs	r0, #3
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	00030d41 	.word	0x00030d41

08001ad4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8001ad4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001ad8:	4319      	orrs	r1, r3
 8001ada:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001ade:	2000      	movs	r0, #0
 8001ae0:	4770      	bx	lr

08001ae2 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001ae2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8001ae6:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8001aea:	f010 0006 	ands.w	r0, r0, #6
 8001aee:	d012      	beq.n	8001b16 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001af0:	6893      	ldr	r3, [r2, #8]
 8001af2:	f003 0306 	and.w	r3, r3, #6
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d00c      	beq.n	8001b14 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8001afa:	6893      	ldr	r3, [r2, #8]
 8001afc:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d007      	beq.n	8001b14 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001b04:	6893      	ldr	r3, [r2, #8]
 8001b06:	f003 0306 	and.w	r3, r3, #6
 8001b0a:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001b0c:	bf14      	ite	ne
 8001b0e:	2000      	movne	r0, #0
 8001b10:	2002      	moveq	r0, #2
 8001b12:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8001b14:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8001b16:	4770      	bx	lr

08001b18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001b18:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001b1a:	784b      	ldrb	r3, [r1, #1]
 8001b1c:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001b1e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8001b22:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d11b      	bne.n	8001b62 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001b2a:	40a3      	lsls	r3, r4
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001b30:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001b34:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001b36:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	0412      	lsls	r2, r2, #16
 8001b3e:	d40e      	bmi.n	8001b5e <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001b40:	688a      	ldr	r2, [r1, #8]
 8001b42:	78c8      	ldrb	r0, [r1, #3]
 8001b44:	681d      	ldr	r5, [r3, #0]
 8001b46:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001b4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b52:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8001b56:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8001b5a:	4328      	orrs	r0, r5
 8001b5c:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001b5e:	2000      	movs	r0, #0
 8001b60:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b66:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001b68:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001b6c:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001b6e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001b72:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	d4f1      	bmi.n	8001b5e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001b7a:	688b      	ldr	r3, [r1, #8]
 8001b7c:	78c9      	ldrb	r1, [r1, #3]
 8001b7e:	6802      	ldr	r2, [r0, #0]
 8001b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001b90:	4313      	orrs	r3, r2
 8001b92:	6003      	str	r3, [r0, #0]
 8001b94:	e7e3      	b.n	8001b5e <USB_ActivateEndpoint+0x46>

08001b96 <USB_DeactivateEndpoint>:
 8001b96:	f000 b801 	b.w	8001b9c <USB_DeactivateDedicatedEndpoint>
	...

08001b9c <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8001b9e:	784b      	ldrb	r3, [r1, #1]
 8001ba0:	2b01      	cmp	r3, #1
{
 8001ba2:	460e      	mov	r6, r1
 8001ba4:	4605      	mov	r5, r0
 8001ba6:	7809      	ldrb	r1, [r1, #0]
 8001ba8:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8001bac:	d126      	bne.n	8001bfc <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8001bae:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001bb2:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bbc:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc2:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8001bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	d101      	bne.n	8001bd4 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8001bd4:	689c      	ldr	r4, [r3, #8]
 8001bd6:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001bda:	d1f7      	bne.n	8001bcc <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8001bdc:	2110      	movs	r1, #16
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7ff ff56 	bl	8001a90 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8001be4:	7831      	ldrb	r1, [r6, #0]
 8001be6:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001bea:	2301      	movs	r3, #1
 8001bec:	408b      	lsls	r3, r1
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	ea22 0303 	bic.w	r3, r2, r3
 8001bf4:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001bfc:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001c00:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c0a:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c10:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8001c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8001c1a:	3a01      	subs	r2, #1
 8001c1c:	d0d8      	beq.n	8001bd0 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001c1e:	6898      	ldr	r0, [r3, #8]
 8001c20:	f010 0010 	ands.w	r0, r0, #16
 8001c24:	d1f9      	bne.n	8001c1a <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c26:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8001c32:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 8001c36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c3a:	408a      	lsls	r2, r1
 8001c3c:	ea23 0302 	bic.w	r3, r3, r2
 8001c40:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
 8001c46:	bf00      	nop
 8001c48:	00030d41 	.word	0x00030d41

08001c4c <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001c4e:	784b      	ldrb	r3, [r1, #1]
 8001c50:	780c      	ldrb	r4, [r1, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	694b      	ldr	r3, [r1, #20]
 8001c56:	d177      	bne.n	8001d48 <USB_EPStartXfer+0xfc>
 8001c58:	2620      	movs	r6, #32
 8001c5a:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001c5e:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001c62:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d138      	bne.n	8001cda <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001c68:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001c6c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001c70:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001c72:	6926      	ldr	r6, [r4, #16]
 8001c74:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001c78:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001c7a:	6926      	ldr	r6, [r4, #16]
 8001c7c:	0cf6      	lsrs	r6, r6, #19
 8001c7e:	04f6      	lsls	r6, r6, #19
 8001c80:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001c82:	2a01      	cmp	r2, #1
 8001c84:	d150      	bne.n	8001d28 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001c86:	780c      	ldrb	r4, [r1, #0]
 8001c88:	690e      	ldr	r6, [r1, #16]
 8001c8a:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001c8e:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001c90:	78ce      	ldrb	r6, [r1, #3]
 8001c92:	2e01      	cmp	r6, #1
 8001c94:	d10f      	bne.n	8001cb6 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001c96:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8001c9a:	780f      	ldrb	r7, [r1, #0]
 8001c9c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001ca0:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001ca4:	fb14 5407 	smlabb	r4, r4, r7, r5
 8001ca8:	6827      	ldr	r7, [r4, #0]
 8001caa:	bf0c      	ite	eq
 8001cac:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001cb0:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8001cb4:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001cb6:	780f      	ldrb	r7, [r1, #0]
 8001cb8:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8001cbc:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001cbe:	682c      	ldr	r4, [r5, #0]
 8001cc0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001cc4:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8001cc6:	d105      	bne.n	8001cd4 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8001cc8:	9200      	str	r2, [sp, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	463a      	mov	r2, r7
 8001cce:	68c9      	ldr	r1, [r1, #12]
 8001cd0:	f000 f8ef 	bl	8001eb2 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	b003      	add	sp, #12
 8001cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001cda:	0cf6      	lsrs	r6, r6, #19
 8001cdc:	04f6      	lsls	r6, r6, #19
 8001cde:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001ce0:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001ce2:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001ce4:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001ce8:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001cec:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001cee:	19de      	adds	r6, r3, r7
 8001cf0:	3e01      	subs	r6, #1
 8001cf2:	fbb6 f7f7 	udiv	r7, r6, r7
 8001cf6:	4e37      	ldr	r6, [pc, #220]	; (8001dd4 <USB_EPStartXfer+0x188>)
 8001cf8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001cfc:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001d00:	ea46 060e 	orr.w	r6, r6, lr
 8001d04:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001d06:	6927      	ldr	r7, [r4, #16]
 8001d08:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001d0c:	433e      	orrs	r6, r7
 8001d0e:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001d10:	78ce      	ldrb	r6, [r1, #3]
 8001d12:	2e01      	cmp	r6, #1
 8001d14:	d15a      	bne.n	8001dcc <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001d16:	6926      	ldr	r6, [r4, #16]
 8001d18:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001d1c:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001d1e:	6926      	ldr	r6, [r4, #16]
 8001d20:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001d24:	6126      	str	r6, [r4, #16]
 8001d26:	e7ac      	b.n	8001c82 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001d28:	78ce      	ldrb	r6, [r1, #3]
 8001d2a:	2e01      	cmp	r6, #1
 8001d2c:	d0b3      	beq.n	8001c96 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ae      	beq.n	8001c90 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001d32:	f891 e000 	ldrb.w	lr, [r1]
 8001d36:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001d3a:	2401      	movs	r4, #1
 8001d3c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001d40:	433c      	orrs	r4, r7
 8001d42:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001d46:	e7a3      	b.n	8001c90 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001d48:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001d4c:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001d50:	6925      	ldr	r5, [r4, #16]
 8001d52:	0ced      	lsrs	r5, r5, #19
 8001d54:	04ed      	lsls	r5, r5, #19
 8001d56:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001d58:	6925      	ldr	r5, [r4, #16]
 8001d5a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001d5e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001d62:	6125      	str	r5, [r4, #16]
 8001d64:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001d66:	b9fb      	cbnz	r3, 8001da8 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001d68:	6923      	ldr	r3, [r4, #16]
 8001d6a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001d6e:	431d      	orrs	r5, r3
 8001d70:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001d72:	6923      	ldr	r3, [r4, #16]
 8001d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d78:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001d7a:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001d7c:	bf04      	itt	eq
 8001d7e:	68cb      	ldreq	r3, [r1, #12]
 8001d80:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001d82:	78cb      	ldrb	r3, [r1, #3]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d10a      	bne.n	8001d9e <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001d88:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001d8c:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	bf0c      	ite	eq
 8001d94:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001d98:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001da4:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001da6:	e795      	b.n	8001cd4 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001da8:	4e0a      	ldr	r6, [pc, #40]	; (8001dd4 <USB_EPStartXfer+0x188>)
 8001daa:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001dac:	442b      	add	r3, r5
 8001dae:	3b01      	subs	r3, #1
 8001db0:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001db4:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001db8:	433e      	orrs	r6, r7
 8001dba:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	6926      	ldr	r6, [r4, #16]
 8001dc0:	435d      	muls	r5, r3
 8001dc2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001dc6:	4335      	orrs	r5, r6
 8001dc8:	6125      	str	r5, [r4, #16]
 8001dca:	e7d6      	b.n	8001d7a <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001dcc:	2a01      	cmp	r2, #1
 8001dce:	d1ae      	bne.n	8001d2e <USB_EPStartXfer+0xe2>
 8001dd0:	e759      	b.n	8001c86 <USB_EPStartXfer+0x3a>
 8001dd2:	bf00      	nop
 8001dd4:	1ff80000 	.word	0x1ff80000

08001dd8 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001dd8:	784b      	ldrb	r3, [r1, #1]
 8001dda:	2b01      	cmp	r3, #1
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	780b      	ldrb	r3, [r1, #0]
 8001de0:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001de2:	d143      	bne.n	8001e6c <USB_EP0StartXfer+0x94>
 8001de4:	2420      	movs	r4, #32
 8001de6:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001dea:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001dee:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001df0:	b9cd      	cbnz	r5, 8001e26 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001df2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001df6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001dfa:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001dfc:	691c      	ldr	r4, [r3, #16]
 8001dfe:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001e02:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001e04:	691c      	ldr	r4, [r3, #16]
 8001e06:	0ce4      	lsrs	r4, r4, #19
 8001e08:	04e4      	lsls	r4, r4, #19
 8001e0a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001e0c:	780d      	ldrb	r5, [r1, #0]
 8001e0e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001e12:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001e14:	681c      	ldr	r4, [r3, #0]
 8001e16:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001e1a:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001e1c:	d11b      	bne.n	8001e56 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001e1e:	690a      	ldr	r2, [r1, #16]
 8001e20:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001e22:	2000      	movs	r0, #0
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001e26:	0ce4      	lsrs	r4, r4, #19
 8001e28:	04e4      	lsls	r4, r4, #19
 8001e2a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001e2c:	691c      	ldr	r4, [r3, #16]
 8001e2e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001e32:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001e36:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001e38:	688c      	ldr	r4, [r1, #8]
 8001e3a:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001e3c:	bf88      	it	hi
 8001e3e:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001e40:	691c      	ldr	r4, [r3, #16]
 8001e42:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001e46:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001e48:	694c      	ldr	r4, [r1, #20]
 8001e4a:	691d      	ldr	r5, [r3, #16]
 8001e4c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001e50:	432c      	orrs	r4, r5
 8001e52:	611c      	str	r4, [r3, #16]
 8001e54:	e7da      	b.n	8001e0c <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001e56:	694b      	ldr	r3, [r1, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0e2      	beq.n	8001e22 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001e5c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001e60:	2301      	movs	r3, #1
 8001e62:	40ab      	lsls	r3, r5
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001e6a:	e7da      	b.n	8001e22 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001e6c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001e70:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001e74:	6903      	ldr	r3, [r0, #16]
 8001e76:	0cdb      	lsrs	r3, r3, #19
 8001e78:	04db      	lsls	r3, r3, #19
 8001e7a:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001e7c:	6903      	ldr	r3, [r0, #16]
 8001e7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001e82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001e86:	6103      	str	r3, [r0, #16]
 8001e88:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001e8a:	b105      	cbz	r5, 8001e8e <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001e8c:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001e8e:	6904      	ldr	r4, [r0, #16]
 8001e90:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001e94:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001e96:	6904      	ldr	r4, [r0, #16]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001e9e:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001ea0:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001ea2:	bf04      	itt	eq
 8001ea4:	68cb      	ldreq	r3, [r1, #12]
 8001ea6:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001eae:	6003      	str	r3, [r0, #0]
 8001eb0:	e7b7      	b.n	8001e22 <USB_EP0StartXfer+0x4a>

08001eb2 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001eb2:	b510      	push	{r4, lr}
 8001eb4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001eb8:	b94c      	cbnz	r4, 8001ece <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001eba:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001ebc:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001ec0:	f023 0303 	bic.w	r3, r3, #3
 8001ec4:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001ec8:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	d101      	bne.n	8001ed2 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001ece:	2000      	movs	r0, #0
 8001ed0:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001ed2:	f851 0b04 	ldr.w	r0, [r1], #4
 8001ed6:	6010      	str	r0, [r2, #0]
 8001ed8:	e7f7      	b.n	8001eca <USB_WritePacket+0x18>

08001eda <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001eda:	3203      	adds	r2, #3
 8001edc:	f022 0203 	bic.w	r2, r2, #3
 8001ee0:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001ee2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001ee6:	4291      	cmp	r1, r2
 8001ee8:	d101      	bne.n	8001eee <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001eea:	4608      	mov	r0, r1
 8001eec:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001eee:	6803      	ldr	r3, [r0, #0]
 8001ef0:	f841 3b04 	str.w	r3, [r1], #4
 8001ef4:	e7f7      	b.n	8001ee6 <USB_ReadPacket+0xc>

08001ef6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001ef6:	784b      	ldrb	r3, [r1, #1]
 8001ef8:	780a      	ldrb	r2, [r1, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f04f 0320 	mov.w	r3, #32
 8001f00:	d10b      	bne.n	8001f1a <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001f02:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001f06:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001f0a:	6803      	ldr	r3, [r0, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0b      	blt.n	8001f28 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f16:	6003      	str	r3, [r0, #0]
 8001f18:	e006      	b.n	8001f28 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001f1a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001f1e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	daf3      	bge.n	8001f10 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001f28:	6803      	ldr	r3, [r0, #0]
 8001f2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001f30:	2000      	movs	r0, #0
 8001f32:	4770      	bx	lr

08001f34 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001f34:	784b      	ldrb	r3, [r1, #1]
 8001f36:	780a      	ldrb	r2, [r1, #0]
 8001f38:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f3a:	bf0c      	ite	eq
 8001f3c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f40:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001f44:	2320      	movs	r3, #32
 8001f46:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f50:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001f52:	78cb      	ldrb	r3, [r1, #3]
 8001f54:	3b02      	subs	r3, #2
 8001f56:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001f58:	bf9e      	ittt	ls
 8001f5a:	6803      	ldrls	r3, [r0, #0]
 8001f5c:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001f62:	2000      	movs	r0, #0
 8001f64:	4770      	bx	lr

08001f66 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001f66:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001f6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f6e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001f72:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001f76:	0109      	lsls	r1, r1, #4
 8001f78:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001f7c:	4319      	orrs	r1, r3
 8001f7e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001f82:	2000      	movs	r0, #0
 8001f84:	4770      	bx	lr

08001f86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001f86:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001f88:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001f8c:	f023 0302 	bic.w	r3, r3, #2
 8001f90:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f7fe fb59 	bl	800064c <HAL_Delay>
  
  return HAL_OK;  
}
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	bd08      	pop	{r3, pc}

08001f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001f9e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001fa0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f7fe fb4d 	bl	800064c <HAL_Delay>
  
  return HAL_OK;  
}
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	bd08      	pop	{r3, pc}

08001fb6 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001fb6:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001fb8:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001fba:	4010      	ands	r0, r2
 8001fbc:	4770      	bx	lr

08001fbe <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001fbe:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001fc2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001fc6:	69c0      	ldr	r0, [r0, #28]
 8001fc8:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001fca:	0c00      	lsrs	r0, r0, #16
 8001fcc:	4770      	bx	lr

08001fce <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001fce:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001fd2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001fd6:	69c0      	ldr	r0, [r0, #28]
 8001fd8:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001fda:	b280      	uxth	r0, r0
 8001fdc:	4770      	bx	lr

08001fde <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001fde:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001fe2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001fe6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001fea:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001fec:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001fee:	4010      	ands	r0, r2
 8001ff0:	4770      	bx	lr

08001ff2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001ff2:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001ff4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001ff8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001ffc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002000:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002002:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002006:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002008:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4323      	orrs	r3, r4
  return v;
}
 800200e:	4018      	ands	r0, r3
 8002010:	bd10      	pop	{r4, pc}

08002012 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002012:	6940      	ldr	r0, [r0, #20]
}
 8002014:	f000 0001 	and.w	r0, r0, #1
 8002018:	4770      	bx	lr

0800201a <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800201a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800201e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800202a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	f002 0206 	and.w	r2, r2, #6
 8002034:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002036:	bf02      	ittt	eq
 8002038:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 800203c:	f042 0203 	orreq.w	r2, r2, #3
 8002040:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 800204c:	2000      	movs	r0, #0
 800204e:	4770      	bx	lr

08002050 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002050:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002052:	2400      	movs	r4, #0
 8002054:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002058:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800205c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002060:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002064:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002068:	f044 0418 	orr.w	r4, r4, #24
 800206c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002070:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8002074:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002076:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800207a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 800207e:	bf08      	it	eq
 8002080:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002084:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002088:	bf04      	itt	eq
 800208a:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 800208e:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8002092:	2000      	movs	r0, #0
 8002094:	bd10      	pop	{r4, pc}
	...

08002098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800209a:	3b01      	subs	r3, #1
 800209c:	d101      	bne.n	80020a2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800209e:	2003      	movs	r0, #3
 80020a0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80020a2:	6902      	ldr	r2, [r0, #16]
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	daf8      	bge.n	800209a <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80020a8:	6903      	ldr	r3, [r0, #16]
 80020aa:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <USB_CoreReset+0x2c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80020b2:	3a01      	subs	r2, #1
 80020b4:	d0f3      	beq.n	800209e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80020b6:	6903      	ldr	r3, [r0, #16]
 80020b8:	f013 0301 	ands.w	r3, r3, #1
 80020bc:	d1f9      	bne.n	80020b2 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80020be:	4618      	mov	r0, r3
}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	00030d41 	.word	0x00030d41

080020c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
    *length = sizeof(USBD_CDC_CfgFSDesc);
 80020c8:	234b      	movs	r3, #75	; 0x4b
 80020ca:	8003      	strh	r3, [r0, #0]
    USBD_CDC_CfgFSDesc[2] = sizeof(USBD_CDC_CfgFSDesc) & 0xFF;
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <USBD_CDC_GetFSCfgDesc+0x10>)
 80020ce:	7083      	strb	r3, [r0, #2]
    USBD_CDC_CfgFSDesc[3] = (sizeof(USBD_CDC_CfgFSDesc) >> 8) & 0xFF;
 80020d0:	2300      	movs	r3, #0
 80020d2:	70c3      	strb	r3, [r0, #3]
    return USBD_CDC_CfgFSDesc;
}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000040 	.word	0x20000040

080020dc <rndis_iso_out_incomplete>:
{
 80020dc:	b508      	push	{r3, lr}
	USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 80020de:	4a03      	ldr	r2, [pc, #12]	; (80020ec <rndis_iso_out_incomplete+0x10>)
 80020e0:	2340      	movs	r3, #64	; 0x40
 80020e2:	2103      	movs	r1, #3
 80020e4:	f001 fa56 	bl	8003594 <USBD_LL_PrepareReceive>
}
 80020e8:	2000      	movs	r0, #0
 80020ea:	bd08      	pop	{r3, pc}
 80020ec:	20007888 	.word	0x20007888

080020f0 <USBD_CDC_DeInit>:
{
 80020f0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80020f2:	2181      	movs	r1, #129	; 0x81
{
 80020f4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80020f6:	f001 f9f3 	bl	80034e0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80020fa:	2182      	movs	r1, #130	; 0x82
 80020fc:	4620      	mov	r0, r4
 80020fe:	f001 f9ef 	bl	80034e0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002102:	2103      	movs	r1, #3
 8002104:	4620      	mov	r0, r4
 8002106:	f001 f9eb 	bl	80034e0 <USBD_LL_CloseEP>
}
 800210a:	2000      	movs	r0, #0
 800210c:	bd10      	pop	{r4, pc}
	...

08002110 <USBD_CDC_Init>:
{
 8002110:	b510      	push	{r4, lr}
    USBD_LL_OpenEP(pdev,
 8002112:	2308      	movs	r3, #8
{
 8002114:	4604      	mov	r4, r0
    USBD_LL_OpenEP(pdev,
 8002116:	2203      	movs	r2, #3
 8002118:	2181      	movs	r1, #129	; 0x81
 800211a:	f001 f9d1 	bl	80034c0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	2202      	movs	r2, #2
 8002122:	2182      	movs	r1, #130	; 0x82
 8002124:	4620      	mov	r0, r4
 8002126:	f001 f9cb 	bl	80034c0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800212a:	2340      	movs	r3, #64	; 0x40
 800212c:	2202      	movs	r2, #2
 800212e:	2103      	movs	r1, #3
 8002130:	4620      	mov	r0, r4
 8002132:	f001 f9c5 	bl	80034c0 <USBD_LL_OpenEP>
    USBD_LL_PrepareReceive(pdev,
 8002136:	2340      	movs	r3, #64	; 0x40
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <USBD_CDC_Init+0x38>)
 800213a:	2103      	movs	r1, #3
 800213c:	4620      	mov	r0, r4
 800213e:	f001 fa29 	bl	8003594 <USBD_LL_PrepareReceive>
}
 8002142:	2000      	movs	r0, #0
 8002144:	bd10      	pop	{r4, pc}
 8002146:	bf00      	nop
 8002148:	20007888 	.word	0x20007888

0800214c <usbd_cdc_transfer.part.0>:
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0) return USBD_OK;
 800214c:	4b23      	ldr	r3, [pc, #140]	; (80021dc <usbd_cdc_transfer.part.0+0x90>)
static __inline uint8_t usbd_cdc_transfer(void *pdev)
 800214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0) return USBD_OK;
 8002152:	681f      	ldr	r7, [r3, #0]
static __inline uint8_t usbd_cdc_transfer(void *pdev)
 8002154:	4680      	mov	r8, r0
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0) return USBD_OK;
 8002156:	2f00      	cmp	r7, #0
 8002158:	d03d      	beq.n	80021d6 <usbd_cdc_transfer.part.0+0x8a>
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <usbd_cdc_transfer.part.0+0x94>)
 800215c:	681d      	ldr	r5, [r3, #0]
 800215e:	2d00      	cmp	r5, #0
 8002160:	dd39      	ble.n	80021d6 <usbd_cdc_transfer.part.0+0x8a>
	if (rndis_first_tx)
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <usbd_cdc_transfer.part.0+0x98>)
 8002164:	4e20      	ldr	r6, [pc, #128]	; (80021e8 <usbd_cdc_transfer.part.0+0x9c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b363      	cbz	r3, 80021c4 <usbd_cdc_transfer.part.0+0x78>
		memset(hdr, 0, sizeof(rndis_data_packet_t));
 800216a:	4c20      	ldr	r4, [pc, #128]	; (80021ec <usbd_cdc_transfer.part.0+0xa0>)
 800216c:	222c      	movs	r2, #44	; 0x2c
 800216e:	2100      	movs	r1, #0
 8002170:	4620      	mov	r0, r4
 8002172:	f005 ff19 	bl	8007fa8 <memset>
		hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 8002176:	2300      	movs	r3, #0
		if (sended > rndis_tx_size) sended = rndis_tx_size;
 8002178:	2d13      	cmp	r5, #19
		hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 800217a:	f04f 0201 	mov.w	r2, #1
 800217e:	7063      	strb	r3, [r4, #1]
 8002180:	70a3      	strb	r3, [r4, #2]
 8002182:	70e3      	strb	r3, [r4, #3]
		hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 8002184:	7263      	strb	r3, [r4, #9]
 8002186:	72a3      	strb	r3, [r4, #10]
 8002188:	72e3      	strb	r3, [r4, #11]
		hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 800218a:	7022      	strb	r2, [r4, #0]
		sended = RNDIS_DATA_IN_SZ - sizeof(rndis_data_packet_t);
 800218c:	bfc8      	it	gt
 800218e:	2314      	movgt	r3, #20
		hdr->MessageLength = sizeof(rndis_data_packet_t) + rndis_tx_size;
 8002190:	f105 022c 	add.w	r2, r5, #44	; 0x2c
		sended = RNDIS_DATA_IN_SZ - sizeof(rndis_data_packet_t);
 8002194:	bfc8      	it	gt
 8002196:	6033      	strgt	r3, [r6, #0]
		hdr->MessageLength = sizeof(rndis_data_packet_t) + rndis_tx_size;
 8002198:	6062      	str	r2, [r4, #4]
		if (sended > rndis_tx_size) sended = rndis_tx_size;
 800219a:	bfd8      	it	le
 800219c:	6035      	strle	r5, [r6, #0]
		hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	7222      	strb	r2, [r4, #8]
		hdr->DataLength = rndis_tx_size;
 80021a2:	60e5      	str	r5, [r4, #12]
		memcpy(first + sizeof(rndis_data_packet_t), rndis_tx_ptr, sended);
 80021a4:	6834      	ldr	r4, [r6, #0]
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <usbd_cdc_transfer.part.0+0xa4>)
 80021a8:	4622      	mov	r2, r4
 80021aa:	4639      	mov	r1, r7
 80021ac:	f005 fef1 	bl	8007f92 <memcpy>
		USBD_LL_Transmit(pdev,
 80021b0:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80021b4:	4640      	mov	r0, r8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <usbd_cdc_transfer.part.0+0xa0>)
 80021ba:	2181      	movs	r1, #129	; 0x81
}
 80021bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		USBD_LL_Transmit(pdev,
 80021c0:	f001 b9da 	b.w	8003578 <USBD_LL_Transmit>
 80021c4:	2d40      	cmp	r5, #64	; 0x40
 80021c6:	bfa8      	it	ge
 80021c8:	2540      	movge	r5, #64	; 0x40
		USBD_LL_Transmit(pdev,
 80021ca:	b2ab      	uxth	r3, r5
 80021cc:	463a      	mov	r2, r7
 80021ce:	2182      	movs	r1, #130	; 0x82
 80021d0:	f001 f9d2 	bl	8003578 <USBD_LL_Transmit>
		sended = n;
 80021d4:	6035      	str	r5, [r6, #0]
 80021d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021da:	bf00      	nop
 80021dc:	200001c4 	.word	0x200001c4
 80021e0:	200001c8 	.word	0x200001c8
 80021e4:	2000008b 	.word	0x2000008b
 80021e8:	200001cc 	.word	0x200001cc
 80021ec:	20000174 	.word	0x20000174
 80021f0:	200001a0 	.word	0x200001a0

080021f4 <USBD_CDC_DataIn>:
	if (epnum == (RNDIS_DATA_IN_EP & 0x0F))
 80021f4:	f001 010f 	and.w	r1, r1, #15
 80021f8:	2902      	cmp	r1, #2
{
 80021fa:	b538      	push	{r3, r4, r5, lr}
	if (epnum == (RNDIS_DATA_IN_EP & 0x0F))
 80021fc:	d113      	bne.n	8002226 <USBD_CDC_DataIn+0x32>
		rndis_sended += sended;
 80021fe:	4d0b      	ldr	r5, [pc, #44]	; (800222c <USBD_CDC_DataIn+0x38>)
		rndis_first_tx = false;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <USBD_CDC_DataIn+0x3c>)
		rndis_sended += sended;
 8002202:	490c      	ldr	r1, [pc, #48]	; (8002234 <USBD_CDC_DataIn+0x40>)
		rndis_first_tx = false;
 8002204:	2400      	movs	r4, #0
		rndis_sended += sended;
 8002206:	680a      	ldr	r2, [r1, #0]
		rndis_first_tx = false;
 8002208:	701c      	strb	r4, [r3, #0]
		rndis_sended += sended;
 800220a:	682b      	ldr	r3, [r5, #0]
		sended = 0;
 800220c:	600c      	str	r4, [r1, #0]
		rndis_sended += sended;
 800220e:	4413      	add	r3, r2
 8002210:	602b      	str	r3, [r5, #0]
		rndis_tx_size -= sended;
 8002212:	4d09      	ldr	r5, [pc, #36]	; (8002238 <USBD_CDC_DataIn+0x44>)
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	602b      	str	r3, [r5, #0]
		rndis_tx_ptr += sended;
 800221a:	4d08      	ldr	r5, [pc, #32]	; (800223c <USBD_CDC_DataIn+0x48>)
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	4413      	add	r3, r2
 8002220:	602b      	str	r3, [r5, #0]
 8002222:	f7ff ff93 	bl	800214c <usbd_cdc_transfer.part.0>
}
 8002226:	2000      	movs	r0, #0
 8002228:	bd38      	pop	{r3, r4, r5, pc}
 800222a:	bf00      	nop
 800222c:	200001c0 	.word	0x200001c0
 8002230:	2000008b 	.word	0x2000008b
 8002234:	200001cc 	.word	0x200001cc
 8002238:	200001c8 	.word	0x200001c8
 800223c:	200001c4 	.word	0x200001c4

08002240 <USBD_CDC_Setup>:
{
 8002240:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002242:	780b      	ldrb	r3, [r1, #0]
 8002244:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002248:	2a20      	cmp	r2, #32
 800224a:	d108      	bne.n	800225e <USBD_CDC_Setup+0x1e>
    if (req->wLength)
 800224c:	88ca      	ldrh	r2, [r1, #6]
 800224e:	b132      	cbz	r2, 800225e <USBD_CDC_Setup+0x1e>
      if (req->bmRequest & 0x80)
 8002250:	061b      	lsls	r3, r3, #24
			USBD_CtlSendData(pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength);
 8002252:	4905      	ldr	r1, [pc, #20]	; (8002268 <USBD_CDC_Setup+0x28>)
      if (req->bmRequest & 0x80)
 8002254:	d505      	bpl.n	8002262 <USBD_CDC_Setup+0x22>
			USBD_CtlSendData(pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength);
 8002256:	684a      	ldr	r2, [r1, #4]
 8002258:	b292      	uxth	r2, r2
 800225a:	f000 fd70 	bl	8002d3e <USBD_CtlSendData>
}
 800225e:	2000      	movs	r0, #0
 8002260:	bd08      	pop	{r3, pc}
        USBD_CtlPrepareRx(pdev, encapsulated_buffer, req->wLength);
 8002262:	f000 fd81 	bl	8002d68 <USBD_CtlPrepareRx>
 8002266:	e7fa      	b.n	800225e <USBD_CDC_Setup+0x1e>
 8002268:	20007ede 	.word	0x20007ede

0800226c <USBD_CDC_DataOut>:
{
 800226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002270:	460c      	mov	r4, r1
 8002272:	4607      	mov	r7, r0
	 uint32_t receivedLenght = USBD_LL_GetRxDataSize (pdev, epnum);
 8002274:	f001 f99c 	bl	80035b0 <USBD_LL_GetRxDataSize>
		if (epnum == RNDIS_DATA_OUT_EP)
 8002278:	2c03      	cmp	r4, #3
	 uint32_t receivedLenght = USBD_LL_GetRxDataSize (pdev, epnum);
 800227a:	4680      	mov	r8, r0
		if (epnum == RNDIS_DATA_OUT_EP)
 800227c:	d114      	bne.n	80022a8 <USBD_CDC_DataOut+0x3c>
			if (rndis_received + receivedLenght > RNDIS_RX_BUFFER_SIZE)
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <USBD_CDC_DataOut+0x98>)
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	f240 6216 	movw	r2, #1558	; 0x616
 8002286:	eb08 0500 	add.w	r5, r8, r0
 800228a:	4295      	cmp	r5, r2
 800228c:	461e      	mov	r6, r3
 800228e:	d90e      	bls.n	80022ae <USBD_CDC_DataOut+0x42>
				usb_eth_stat.rxbad++;
 8002290:	491d      	ldr	r1, [pc, #116]	; (8002308 <USBD_CDC_DataOut+0x9c>)
 8002292:	68ca      	ldr	r2, [r1, #12]
 8002294:	3201      	adds	r2, #1
 8002296:	60ca      	str	r2, [r1, #12]
				rndis_received = 0;
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
			USBD_LL_PrepareReceive(pdev,
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <USBD_CDC_DataOut+0xa0>)
 80022a0:	2103      	movs	r1, #3
 80022a2:	4638      	mov	r0, r7
 80022a4:	f001 f976 	bl	8003594 <USBD_LL_PrepareReceive>
}
 80022a8:	2000      	movs	r0, #0
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					memcpy(&rndis_rx_buffer[rndis_received], usb_rx_buffer, receivedLenght);
 80022ae:	4c18      	ldr	r4, [pc, #96]	; (8002310 <USBD_CDC_DataOut+0xa4>)
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <USBD_CDC_DataOut+0xa0>)
 80022b2:	4642      	mov	r2, r8
 80022b4:	4420      	add	r0, r4
 80022b6:	f005 fe6c 	bl	8007f92 <memcpy>
					if (receivedLenght != RNDIS_DATA_OUT_SZ)
 80022ba:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
					rndis_received += receivedLenght;
 80022be:	6035      	str	r5, [r6, #0]
					if (receivedLenght != RNDIS_DATA_OUT_SZ)
 80022c0:	d0ec      	beq.n	800229c <USBD_CDC_DataOut+0x30>
	if (size < sizeof(rndis_data_packet_t)) return;
 80022c2:	2d2b      	cmp	r5, #43	; 0x2b
 80022c4:	d90f      	bls.n	80022e6 <USBD_CDC_DataOut+0x7a>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10c      	bne.n	80022e6 <USBD_CDC_DataOut+0x7a>
 80022cc:	6863      	ldr	r3, [r4, #4]
 80022ce:	429d      	cmp	r5, r3
 80022d0:	d109      	bne.n	80022e6 <USBD_CDC_DataOut+0x7a>
	if (p->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + p->DataLength != size)
 80022d2:	68a0      	ldr	r0, [r4, #8]
 80022d4:	68e1      	ldr	r1, [r4, #12]
 80022d6:	1843      	adds	r3, r0, r1
 80022d8:	3308      	adds	r3, #8
 80022da:	429d      	cmp	r5, r3
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <USBD_CDC_DataOut+0x9c>)
 80022de:	d005      	beq.n	80022ec <USBD_CDC_DataOut+0x80>
		usb_eth_stat.rxbad++;
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	3201      	adds	r2, #1
 80022e4:	60da      	str	r2, [r3, #12]
						rndis_received = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	6033      	str	r3, [r6, #0]
 80022ea:	e7d7      	b.n	800229c <USBD_CDC_DataOut+0x30>
	usb_eth_stat.rxok++;
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	3201      	adds	r2, #1
 80022f0:	605a      	str	r2, [r3, #4]
	if (rndis_rxproc != NULL)
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <USBD_CDC_DataOut+0xa8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f5      	beq.n	80022e6 <USBD_CDC_DataOut+0x7a>
		rndis_rxproc(&rndis_rx_buffer[p->DataOffset + offsetof(rndis_data_packet_t, DataOffset)], p->DataLength);
 80022fa:	3008      	adds	r0, #8
 80022fc:	4420      	add	r0, r4
 80022fe:	4798      	blx	r3
 8002300:	e7f1      	b.n	80022e6 <USBD_CDC_DataOut+0x7a>
 8002302:	bf00      	nop
 8002304:	200001b8 	.word	0x200001b8
 8002308:	200001d0 	.word	0x200001d0
 800230c:	20007888 	.word	0x20007888
 8002310:	200078c8 	.word	0x200078c8
 8002314:	200001bc 	.word	0x200001bc

08002318 <rndis_iso_in_incomplete>:
{
 8002318:	b508      	push	{r3, lr}
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0) return USBD_OK;
 800231a:	4b03      	ldr	r3, [pc, #12]	; (8002328 <rndis_iso_in_incomplete+0x10>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b90b      	cbnz	r3, 8002324 <rndis_iso_in_incomplete+0xc>
 8002320:	f7ff ff14 	bl	800214c <usbd_cdc_transfer.part.0>
}
 8002324:	2000      	movs	r0, #0
 8002326:	bd08      	pop	{r3, pc}
 8002328:	200001cc 	.word	0x200001cc

0800232c <usbd_rndis_sof>:
{
 800232c:	b508      	push	{r3, lr}
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0) return USBD_OK;
 800232e:	4b03      	ldr	r3, [pc, #12]	; (800233c <usbd_rndis_sof+0x10>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b90b      	cbnz	r3, 8002338 <usbd_rndis_sof+0xc>
 8002334:	f7ff ff0a 	bl	800214c <usbd_cdc_transfer.part.0>
}
 8002338:	2000      	movs	r0, #0
 800233a:	bd08      	pop	{r3, pc}
 800233c:	200001cc 	.word	0x200001cc

08002340 <rndis_query_cmplt32>:
{
 8002340:	b430      	push	{r4, r5}
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <rndis_query_cmplt32+0x44>)
 8002344:	2404      	movs	r4, #4
 8002346:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 800234a:	2200      	movs	r2, #0
 800234c:	701c      	strb	r4, [r3, #0]
 800234e:	70dd      	strb	r5, [r3, #3]
	c->InformationBufferLength = 4;
 8002350:	741c      	strb	r4, [r3, #16]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 8002352:	251c      	movs	r5, #28
	c->InformationBufferOffset = 16;
 8002354:	2410      	movs	r4, #16
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8002356:	705a      	strb	r2, [r3, #1]
 8002358:	709a      	strb	r2, [r3, #2]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 800235a:	711d      	strb	r5, [r3, #4]
 800235c:	715a      	strb	r2, [r3, #5]
 800235e:	719a      	strb	r2, [r3, #6]
 8002360:	71da      	strb	r2, [r3, #7]
	c->InformationBufferLength = 4;
 8002362:	745a      	strb	r2, [r3, #17]
 8002364:	749a      	strb	r2, [r3, #18]
 8002366:	74da      	strb	r2, [r3, #19]
	c->InformationBufferOffset = 16;
 8002368:	751c      	strb	r4, [r3, #20]
 800236a:	755a      	strb	r2, [r3, #21]
 800236c:	759a      	strb	r2, [r3, #22]
 800236e:	75da      	strb	r2, [r3, #23]
	c->Status = status;
 8002370:	60d8      	str	r0, [r3, #12]
	*(uint32_t *)(c + 1) = data;
 8002372:	6199      	str	r1, [r3, #24]
	USBD_LL_Transmit(&hUsbDeviceFS,
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <rndis_query_cmplt32+0x48>)
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <rndis_query_cmplt32+0x4c>)
 8002378:	2308      	movs	r3, #8
 800237a:	2181      	movs	r1, #129	; 0x81
}
 800237c:	bc30      	pop	{r4, r5}
	USBD_LL_Transmit(&hUsbDeviceFS,
 800237e:	f001 b8fb 	b.w	8003578 <USBD_LL_Transmit>
 8002382:	bf00      	nop
 8002384:	20007ede 	.word	0x20007ede
 8002388:	08007fd0 	.word	0x08007fd0
 800238c:	20007fa8 	.word	0x20007fa8

08002390 <rndis_query_cmplt>:
{
 8002390:	b570      	push	{r4, r5, r6, lr}
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <rndis_query_cmplt+0x40>)
 8002394:	2604      	movs	r6, #4
 8002396:	701e      	strb	r6, [r3, #0]
 8002398:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 800239c:	2400      	movs	r4, #0
 800239e:	70de      	strb	r6, [r3, #3]
	c->InformationBufferOffset = 16;
 80023a0:	2510      	movs	r5, #16
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 80023a2:	f102 0618 	add.w	r6, r2, #24
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 80023a6:	705c      	strb	r4, [r3, #1]
 80023a8:	709c      	strb	r4, [r3, #2]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 80023aa:	605e      	str	r6, [r3, #4]
	c->InformationBufferLength = size;
 80023ac:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 80023ae:	751d      	strb	r5, [r3, #20]
 80023b0:	755c      	strb	r4, [r3, #21]
 80023b2:	759c      	strb	r4, [r3, #22]
 80023b4:	75dc      	strb	r4, [r3, #23]
	c->Status = status;
 80023b6:	60d8      	str	r0, [r3, #12]
	memcpy(c + 1, data, size);
 80023b8:	f103 0018 	add.w	r0, r3, #24
 80023bc:	f005 fde9 	bl	8007f92 <memcpy>
	USBD_LL_Transmit(&hUsbDeviceFS,
 80023c0:	2308      	movs	r3, #8
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <rndis_query_cmplt+0x44>)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <rndis_query_cmplt+0x48>)
 80023c6:	2181      	movs	r1, #129	; 0x81
}
 80023c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	USBD_LL_Transmit(&hUsbDeviceFS,
 80023cc:	f001 b8d4 	b.w	8003578 <USBD_LL_Transmit>
 80023d0:	20007ede 	.word	0x20007ede
 80023d4:	08007fd0 	.word	0x08007fd0
 80023d8:	20007fa8 	.word	0x20007fa8

080023dc <rndis_query>:
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <rndis_query+0x110>)
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <rndis_query+0x114>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d05d      	beq.n	80024a2 <rndis_query+0xc6>
 80023e6:	d82e      	bhi.n	8002446 <rndis_query+0x6a>
 80023e8:	3a0c      	subs	r2, #12
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d028      	beq.n	8002440 <rndis_query+0x64>
 80023ee:	d813      	bhi.n	8002418 <rndis_query+0x3c>
 80023f0:	3a07      	subs	r2, #7
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <rndis_query+0x38>
 80023f6:	d804      	bhi.n	8002402 <rndis_query+0x26>
 80023f8:	3a02      	subs	r2, #2
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d04c      	beq.n	8002498 <rndis_query+0xbc>
 80023fe:	3201      	adds	r2, #1
 8002400:	e006      	b.n	8002410 <rndis_query+0x34>
 8002402:	4a3c      	ldr	r2, [pc, #240]	; (80024f4 <rndis_query+0x118>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d05f      	beq.n	80024c8 <rndis_query+0xec>
 8002408:	3201      	adds	r2, #1
 800240a:	4293      	cmp	r3, r2
 800240c:	d054      	beq.n	80024b8 <rndis_query+0xdc>
 800240e:	3a03      	subs	r2, #3
 8002410:	4293      	cmp	r3, r2
 8002412:	d167      	bne.n	80024e4 <rndis_query+0x108>
		case OID_GEN_RCV_NO_BUFFER:          rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8002414:	2100      	movs	r1, #0
 8002416:	e046      	b.n	80024a6 <rndis_query+0xca>
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 8002418:	4a37      	ldr	r2, [pc, #220]	; (80024f8 <rndis_query+0x11c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d051      	beq.n	80024c2 <rndis_query+0xe6>
 800241e:	d806      	bhi.n	800242e <rndis_query+0x52>
 8002420:	3a02      	subs	r2, #2
 8002422:	4293      	cmp	r3, r2
 8002424:	d04a      	beq.n	80024bc <rndis_query+0xe0>
 8002426:	d90b      	bls.n	8002440 <rndis_query+0x64>
		case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 8002428:	2208      	movs	r2, #8
 800242a:	4934      	ldr	r1, [pc, #208]	; (80024fc <rndis_query+0x120>)
 800242c:	e036      	b.n	800249c <rndis_query+0xc0>
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 800242e:	4a34      	ldr	r2, [pc, #208]	; (8002500 <rndis_query+0x124>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d0ef      	beq.n	8002414 <rndis_query+0x38>
 8002434:	3201      	adds	r2, #1
 8002436:	4293      	cmp	r3, r2
 8002438:	d0ec      	beq.n	8002414 <rndis_query+0x38>
 800243a:	3a03      	subs	r2, #3
 800243c:	4293      	cmp	r3, r2
 800243e:	d151      	bne.n	80024e4 <rndis_query+0x108>
		case OID_GEN_RECEIVE_BLOCK_SIZE:     rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8002440:	f240 51ea 	movw	r1, #1514	; 0x5ea
 8002444:	e02f      	b.n	80024a6 <rndis_query+0xca>
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 8002446:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800244a:	d032      	beq.n	80024b2 <rndis_query+0xd6>
 800244c:	d812      	bhi.n	8002474 <rndis_query+0x98>
 800244e:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <rndis_query+0x128>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d041      	beq.n	80024d8 <rndis_query+0xfc>
 8002454:	d807      	bhi.n	8002466 <rndis_query+0x8a>
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <rndis_query+0x12c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d0db      	beq.n	8002414 <rndis_query+0x38>
 800245c:	4a2b      	ldr	r2, [pc, #172]	; (800250c <rndis_query+0x130>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d038      	beq.n	80024d4 <rndis_query+0xf8>
 8002462:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <rndis_query+0x134>)
 8002464:	e7d4      	b.n	8002410 <rndis_query+0x34>
 8002466:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <rndis_query+0x138>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d038      	beq.n	80024de <rndis_query+0x102>
 800246c:	d2c7      	bcs.n	80023fe <rndis_query+0x22>
		case OID_GEN_XMIT_ERROR:             rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <rndis_query+0x13c>)
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	e018      	b.n	80024a6 <rndis_query+0xca>
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <rndis_query+0x140>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d029      	beq.n	80024ce <rndis_query+0xf2>
 800247a:	d805      	bhi.n	8002488 <rndis_query+0xac>
 800247c:	3a02      	subs	r2, #2
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <rndis_query+0xf2>
 8002482:	d913      	bls.n	80024ac <rndis_query+0xd0>
		case OID_802_3_MAXIMUM_LIST_SIZE:    rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 1); return;
 8002484:	2101      	movs	r1, #1
 8002486:	e00e      	b.n	80024a6 <rndis_query+0xca>
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 8002488:	4a25      	ldr	r2, [pc, #148]	; (8002520 <rndis_query+0x144>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d0c2      	beq.n	8002414 <rndis_query+0x38>
 800248e:	3201      	adds	r2, #1
 8002490:	4293      	cmp	r3, r2
 8002492:	d0bf      	beq.n	8002414 <rndis_query+0x38>
 8002494:	3a02      	subs	r2, #2
 8002496:	e7bb      	b.n	8002410 <rndis_query+0x34>
		case OID_GEN_SUPPORTED_LIST:         rndis_query_cmplt(RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 8002498:	4922      	ldr	r1, [pc, #136]	; (8002524 <rndis_query+0x148>)
 800249a:	2258      	movs	r2, #88	; 0x58
		case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 800249c:	2000      	movs	r0, #0
		default:                             rndis_query_cmplt(RNDIS_STATUS_FAILURE, NULL, 0); return;
 800249e:	f7ff bf77 	b.w	8002390 <rndis_query_cmplt>
		case OID_GEN_VENDOR_DRIVER_VERSION:  rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 80024a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff bf4a 	b.w	8002340 <rndis_query_cmplt32>
		case OID_802_3_CURRENT_ADDRESS:      rndis_query_cmplt(RNDIS_STATUS_SUCCESS, &station_hwaddr, 6); return;
 80024ac:	2206      	movs	r2, #6
 80024ae:	491e      	ldr	r1, [pc, #120]	; (8002528 <rndis_query+0x14c>)
 80024b0:	e7f4      	b.n	800249c <rndis_query+0xc0>
		case OID_802_3_PERMANENT_ADDRESS:    rndis_query_cmplt(RNDIS_STATUS_SUCCESS, &permanent_hwaddr, 6); return;
 80024b2:	2206      	movs	r2, #6
 80024b4:	491d      	ldr	r1, [pc, #116]	; (800252c <rndis_query+0x150>)
 80024b6:	e7f1      	b.n	800249c <rndis_query+0xc0>
		case OID_GEN_LINK_SPEED:             rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 80024b8:	491d      	ldr	r1, [pc, #116]	; (8002530 <rndis_query+0x154>)
 80024ba:	e7f4      	b.n	80024a6 <rndis_query+0xca>
		case OID_GEN_VENDOR_ID:              rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 80024bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80024c0:	e7f1      	b.n	80024a6 <rndis_query+0xca>
		case OID_GEN_CURRENT_PACKET_FILTER:  rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <rndis_query+0x158>)
		case OID_GEN_XMIT_OK:                rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	e7ee      	b.n	80024a6 <rndis_query+0xca>
		case OID_GEN_MAXIMUM_FRAME_SIZE:     rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE - ETH_HEADER_SIZE); return;
 80024c8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80024cc:	e7eb      	b.n	80024a6 <rndis_query+0xca>
		case OID_802_3_MAC_OPTIONS:          rndis_query_cmplt32(RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80024ce:	2100      	movs	r1, #0
 80024d0:	4819      	ldr	r0, [pc, #100]	; (8002538 <rndis_query+0x15c>)
 80024d2:	e7e9      	b.n	80024a8 <rndis_query+0xcc>
		case OID_GEN_XMIT_OK:                rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <rndis_query+0x13c>)
 80024d6:	e7f5      	b.n	80024c4 <rndis_query+0xe8>
		case OID_GEN_RCV_OK:                 rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <rndis_query+0x13c>)
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	e7e3      	b.n	80024a6 <rndis_query+0xca>
		case OID_GEN_RCV_ERROR:              rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <rndis_query+0x13c>)
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	e7e0      	b.n	80024a6 <rndis_query+0xca>
		default:                             rndis_query_cmplt(RNDIS_STATUS_FAILURE, NULL, 0); return;
 80024e4:	2200      	movs	r2, #0
 80024e6:	4611      	mov	r1, r2
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <rndis_query+0x160>)
 80024ea:	e7d8      	b.n	800249e <rndis_query+0xc2>
 80024ec:	20007ede 	.word	0x20007ede
 80024f0:	00010116 	.word	0x00010116
 80024f4:	00010106 	.word	0x00010106
 80024f8:	0001010e 	.word	0x0001010e
 80024fc:	0800803e 	.word	0x0800803e
 8002500:	00010113 	.word	0x00010113
 8002504:	00020102 	.word	0x00020102
 8002508:	0001021b 	.word	0x0001021b
 800250c:	00020101 	.word	0x00020101
 8002510:	00010202 	.word	0x00010202
 8002514:	00020104 	.word	0x00020104
 8002518:	200001d0 	.word	0x200001d0
 800251c:	01010105 	.word	0x01010105
 8002520:	01020102 	.word	0x01020102
 8002524:	08007fe0 	.word	0x08007fe0
 8002528:	08008046 	.word	0x08008046
 800252c:	08008038 	.word	0x08008038
 8002530:	0001d4c0 	.word	0x0001d4c0
 8002534:	200001b4 	.word	0x200001b4
 8002538:	c00000bb 	.word	0xc00000bb
 800253c:	c0000001 	.word	0xc0000001

08002540 <rndis_handle_set_msg>:
{
 8002540:	b410      	push	{r4}
	oid = m->Oid;
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <rndis_handle_set_msg+0x84>)
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 8002544:	2200      	movs	r2, #0
	oid = m->Oid;
 8002546:	68d9      	ldr	r1, [r3, #12]
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 8002548:	705a      	strb	r2, [r3, #1]
 800254a:	2405      	movs	r4, #5
 800254c:	709a      	strb	r2, [r3, #2]
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 800254e:	715a      	strb	r2, [r3, #5]
 8002550:	719a      	strb	r2, [r3, #6]
 8002552:	71da      	strb	r2, [r3, #7]
	c->Status = RNDIS_STATUS_SUCCESS;
 8002554:	731a      	strb	r2, [r3, #12]
 8002556:	735a      	strb	r2, [r3, #13]
 8002558:	739a      	strb	r2, [r3, #14]
 800255a:	73da      	strb	r2, [r3, #15]
	switch (oid)
 800255c:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <rndis_handle_set_msg+0x88>)
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 800255e:	701c      	strb	r4, [r3, #0]
 8002560:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 8002564:	70dc      	strb	r4, [r3, #3]
	switch (oid)
 8002566:	4291      	cmp	r1, r2
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 8002568:	f04f 0410 	mov.w	r4, #16
 800256c:	711c      	strb	r4, [r3, #4]
 800256e:	461a      	mov	r2, r3
	switch (oid)
 8002570:	d006      	beq.n	8002580 <rndis_handle_set_msg+0x40>
 8002572:	d80c      	bhi.n	800258e <rndis_handle_set_msg+0x4e>
 8002574:	4c15      	ldr	r4, [pc, #84]	; (80025cc <rndis_handle_set_msg+0x8c>)
 8002576:	42a1      	cmp	r1, r4
 8002578:	d00e      	beq.n	8002598 <rndis_handle_set_msg+0x58>
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <rndis_handle_set_msg+0x90>)
 800257c:	4299      	cmp	r1, r3
 800257e:	d117      	bne.n	80025b0 <rndis_handle_set_msg+0x70>
	USBD_LL_Transmit(pdev,
 8002580:	2308      	movs	r3, #8
 8002582:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <rndis_handle_set_msg+0x94>)
}
 8002584:	f85d 4b04 	ldr.w	r4, [sp], #4
	USBD_LL_Transmit(pdev,
 8002588:	2181      	movs	r1, #129	; 0x81
 800258a:	f000 bff5 	b.w	8003578 <USBD_LL_Transmit>
	switch (oid)
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <rndis_handle_set_msg+0x98>)
 8002590:	4299      	cmp	r1, r3
 8002592:	d0f5      	beq.n	8002580 <rndis_handle_set_msg+0x40>
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <rndis_handle_set_msg+0x9c>)
 8002596:	e7f1      	b.n	800257c <rndis_handle_set_msg+0x3c>
			oid_packet_filter = *INFBUF;
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	3308      	adds	r3, #8
 800259c:	58d2      	ldr	r2, [r2, r3]
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <rndis_handle_set_msg+0xa0>)
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <rndis_handle_set_msg+0xa4>)
			if (oid_packet_filter)
 80025a4:	b112      	cbz	r2, 80025ac <rndis_handle_set_msg+0x6c>
				rndis_state = rndis_data_initialized;
 80025a6:	2202      	movs	r2, #2
				rndis_state = rndis_initialized;
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e7e9      	b.n	8002580 <rndis_handle_set_msg+0x40>
 80025ac:	2201      	movs	r2, #1
 80025ae:	e7fb      	b.n	80025a8 <rndis_handle_set_msg+0x68>
			c->Status = RNDIS_STATUS_FAILURE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	2101      	movs	r1, #1
 80025b4:	7353      	strb	r3, [r2, #13]
 80025b6:	7393      	strb	r3, [r2, #14]
 80025b8:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80025bc:	7311      	strb	r1, [r2, #12]
 80025be:	73d3      	strb	r3, [r2, #15]
			break;
 80025c0:	e7de      	b.n	8002580 <rndis_handle_set_msg+0x40>
 80025c2:	bf00      	nop
 80025c4:	20007ede 	.word	0x20007ede
 80025c8:	00010112 	.word	0x00010112
 80025cc:	0001010e 	.word	0x0001010e
 80025d0:	0001010f 	.word	0x0001010f
 80025d4:	08007fd0 	.word	0x08007fd0
 80025d8:	0001021b 	.word	0x0001021b
 80025dc:	01010103 	.word	0x01010103
 80025e0:	200001b4 	.word	0x200001b4
 80025e4:	20007f56 	.word	0x20007f56

080025e8 <USBD_CDC_EP0_RxReady>:
{
 80025e8:	b510      	push	{r4, lr}
  switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType)
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <USBD_CDC_EP0_RxReady+0x124>)
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	3b02      	subs	r3, #2
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d85b      	bhi.n	80026ac <USBD_CDC_EP0_RxReady+0xc4>
 80025f4:	e8df f003 	tbb	[pc, r3]
 80025f8:	5c585a04 	.word	0x5c585a04
 80025fc:	5a5f      	.short	0x5a5f
 80025fe:	78          	.byte	0x78
 80025ff:	00          	.byte	0x00
  				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8002600:	2102      	movs	r1, #2
 8002602:	7011      	strb	r1, [r2, #0]
 8002604:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8002608:	70d1      	strb	r1, [r2, #3]
  				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 800260a:	2134      	movs	r1, #52	; 0x34
  				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 800260c:	2300      	movs	r3, #0
  				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 800260e:	7111      	strb	r1, [r2, #4]
  				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 8002610:	2416      	movs	r4, #22
  				m->MajorVersion = RNDIS_MAJOR_VERSION;
 8002612:	2101      	movs	r1, #1
  				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8002614:	7053      	strb	r3, [r2, #1]
 8002616:	7093      	strb	r3, [r2, #2]
  				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 8002618:	7153      	strb	r3, [r2, #5]
 800261a:	7193      	strb	r3, [r2, #6]
 800261c:	71d3      	strb	r3, [r2, #7]
  				m->MajorVersion = RNDIS_MAJOR_VERSION;
 800261e:	7453      	strb	r3, [r2, #17]
 8002620:	7493      	strb	r3, [r2, #18]
 8002622:	74d3      	strb	r3, [r2, #19]
  				m->MinorVersion = RNDIS_MINOR_VERSION;
 8002624:	7513      	strb	r3, [r2, #20]
 8002626:	7553      	strb	r3, [r2, #21]
 8002628:	7593      	strb	r3, [r2, #22]
 800262a:	75d3      	strb	r3, [r2, #23]
  				m->Status = RNDIS_STATUS_SUCCESS;
 800262c:	7313      	strb	r3, [r2, #12]
 800262e:	7353      	strb	r3, [r2, #13]
 8002630:	7393      	strb	r3, [r2, #14]
 8002632:	73d3      	strb	r3, [r2, #15]
  				m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8002634:	7653      	strb	r3, [r2, #25]
 8002636:	7693      	strb	r3, [r2, #26]
 8002638:	76d3      	strb	r3, [r2, #27]
  				m->Medium = RNDIS_MEDIUM_802_3;
 800263a:	7713      	strb	r3, [r2, #28]
 800263c:	7753      	strb	r3, [r2, #29]
 800263e:	7793      	strb	r3, [r2, #30]
 8002640:	77d3      	strb	r3, [r2, #31]
  				m->MaxPacketsPerTransfer = 1;
 8002642:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8002646:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 800264a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  				m->MajorVersion = RNDIS_MAJOR_VERSION;
 800264e:	7411      	strb	r1, [r2, #16]
  				m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8002650:	7611      	strb	r1, [r2, #24]
  				m->MaxPacketsPerTransfer = 1;
 8002652:	f882 1020 	strb.w	r1, [r2, #32]
  				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 8002656:	f882 4024 	strb.w	r4, [r2, #36]	; 0x24
 800265a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 800265e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
  				m->PacketAlignmentFactor = 0;
 8002662:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8002666:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 800266a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
 800266e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
  				m->AfListOffset = 0;
 8002672:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
 8002676:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
 800267a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 800267e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  				m->AfListSize = 0;
 8002682:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 8002686:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
 800268a:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 800268e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
  				rndis_state = rndis_initialized;
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <USBD_CDC_EP0_RxReady+0x128>)
  				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 8002694:	2406      	movs	r4, #6
 8002696:	f882 4025 	strb.w	r4, [r2, #37]	; 0x25
  				rndis_state = rndis_initialized;
 800269a:	7019      	strb	r1, [r3, #0]
  				USBD_LL_Transmit(pdev,
 800269c:	2308      	movs	r3, #8
  			USBD_LL_Transmit(pdev,
 800269e:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <USBD_CDC_EP0_RxReady+0x12c>)
 80026a0:	2181      	movs	r1, #129	; 0x81
 80026a2:	f000 ff69 	bl	8003578 <USBD_LL_Transmit>
  			break;
 80026a6:	e001      	b.n	80026ac <USBD_CDC_EP0_RxReady+0xc4>
  			rndis_query(pdev);
 80026a8:	f7ff fe98 	bl	80023dc <rndis_query>
}
 80026ac:	2000      	movs	r0, #0
 80026ae:	bd10      	pop	{r4, pc}
  			rndis_handle_set_msg(pdev);
 80026b0:	f7ff ff46 	bl	8002540 <rndis_handle_set_msg>
  			break;
 80026b4:	e7fa      	b.n	80026ac <USBD_CDC_EP0_RxReady+0xc4>
  				rndis_state = rndis_uninitialized;
 80026b6:	4916      	ldr	r1, [pc, #88]	; (8002710 <USBD_CDC_EP0_RxReady+0x128>)
 80026b8:	2300      	movs	r3, #0
 80026ba:	700b      	strb	r3, [r1, #0]
  				m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 80026bc:	2106      	movs	r1, #6
 80026be:	7011      	strb	r1, [r2, #0]
 80026c0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80026c4:	70d1      	strb	r1, [r2, #3]
  				m->MessageLength = sizeof(rndis_reset_cmplt_t);
 80026c6:	2110      	movs	r1, #16
 80026c8:	7111      	strb	r1, [r2, #4]
  				m->AddressingReset = 1; /* Make it look like we did something */
 80026ca:	2101      	movs	r1, #1
  				m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 80026cc:	7053      	strb	r3, [r2, #1]
 80026ce:	7093      	strb	r3, [r2, #2]
  				m->MessageLength = sizeof(rndis_reset_cmplt_t);
 80026d0:	7153      	strb	r3, [r2, #5]
 80026d2:	7193      	strb	r3, [r2, #6]
 80026d4:	71d3      	strb	r3, [r2, #7]
  				m->Status = RNDIS_STATUS_SUCCESS;
 80026d6:	7213      	strb	r3, [r2, #8]
 80026d8:	7253      	strb	r3, [r2, #9]
 80026da:	7293      	strb	r3, [r2, #10]
 80026dc:	72d3      	strb	r3, [r2, #11]
  				m->AddressingReset = 1; /* Make it look like we did something */
 80026de:	7311      	strb	r1, [r2, #12]
 80026e0:	7353      	strb	r3, [r2, #13]
 80026e2:	7393      	strb	r3, [r2, #14]
 80026e4:	73d3      	strb	r3, [r2, #15]
 80026e6:	e7d9      	b.n	800269c <USBD_CDC_EP0_RxReady+0xb4>
  				m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 80026e8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 80026ec:	2100      	movs	r1, #0
 80026ee:	2308      	movs	r3, #8
 80026f0:	70d4      	strb	r4, [r2, #3]
  				m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 80026f2:	2410      	movs	r4, #16
  				m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 80026f4:	7013      	strb	r3, [r2, #0]
 80026f6:	7051      	strb	r1, [r2, #1]
 80026f8:	7091      	strb	r1, [r2, #2]
  				m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 80026fa:	7114      	strb	r4, [r2, #4]
 80026fc:	7151      	strb	r1, [r2, #5]
 80026fe:	7191      	strb	r1, [r2, #6]
 8002700:	71d1      	strb	r1, [r2, #7]
  				m->Status = RNDIS_STATUS_SUCCESS;
 8002702:	7311      	strb	r1, [r2, #12]
 8002704:	7351      	strb	r1, [r2, #13]
 8002706:	7391      	strb	r1, [r2, #14]
 8002708:	73d1      	strb	r1, [r2, #15]
 800270a:	e7c8      	b.n	800269e <USBD_CDC_EP0_RxReady+0xb6>
 800270c:	20007ede 	.word	0x20007ede
 8002710:	20007f56 	.word	0x20007f56
 8002714:	08007fd0 	.word	0x08007fd0

08002718 <rndis_can_send>:

bool rndis_can_send(void)
{
	return rndis_tx_size <= 0;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <rndis_can_send+0x10>)
 800271a:	6818      	ldr	r0, [r3, #0]
}
 800271c:	2800      	cmp	r0, #0
 800271e:	bfcc      	ite	gt
 8002720:	2000      	movgt	r0, #0
 8002722:	2001      	movle	r0, #1
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	200001c8 	.word	0x200001c8

0800272c <rndis_send>:

bool rndis_send(const void *data, int size)
{
	if (size <= 0 ||
 800272c:	1e4a      	subs	r2, r1, #1
 800272e:	f240 53e9 	movw	r3, #1513	; 0x5e9
 8002732:	429a      	cmp	r2, r3
{
 8002734:	b510      	push	{r4, lr}
	if (size <= 0 ||
 8002736:	d810      	bhi.n	800275a <rndis_send+0x2e>
		size > ETH_MAX_PACKET_SIZE ||
		rndis_tx_size > 0) return false;
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <rndis_send+0x34>)
		size > ETH_MAX_PACKET_SIZE ||
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	dc0c      	bgt.n	800275a <rndis_send+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i

	__disable_irq();
	rndis_first_tx = true;
 8002742:	4c08      	ldr	r4, [pc, #32]	; (8002764 <rndis_send+0x38>)
	rndis_tx_ptr = (uint8_t *)data;
	rndis_tx_size = size;
 8002744:	6011      	str	r1, [r2, #0]
	rndis_first_tx = true;
 8002746:	2301      	movs	r3, #1
 8002748:	7023      	strb	r3, [r4, #0]
	rndis_sended = 0;
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <rndis_send+0x3c>)
	rndis_tx_ptr = (uint8_t *)data;
 800274c:	4c07      	ldr	r4, [pc, #28]	; (800276c <rndis_send+0x40>)
	rndis_sended = 0;
 800274e:	2100      	movs	r1, #0
	rndis_tx_ptr = (uint8_t *)data;
 8002750:	6020      	str	r0, [r4, #0]
	rndis_sended = 0;
 8002752:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002754:	b662      	cpsie	i
	__enable_irq();

	return true;
 8002756:	4618      	mov	r0, r3
 8002758:	bd10      	pop	{r4, pc}
		rndis_tx_size > 0) return false;
 800275a:	2000      	movs	r0, #0
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	bf00      	nop
 8002760:	200001c8 	.word	0x200001c8
 8002764:	2000008b 	.word	0x2000008b
 8002768:	200001c0 	.word	0x200001c0
 800276c:	200001c4 	.word	0x200001c4

08002770 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8002770:	b119      	cbz	r1, 800277a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002772:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8002776:	2000      	movs	r0, #0
 8002778:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800277a:	2002      	movs	r0, #2
  }

  return ret;
}
 800277c:	4770      	bx	lr

0800277e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800277e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002780:	b180      	cbz	r0, 80027a4 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002782:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002786:	b113      	cbz	r3, 800278e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800278e:	b109      	cbz	r1, 8002794 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002790:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002794:	2301      	movs	r3, #1
 8002796:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800279a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800279c:	f000 fe4c 	bl	8003438 <USBD_LL_Init>
  
  return USBD_OK; 
 80027a0:	2000      	movs	r0, #0
 80027a2:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80027a4:	2002      	movs	r0, #2
}
 80027a6:	bd08      	pop	{r3, pc}

080027a8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80027a8:	b119      	cbz	r1, 80027b2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80027aa:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80027ae:	2000      	movs	r0, #0
 80027b0:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80027b2:	2002      	movs	r0, #2
  }
  
  return status;
}
 80027b4:	4770      	bx	lr

080027b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80027b6:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80027b8:	f000 fe74 	bl	80034a4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80027bc:	2000      	movs	r0, #0
 80027be:	bd08      	pop	{r3, pc}

080027c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80027c0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80027c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027c6:	b90b      	cbnz	r3, 80027cc <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80027c8:	2002      	movs	r0, #2
 80027ca:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4798      	blx	r3
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d1f9      	bne.n	80027c8 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80027d4:	bd08      	pop	{r3, pc}

080027d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80027d6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80027d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4798      	blx	r3
  return USBD_OK;
}
 80027e0:	2000      	movs	r0, #0
 80027e2:	bd08      	pop	{r3, pc}

080027e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80027e8:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80027ec:	4628      	mov	r0, r5
 80027ee:	f000 fa76 	bl	8002cde <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80027f2:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80027f4:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80027f8:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80027fc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002800:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002804:	f001 031f 	and.w	r3, r1, #31
 8002808:	2b01      	cmp	r3, #1
 800280a:	d00e      	beq.n	800282a <USBD_LL_SetupStage+0x46>
 800280c:	d307      	bcc.n	800281e <USBD_LL_SetupStage+0x3a>
 800280e:	2b02      	cmp	r3, #2
 8002810:	d010      	beq.n	8002834 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002812:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002816:	4620      	mov	r0, r4
 8002818:	f000 fe70 	bl	80034fc <USBD_LL_StallEP>
    break;
 800281c:	e003      	b.n	8002826 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800281e:	4629      	mov	r1, r5
 8002820:	4620      	mov	r0, r4
 8002822:	f000 f8e7 	bl	80029f4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002826:	2000      	movs	r0, #0
 8002828:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800282a:	4629      	mov	r1, r5
 800282c:	4620      	mov	r0, r4
 800282e:	f000 f9db 	bl	8002be8 <USBD_StdItfReq>
    break;
 8002832:	e7f8      	b.n	8002826 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002834:	4629      	mov	r1, r5
 8002836:	4620      	mov	r0, r4
 8002838:	f000 f9ee 	bl	8002c18 <USBD_StdEPReq>
    break;
 800283c:	e7f3      	b.n	8002826 <USBD_LL_SetupStage+0x42>

0800283e <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800283e:	b538      	push	{r3, r4, r5, lr}
 8002840:	4604      	mov	r4, r0
 8002842:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002844:	bb11      	cbnz	r1, 800288c <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002846:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800284a:	2b03      	cmp	r3, #3
 800284c:	d10f      	bne.n	800286e <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800284e:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002852:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002856:	4293      	cmp	r3, r2
 8002858:	d90b      	bls.n	8002872 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800285a:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800285c:	429a      	cmp	r2, r3
 800285e:	bf28      	it	cs
 8002860:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002862:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002866:	b292      	uxth	r2, r2
 8002868:	4629      	mov	r1, r5
 800286a:	f000 fa8c 	bl	8002d86 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800286e:	2000      	movs	r0, #0
 8002870:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002872:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	b123      	cbz	r3, 8002884 <USBD_LL_DataOutStage+0x46>
 800287a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800287e:	2a03      	cmp	r2, #3
 8002880:	d100      	bne.n	8002884 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002882:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fa86 	bl	8002d96 <USBD_CtlSendStatus>
 800288a:	e7f0      	b.n	800286e <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800288c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0eb      	beq.n	800286e <USBD_LL_DataOutStage+0x30>
 8002896:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800289a:	2a03      	cmp	r2, #3
 800289c:	d1e7      	bne.n	800286e <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800289e:	4798      	blx	r3
 80028a0:	e7e5      	b.n	800286e <USBD_LL_DataOutStage+0x30>

080028a2 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80028a2:	b570      	push	{r4, r5, r6, lr}
 80028a4:	4613      	mov	r3, r2
 80028a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80028a8:	460e      	mov	r6, r1
 80028aa:	2900      	cmp	r1, #0
 80028ac:	d13d      	bne.n	800292a <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80028ae:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80028b2:	2a02      	cmp	r2, #2
 80028b4:	d10f      	bne.n	80028d6 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80028b6:	69c5      	ldr	r5, [r0, #28]
 80028b8:	6a02      	ldr	r2, [r0, #32]
 80028ba:	4295      	cmp	r5, r2
 80028bc:	d914      	bls.n	80028e8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80028be:	1aaa      	subs	r2, r5, r2
 80028c0:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80028c2:	4619      	mov	r1, r3
 80028c4:	b292      	uxth	r2, r2
 80028c6:	f000 fa47 	bl	8002d58 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80028ca:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80028cc:	461a      	mov	r2, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	4620      	mov	r0, r4
 80028d2:	f000 fe5f 	bl	8003594 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80028d6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80028e4:	2000      	movs	r0, #0
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80028e8:	6983      	ldr	r3, [r0, #24]
 80028ea:	fbb3 f5f2 	udiv	r5, r3, r2
 80028ee:	fb02 3515 	mls	r5, r2, r5, r3
 80028f2:	b965      	cbnz	r5, 800290e <USBD_LL_DataInStage+0x6c>
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d80a      	bhi.n	800290e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80028f8:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d206      	bcs.n	800290e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002900:	462a      	mov	r2, r5
 8002902:	f000 fa29 	bl	8002d58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002906:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800290a:	462b      	mov	r3, r5
 800290c:	e7de      	b.n	80028cc <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800290e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	b12b      	cbz	r3, 8002922 <USBD_LL_DataInStage+0x80>
 8002916:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800291a:	2a03      	cmp	r2, #3
 800291c:	d101      	bne.n	8002922 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800291e:	4620      	mov	r0, r4
 8002920:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002922:	4620      	mov	r0, r4
 8002924:	f000 fa42 	bl	8002dac <USBD_CtlReceiveStatus>
 8002928:	e7d5      	b.n	80028d6 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800292a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0d7      	beq.n	80028e4 <USBD_LL_DataInStage+0x42>
 8002934:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002938:	2a03      	cmp	r2, #3
 800293a:	d1d3      	bne.n	80028e4 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800293c:	4798      	blx	r3
 800293e:	e7d1      	b.n	80028e4 <USBD_LL_DataInStage+0x42>

08002940 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002940:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002942:	2200      	movs	r2, #0
{
 8002944:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002946:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002948:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800294a:	2340      	movs	r3, #64	; 0x40
 800294c:	f000 fdb8 	bl	80034c0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002950:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002952:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002956:	2200      	movs	r2, #0
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	4620      	mov	r0, r4
 800295c:	f000 fdb0 	bl	80034c0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002960:	2301      	movs	r3, #1
 8002962:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002966:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800296a:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800296c:	b12b      	cbz	r3, 800297a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800296e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002972:	7921      	ldrb	r1, [r4, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4620      	mov	r0, r4
 8002978:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800297a:	2000      	movs	r0, #0
 800297c:	bd38      	pop	{r3, r4, r5, pc}

0800297e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800297e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002980:	2000      	movs	r0, #0
 8002982:	4770      	bx	lr

08002984 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002984:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002988:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800298c:	2304      	movs	r3, #4
 800298e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002992:	2000      	movs	r0, #0
 8002994:	4770      	bx	lr

08002996 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002996:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800299a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800299e:	2000      	movs	r0, #0
 80029a0:	4770      	bx	lr

080029a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80029a2:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80029a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029a8:	2a03      	cmp	r2, #3
 80029aa:	d104      	bne.n	80029b6 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80029ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	b103      	cbz	r3, 80029b6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80029b4:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80029b6:	2000      	movs	r0, #0
 80029b8:	bd08      	pop	{r3, pc}

080029ba <USBD_LL_IsoINIncomplete>:
 80029ba:	2000      	movs	r0, #0
 80029bc:	4770      	bx	lr

080029be <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80029be:	2000      	movs	r0, #0
 80029c0:	4770      	bx	lr

080029c2 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80029c2:	2000      	movs	r0, #0
 80029c4:	4770      	bx	lr

080029c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80029c6:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80029c8:	2201      	movs	r2, #1
 80029ca:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80029ce:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80029d2:	7901      	ldrb	r1, [r0, #4]
 80029d4:	6852      	ldr	r2, [r2, #4]
 80029d6:	4790      	blx	r2
   
  return USBD_OK;
}
 80029d8:	2000      	movs	r0, #0
 80029da:	bd08      	pop	{r3, pc}

080029dc <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80029dc:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80029de:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80029e0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80029e2:	f000 fd8b 	bl	80034fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80029e6:	4620      	mov	r0, r4
 80029e8:	2100      	movs	r1, #0
}
 80029ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80029ee:	f000 bd85 	b.w	80034fc <USBD_LL_StallEP>
	...

080029f4 <USBD_StdDevReq>:
{
 80029f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80029f6:	784b      	ldrb	r3, [r1, #1]
{
 80029f8:	4604      	mov	r4, r0
 80029fa:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	d879      	bhi.n	8002af4 <USBD_StdDevReq+0x100>
 8002a00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a04:	00e500c9 	.word	0x00e500c9
 8002a08:	00d90078 	.word	0x00d90078
 8002a0c:	006d0078 	.word	0x006d0078
 8002a10:	0078000a 	.word	0x0078000a
 8002a14:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002a18:	884b      	ldrh	r3, [r1, #2]
 8002a1a:	0a1a      	lsrs	r2, r3, #8
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	2a06      	cmp	r2, #6
 8002a20:	d868      	bhi.n	8002af4 <USBD_StdDevReq+0x100>
 8002a22:	e8df f002 	tbb	[pc, r2]
 8002a26:	1c04      	.short	0x1c04
 8002a28:	49676729 	.word	0x49676729
 8002a2c:	52          	.byte	0x52
 8002a2d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002a2e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a32:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002a34:	7c20      	ldrb	r0, [r4, #16]
 8002a36:	f10d 0106 	add.w	r1, sp, #6
 8002a3a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002a3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	d067      	beq.n	8002b14 <USBD_StdDevReq+0x120>
 8002a44:	88eb      	ldrh	r3, [r5, #6]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d064      	beq.n	8002b14 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf28      	it	cs
 8002a4e:	461a      	movcs	r2, r3
 8002a50:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002a54:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8002a56:	4620      	mov	r0, r4
 8002a58:	f000 f971 	bl	8002d3e <USBD_CtlSendData>
 8002a5c:	e05a      	b.n	8002b14 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002a5e:	7c02      	ldrb	r2, [r0, #16]
 8002a60:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a64:	b932      	cbnz	r2, 8002a74 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002a68:	f10d 0006 	add.w	r0, sp, #6
 8002a6c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002a6e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002a70:	7043      	strb	r3, [r0, #1]
 8002a72:	e7e3      	b.n	8002a3c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	e7f7      	b.n	8002a68 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d83a      	bhi.n	8002af4 <USBD_StdDevReq+0x100>
 8002a7e:	e8df f003 	tbb	[pc, r3]
 8002a82:	0703      	.short	0x0703
 8002a84:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002a88:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	e7d1      	b.n	8002a34 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002a90:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	e7cd      	b.n	8002a34 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002a98:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	e7c9      	b.n	8002a34 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002aa0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	e7c5      	b.n	8002a34 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002aa8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	e7c1      	b.n	8002a34 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002ab0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	e7bd      	b.n	8002a34 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002ab8:	7c03      	ldrb	r3, [r0, #16]
 8002aba:	b9db      	cbnz	r3, 8002af4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002abc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ac0:	f10d 0006 	add.w	r0, sp, #6
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	4798      	blx	r3
 8002ac8:	e7b8      	b.n	8002a3c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002aca:	7c03      	ldrb	r3, [r0, #16]
 8002acc:	b993      	cbnz	r3, 8002af4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002ace:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ad2:	f10d 0006 	add.w	r0, sp, #6
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002ada:	2307      	movs	r3, #7
 8002adc:	e7c8      	b.n	8002a70 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002ade:	888b      	ldrh	r3, [r1, #4]
 8002ae0:	b943      	cbnz	r3, 8002af4 <USBD_StdDevReq+0x100>
 8002ae2:	88cb      	ldrh	r3, [r1, #6]
 8002ae4:	b933      	cbnz	r3, 8002af4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002ae6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002aea:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002aec:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002aee:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002af2:	d103      	bne.n	8002afc <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ff71 	bl	80029dc <USBD_CtlError.constprop.0>
    break;
 8002afa:	e00b      	b.n	8002b14 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002afc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002b00:	4629      	mov	r1, r5
 8002b02:	f000 fd2b 	bl	800355c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002b06:	4620      	mov	r0, r4
 8002b08:	f000 f945 	bl	8002d96 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002b0c:	b12d      	cbz	r5, 8002b1a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002b0e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002b10:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002b14:	2000      	movs	r0, #0
 8002b16:	b003      	add	sp, #12
 8002b18:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e7f8      	b.n	8002b10 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002b1e:	7889      	ldrb	r1, [r1, #2]
 8002b20:	4d30      	ldr	r5, [pc, #192]	; (8002be4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002b22:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002b24:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002b26:	d8e5      	bhi.n	8002af4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002b28:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d00c      	beq.n	8002b4a <USBD_StdDevReq+0x156>
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d1df      	bne.n	8002af4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002b34:	b9b1      	cbnz	r1, 8002b64 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002b36:	2302      	movs	r3, #2
 8002b38:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002b3c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002b3e:	f7ff fe4a 	bl	80027d6 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f927 	bl	8002d96 <USBD_CtlSendStatus>
 8002b48:	e7e4      	b.n	8002b14 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002b4a:	2900      	cmp	r1, #0
 8002b4c:	d0f9      	beq.n	8002b42 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002b4e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b50:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002b52:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002b54:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fe31 	bl	80027c0 <USBD_SetClassConfig>
 8002b5e:	2802      	cmp	r0, #2
 8002b60:	d1ef      	bne.n	8002b42 <USBD_StdDevReq+0x14e>
 8002b62:	e7c7      	b.n	8002af4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002b64:	6841      	ldr	r1, [r0, #4]
 8002b66:	2901      	cmp	r1, #1
 8002b68:	d0eb      	beq.n	8002b42 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002b6a:	b2c9      	uxtb	r1, r1
 8002b6c:	f7ff fe33 	bl	80027d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002b70:	7829      	ldrb	r1, [r5, #0]
 8002b72:	6061      	str	r1, [r4, #4]
 8002b74:	e7f0      	b.n	8002b58 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002b76:	88ca      	ldrh	r2, [r1, #6]
 8002b78:	2a01      	cmp	r2, #1
 8002b7a:	d1bb      	bne.n	8002af4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002b7c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d003      	beq.n	8002b8c <USBD_StdDevReq+0x198>
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d1b5      	bne.n	8002af4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002b88:	1d01      	adds	r1, r0, #4
 8002b8a:	e764      	b.n	8002a56 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f841 3f08 	str.w	r3, [r1, #8]!
 8002b94:	e75f      	b.n	8002a56 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002b96:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b9a:	3b02      	subs	r3, #2
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d8a9      	bhi.n	8002af4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002ba4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002ba8:	b10b      	cbz	r3, 8002bae <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002baa:	2303      	movs	r3, #3
 8002bac:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f104 010c 	add.w	r1, r4, #12
 8002bb4:	e74f      	b.n	8002a56 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002bb6:	884b      	ldrh	r3, [r1, #2]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d1ab      	bne.n	8002b14 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002bbc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002bc0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4798      	blx	r3
 8002bcc:	e7b9      	b.n	8002b42 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002bce:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002bd2:	3b02      	subs	r3, #2
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d88d      	bhi.n	8002af4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002bd8:	884b      	ldrh	r3, [r1, #2]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d19a      	bne.n	8002b14 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002bde:	2300      	movs	r3, #0
 8002be0:	e7ec      	b.n	8002bbc <USBD_StdDevReq+0x1c8>
 8002be2:	bf00      	nop
 8002be4:	200001e0 	.word	0x200001e0

08002be8 <USBD_StdItfReq>:
{
 8002be8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002bea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002bee:	2b03      	cmp	r3, #3
{
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002bf4:	d10d      	bne.n	8002c12 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002bf6:	790b      	ldrb	r3, [r1, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d80a      	bhi.n	8002c12 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002bfc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002c04:	88eb      	ldrh	r3, [r5, #6]
 8002c06:	b913      	cbnz	r3, 8002c0e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 f8c4 	bl	8002d96 <USBD_CtlSendStatus>
}
 8002c0e:	2000      	movs	r0, #0
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002c12:	f7ff fee3 	bl	80029dc <USBD_CtlError.constprop.0>
    break;
 8002c16:	e7fa      	b.n	8002c0e <USBD_StdItfReq+0x26>

08002c18 <USBD_StdEPReq>:
{
 8002c18:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002c1a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002c1c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002c1e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002c22:	2a20      	cmp	r2, #32
{
 8002c24:	4604      	mov	r4, r0
 8002c26:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002c28:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002c2a:	d105      	bne.n	8002c38 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002c2c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4798      	blx	r3
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002c38:	784a      	ldrb	r2, [r1, #1]
 8002c3a:	2a01      	cmp	r2, #1
 8002c3c:	d01c      	beq.n	8002c78 <USBD_StdEPReq+0x60>
 8002c3e:	d32a      	bcc.n	8002c96 <USBD_StdEPReq+0x7e>
 8002c40:	2a03      	cmp	r2, #3
 8002c42:	d1f7      	bne.n	8002c34 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002c44:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002c48:	2a02      	cmp	r2, #2
 8002c4a:	d040      	beq.n	8002cce <USBD_StdEPReq+0xb6>
 8002c4c:	2a03      	cmp	r2, #3
 8002c4e:	d002      	beq.n	8002c56 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002c50:	f7ff fec4 	bl	80029dc <USBD_CtlError.constprop.0>
      break;
 8002c54:	e7ee      	b.n	8002c34 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002c56:	884a      	ldrh	r2, [r1, #2]
 8002c58:	b922      	cbnz	r2, 8002c64 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002c5a:	065e      	lsls	r6, r3, #25
 8002c5c:	d002      	beq.n	8002c64 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f000 fc4c 	bl	80034fc <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002c64:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002c68:	4629      	mov	r1, r5
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002c70:	4620      	mov	r0, r4
 8002c72:	f000 f890 	bl	8002d96 <USBD_CtlSendStatus>
 8002c76:	e7dd      	b.n	8002c34 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002c78:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002c7c:	2a02      	cmp	r2, #2
 8002c7e:	d026      	beq.n	8002cce <USBD_StdEPReq+0xb6>
 8002c80:	2a03      	cmp	r2, #3
 8002c82:	d1e5      	bne.n	8002c50 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002c84:	884a      	ldrh	r2, [r1, #2]
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d1d4      	bne.n	8002c34 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002c8a:	0659      	lsls	r1, r3, #25
 8002c8c:	d0f0      	beq.n	8002c70 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f000 fc42 	bl	8003518 <USBD_LL_ClearStallEP>
 8002c94:	e7e6      	b.n	8002c64 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002c96:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002c9a:	2a02      	cmp	r2, #2
 8002c9c:	d017      	beq.n	8002cce <USBD_StdEPReq+0xb6>
 8002c9e:	2a03      	cmp	r2, #3
 8002ca0:	d1d6      	bne.n	8002c50 <USBD_StdEPReq+0x38>
 8002ca2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002ca6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002caa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002cae:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002cb0:	bf14      	ite	ne
 8002cb2:	3514      	addne	r5, #20
 8002cb4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002cb8:	f000 fc3c 	bl	8003534 <USBD_LL_IsStallEP>
 8002cbc:	b168      	cbz	r0, 8002cda <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f000 f839 	bl	8002d3e <USBD_CtlSendData>
      break;
 8002ccc:	e7b2      	b.n	8002c34 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002cce:	065a      	lsls	r2, r3, #25
 8002cd0:	d0b0      	beq.n	8002c34 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f000 fc12 	bl	80034fc <USBD_LL_StallEP>
 8002cd8:	e7ac      	b.n	8002c34 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002cda:	6028      	str	r0, [r5, #0]
 8002cdc:	e7f1      	b.n	8002cc2 <USBD_StdEPReq+0xaa>

08002cde <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002cde:	780b      	ldrb	r3, [r1, #0]
 8002ce0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002ce2:	784b      	ldrb	r3, [r1, #1]
 8002ce4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002ce6:	78ca      	ldrb	r2, [r1, #3]
 8002ce8:	788b      	ldrb	r3, [r1, #2]
 8002cea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002cee:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002cf0:	794a      	ldrb	r2, [r1, #5]
 8002cf2:	790b      	ldrb	r3, [r1, #4]
 8002cf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002cf8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002cfa:	79ca      	ldrb	r2, [r1, #7]
 8002cfc:	798b      	ldrb	r3, [r1, #6]
 8002cfe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d02:	80c3      	strh	r3, [r0, #6]
 8002d04:	4770      	bx	lr

08002d06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002d06:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002d08:	b188      	cbz	r0, 8002d2e <USBD_GetString+0x28>
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2c00      	cmp	r4, #0
 8002d16:	d1f9      	bne.n	8002d0c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002d1e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002d20:	2303      	movs	r3, #3
 8002d22:	704b      	strb	r3, [r1, #1]
 8002d24:	3801      	subs	r0, #1
 8002d26:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002d28:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002d2c:	b905      	cbnz	r5, 8002d30 <USBD_GetString+0x2a>
 8002d2e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002d36:	3302      	adds	r3, #2
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	548c      	strb	r4, [r1, r2]
 8002d3c:	e7f4      	b.n	8002d28 <USBD_GetString+0x22>

08002d3e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002d42:	2202      	movs	r2, #2
 8002d44:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002d48:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002d4a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002d4c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f000 fc12 	bl	8003578 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002d54:	2000      	movs	r0, #0
 8002d56:	bd10      	pop	{r4, pc}

08002d58 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002d58:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f000 fc0a 	bl	8003578 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002d64:	2000      	movs	r0, #0
 8002d66:	bd08      	pop	{r3, pc}

08002d68 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002d72:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002d76:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002d78:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f000 fc09 	bl	8003594 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002d82:	2000      	movs	r0, #0
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002d86:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002d88:	4613      	mov	r3, r2
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f000 fc01 	bl	8003594 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002d92:	2000      	movs	r0, #0
 8002d94:	bd08      	pop	{r3, pc}

08002d96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002d96:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002d98:	2304      	movs	r3, #4
 8002d9a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002d9e:	2300      	movs	r3, #0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	f000 fbe8 	bl	8003578 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002da8:	2000      	movs	r0, #0
 8002daa:	bd08      	pop	{r3, pc}

08002dac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002dac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002dae:	2305      	movs	r3, #5
 8002db0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002db4:	2300      	movs	r3, #0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	f000 fbeb 	bl	8003594 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	bd08      	pop	{r3, pc}
	...

08002dc4 <netif_init_cb>:


err_t netif_init_cb(struct netif *netif)
{
    LWIP_ASSERT("netif != NULL", (netif != NULL));
    netif->mtu = RNDIS_MTU;
 8002dc4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002dc8:	8402      	strh	r2, [r0, #32]
{
 8002dca:	4603      	mov	r3, r0
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP | NETIF_FLAG_UP;
 8002dcc:	2233      	movs	r2, #51	; 0x33
 8002dce:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    netif->state = NULL;
    netif->name[0] = 'E';
 8002dd2:	2245      	movs	r2, #69	; 0x45
 8002dd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    netif->name[1] = 'X';
 8002dd8:	2258      	movs	r2, #88	; 0x58
 8002dda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    netif->linkoutput = linkoutput_fn;
 8002dde:	4a03      	ldr	r2, [pc, #12]	; (8002dec <netif_init_cb+0x28>)
 8002de0:	619a      	str	r2, [r3, #24]
    netif->state = NULL;
 8002de2:	2000      	movs	r0, #0
    netif->output = output_fn;
 8002de4:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <netif_init_cb+0x2c>)
    netif->state = NULL;
 8002de6:	61d8      	str	r0, [r3, #28]
    netif->output = output_fn;
 8002de8:	615a      	str	r2, [r3, #20]
    return ERR_OK;
}
 8002dea:	4770      	bx	lr
 8002dec:	08002f51 	.word	0x08002f51
 8002df0:	08002e15 	.word	0x08002e15

08002df4 <tcp_timer_proc>:
    tcp_tmr();
 8002df4:	f002 bd14 	b.w	8005820 <tcp_tmr>

08002df8 <on_packet>:
{
 8002df8:	b510      	push	{r4, lr}
    memcpy(received, data, size);
 8002dfa:	460a      	mov	r2, r1
{
 8002dfc:	460c      	mov	r4, r1
    memcpy(received, data, size);
 8002dfe:	4601      	mov	r1, r0
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <on_packet+0x14>)
 8002e02:	f005 f8c6 	bl	8007f92 <memcpy>
    recvSize = size;
 8002e06:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <on_packet+0x18>)
 8002e08:	601c      	str	r4, [r3, #0]
 8002e0a:	bd10      	pop	{r4, pc}
 8002e0c:	200007d8 	.word	0x200007d8
 8002e10:	20000dc4 	.word	0x20000dc4

08002e14 <output_fn>:
    return etharp_output(netif, p, ipaddr);
 8002e14:	f004 bf24 	b.w	8007c60 <etharp_output>

08002e18 <dns_query_proc>:

    stmr_add(&tcp_timer);
}

bool dns_query_proc(const char *name, ip_addr_t *addr)
{
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	460c      	mov	r4, r1
    if (strcmp(name, "run.stm") == 0 || strcmp(name, "www.run.stm") == 0)
 8002e1c:	4908      	ldr	r1, [pc, #32]	; (8002e40 <dns_query_proc+0x28>)
{
 8002e1e:	4605      	mov	r5, r0
    if (strcmp(name, "run.stm") == 0 || strcmp(name, "www.run.stm") == 0)
 8002e20:	f7fd f9da 	bl	80001d8 <strcmp>
 8002e24:	b120      	cbz	r0, 8002e30 <dns_query_proc+0x18>
 8002e26:	4907      	ldr	r1, [pc, #28]	; (8002e44 <dns_query_proc+0x2c>)
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f7fd f9d5 	bl	80001d8 <strcmp>
 8002e2e:	b920      	cbnz	r0, 8002e3a <dns_query_proc+0x22>
    {
        addr->addr = *(uint32_t *)ipaddr;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <dns_query_proc+0x30>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6023      	str	r3, [r4, #0]
        return true;
 8002e36:	2001      	movs	r0, #1
 8002e38:	bd38      	pop	{r3, r4, r5, pc}
    }
    return false;
 8002e3a:	2000      	movs	r0, #0
}
 8002e3c:	bd38      	pop	{r3, r4, r5, pc}
 8002e3e:	bf00      	nop
 8002e40:	08008050 	.word	0x08008050
 8002e44:	0800804c 	.word	0x0800804c
 8002e48:	200000e0 	.word	0x200000e0

08002e4c <usb_polling>:
{
 8002e4c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4e:	b672      	cpsid	i
    if (recvSize == 0)
 8002e50:	4d0f      	ldr	r5, [pc, #60]	; (8002e90 <usb_polling+0x44>)
 8002e52:	6829      	ldr	r1, [r5, #0]
 8002e54:	b909      	cbnz	r1, 8002e5a <usb_polling+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e56:	b662      	cpsie	i
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
    frame = pbuf_alloc(PBUF_RAW, recvSize, PBUF_POOL);
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	b289      	uxth	r1, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f001 fffa 	bl	8004e58 <pbuf_alloc>
    if (frame == NULL)
 8002e64:	4604      	mov	r4, r0
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d0f5      	beq.n	8002e56 <usb_polling+0xa>
    memcpy(frame->payload, received, recvSize);
 8002e6a:	682e      	ldr	r6, [r5, #0]
 8002e6c:	4909      	ldr	r1, [pc, #36]	; (8002e94 <usb_polling+0x48>)
 8002e6e:	6840      	ldr	r0, [r0, #4]
 8002e70:	4632      	mov	r2, r6
 8002e72:	f005 f88e 	bl	8007f92 <memcpy>
    recvSize = 0;
 8002e76:	2300      	movs	r3, #0
    frame->len = recvSize;
 8002e78:	8166      	strh	r6, [r4, #10]
    recvSize = 0;
 8002e7a:	602b      	str	r3, [r5, #0]
 8002e7c:	b662      	cpsie	i
    ethernet_input(frame, &netif_data);
 8002e7e:	4906      	ldr	r1, [pc, #24]	; (8002e98 <usb_polling+0x4c>)
 8002e80:	4620      	mov	r0, r4
 8002e82:	f004 ff6d 	bl	8007d60 <ethernet_input>
    pbuf_free(frame);
 8002e86:	4620      	mov	r0, r4
}
 8002e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pbuf_free(frame);
 8002e8c:	f001 bfbd 	b.w	8004e0a <pbuf_free>
 8002e90:	20000dc4 	.word	0x20000dc4
 8002e94:	200007d8 	.word	0x200007d8
 8002e98:	20007f78 	.word	0x20007f78

08002e9c <SysTick_Handler>:

    }
}

void SysTick_Handler(void)
{
 8002e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e9e:	f7fd fbc3 	bl	8000628 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002ea2:	f7fd fc5c 	bl	800075e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  usAddition += 1000;
 8002ea6:	4905      	ldr	r1, [pc, #20]	; (8002ebc <SysTick_Handler+0x20>)
 8002ea8:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002eac:	f512 727a 	adds.w	r2, r2, #1000	; 0x3e8
 8002eb0:	f143 0300 	adc.w	r3, r3, #0
 8002eb4:	e9c1 2300 	strd	r2, r3, [r1]
 8002eb8:	bd08      	pop	{r3, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000dd8 	.word	0x20000dd8

08002ec0 <utime>:
  /* USER CODE END SysTick_IRQn 1 */
}

int64_t utime(void)
{
 8002ec0:	b538      	push	{r3, r4, r5, lr}
    uint32_t ctrl;
    static int64_t res;
    uint32_t ticks;

    ctrl = SysTick->CTRL;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <utime+0x3c>)
 8002ec4:	681a      	ldr	r2, [r3, #0]

read:
    ticks = SysTick->VAL;
    res = usAddition;
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <utime+0x40>)
 8002ec8:	e9d2 0100 	ldrd	r0, r1, [r2]
    ticks = SysTick->VAL;
 8002ecc:	689c      	ldr	r4, [r3, #8]
    ctrl = SysTick->CTRL;
 8002ece:	681a      	ldr	r2, [r3, #0]
    if (ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002ed0:	03d2      	lsls	r2, r2, #15
 8002ed2:	d4fb      	bmi.n	8002ecc <utime+0xc>
 8002ed4:	4d0b      	ldr	r5, [pc, #44]	; (8002f04 <utime+0x44>)
 8002ed6:	e9c5 0100 	strd	r0, r1, [r5]
        goto read;

    #define ticksPerUs (HAL_RCC_GetHCLKFreq()/1000000)
    res += 1000 - ticks / ticksPerUs;
 8002eda:	f7fe fbb9 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <utime+0x48>)
 8002ee0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ee4:	fbb4 f4f0 	udiv	r4, r4, r0
 8002ee8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002eec:	f5c4 747a 	rsb	r4, r4, #1000	; 0x3e8
 8002ef0:	1900      	adds	r0, r0, r4
 8002ef2:	f141 0100 	adc.w	r1, r1, #0
 8002ef6:	e9c5 0100 	strd	r0, r1, [r5]
    #undef usecPerTick

    return res;
}
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	e000e010 	.word	0xe000e010
 8002f00:	20000dd8 	.word	0x20000dd8
 8002f04:	20000dc8 	.word	0x20000dc8
 8002f08:	000f4240 	.word	0x000f4240

08002f0c <mtime>:
    if (m != NULL) *m = time.Minutes;
    if (s != NULL) *s = time.Seconds;
}

int64_t mtime(void)
{
 8002f0c:	b508      	push	{r3, lr}
    return utime() / 1000;
 8002f0e:	f7ff ffd7 	bl	8002ec0 <utime>
 8002f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f16:	2300      	movs	r3, #0
 8002f18:	f7fd f970 	bl	80001fc <__aeabi_ldivmod>
}
 8002f1c:	bd08      	pop	{r3, pc}

08002f1e <sys_now>:
{
 8002f1e:	b508      	push	{r3, lr}
    return (uint32_t)mtime();
 8002f20:	f7ff fff4 	bl	8002f0c <mtime>
}
 8002f24:	bd08      	pop	{r3, pc}

08002f26 <usleep>:

void usleep(int us)
{
 8002f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f28:	4604      	mov	r4, r0
    uint64_t t = utime();
 8002f2a:	f7ff ffc9 	bl	8002ec0 <utime>
    while (true)
    {
        uint64_t t1 = utime();
        if (t1 - t >= us) break;
 8002f2e:	17e5      	asrs	r5, r4, #31
    uint64_t t = utime();
 8002f30:	4606      	mov	r6, r0
 8002f32:	460f      	mov	r7, r1
        uint64_t t1 = utime();
 8002f34:	f7ff ffc4 	bl	8002ec0 <utime>
        if (t1 - t >= us) break;
 8002f38:	1b82      	subs	r2, r0, r6
 8002f3a:	eb61 0307 	sbc.w	r3, r1, r7
 8002f3e:	42ab      	cmp	r3, r5
 8002f40:	bf08      	it	eq
 8002f42:	42a2      	cmpeq	r2, r4
 8002f44:	d203      	bcs.n	8002f4e <usleep+0x28>
        if (t1 < t) break; /* overflow */
 8002f46:	42b9      	cmp	r1, r7
 8002f48:	bf08      	it	eq
 8002f4a:	42b0      	cmpeq	r0, r6
 8002f4c:	d2f2      	bcs.n	8002f34 <usleep+0xe>
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f50 <linkoutput_fn>:
{
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	460c      	mov	r4, r1
 8002f54:	25c8      	movs	r5, #200	; 0xc8
        if (rndis_can_send()) break;
 8002f56:	f7ff fbdf 	bl	8002718 <rndis_can_send>
 8002f5a:	b188      	cbz	r0, 8002f80 <linkoutput_fn+0x30>
        memcpy(data + size, (char *)q->payload, q->len);
 8002f5c:	4f15      	ldr	r7, [pc, #84]	; (8002fb4 <linkoutput_fn+0x64>)
{
 8002f5e:	2500      	movs	r5, #0
        if (size + q->len > RNDIS_MTU + 14)
 8002f60:	f240 56ea 	movw	r6, #1514	; 0x5ea
    for(q = p; q != NULL; q = q->next)
 8002f64:	b99c      	cbnz	r4, 8002f8e <linkoutput_fn+0x3e>
    if (!rndis_can_send())
 8002f66:	f7ff fbd7 	bl	8002718 <rndis_can_send>
 8002f6a:	b1f8      	cbz	r0, 8002fac <linkoutput_fn+0x5c>
    rndis_send(data, size);
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <linkoutput_fn+0x64>)
 8002f70:	f7ff fbdc 	bl	800272c <rndis_send>
    outputs++;
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <linkoutput_fn+0x68>)
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]
    return ERR_OK;
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        msleep(1);
 8002f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f84:	f7ff ffcf 	bl	8002f26 <usleep>
    for (i = 0; i < 200; i++)
 8002f88:	3d01      	subs	r5, #1
 8002f8a:	d1e4      	bne.n	8002f56 <linkoutput_fn+0x6>
 8002f8c:	e7e6      	b.n	8002f5c <linkoutput_fn+0xc>
        if (size + q->len > RNDIS_MTU + 14)
 8002f8e:	8962      	ldrh	r2, [r4, #10]
 8002f90:	1953      	adds	r3, r2, r5
 8002f92:	42b3      	cmp	r3, r6
 8002f94:	dc07      	bgt.n	8002fa6 <linkoutput_fn+0x56>
        memcpy(data + size, (char *)q->payload, q->len);
 8002f96:	6861      	ldr	r1, [r4, #4]
 8002f98:	1978      	adds	r0, r7, r5
 8002f9a:	f004 fffa 	bl	8007f92 <memcpy>
        size += q->len;
 8002f9e:	8963      	ldrh	r3, [r4, #10]
    for(q = p; q != NULL; q = q->next)
 8002fa0:	6824      	ldr	r4, [r4, #0]
        size += q->len;
 8002fa2:	441d      	add	r5, r3
 8002fa4:	e7de      	b.n	8002f64 <linkoutput_fn+0x14>
            return ERR_ARG;
 8002fa6:	f06f 000d 	mvn.w	r0, #13
 8002faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ERR_USE;
 8002fac:	f06f 0007 	mvn.w	r0, #7
}
 8002fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200001e1 	.word	0x200001e1
 8002fb8:	200007d4 	.word	0x200007d4

08002fbc <stmr>:
    }
}

void stmr(void)
{
 8002fbc:	b570      	push	{r4, r5, r6, lr}
    stmr_t *tmr;
    uint32_t time;
    time = utime();
 8002fbe:	f7ff ff7f 	bl	8002ec0 <utime>
    tmr = stmrs;
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <stmr+0x34>)
 8002fc4:	681c      	ldr	r4, [r3, #0]
    time = utime();
 8002fc6:	4605      	mov	r5, r0
    while (tmr != NULL)
 8002fc8:	b904      	cbnz	r4, 8002fcc <stmr+0x10>
        if (elapsed < t->period)
            continue;
        t->proc(t);
        t->event = utime();
    }
}
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
        if ((t->flags & STMR_ACTIVE) == 0)
 8002fcc:	68a3      	ldr	r3, [r4, #8]
        tmr = tmr->next;
 8002fce:	6966      	ldr	r6, [r4, #20]
        if ((t->flags & STMR_ACTIVE) == 0)
 8002fd0:	07db      	lsls	r3, r3, #31
 8002fd2:	d50a      	bpl.n	8002fea <stmr+0x2e>
        elapsed -= t->event;
 8002fd4:	6863      	ldr	r3, [r4, #4]
        if (elapsed < t->period)
 8002fd6:	6822      	ldr	r2, [r4, #0]
        elapsed -= t->event;
 8002fd8:	1aeb      	subs	r3, r5, r3
        if (elapsed < t->period)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d305      	bcc.n	8002fea <stmr+0x2e>
        t->proc(t);
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4798      	blx	r3
        t->event = utime();
 8002fe4:	f7ff ff6c 	bl	8002ec0 <utime>
 8002fe8:	6060      	str	r0, [r4, #4]
{
 8002fea:	4634      	mov	r4, r6
 8002fec:	e7ec      	b.n	8002fc8 <stmr+0xc>
 8002fee:	bf00      	nop
 8002ff0:	20000dd0 	.word	0x20000dd0

08002ff4 <stmr_add>:
    stmrs = tmr;
}

void stmr_add(stmr_t *tmr)
{
    tmr->next = stmrs;
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <stmr_add+0xc>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	6142      	str	r2, [r0, #20]
    stmrs = tmr;
 8002ffa:	6018      	str	r0, [r3, #0]
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000dd0 	.word	0x20000dd0

08003004 <init_lwip>:
{
 8003004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lwip_init();
 8003006:	f000 fdbf 	bl	8003b88 <lwip_init>
    netif->hwaddr_len = 6;
 800300a:	480f      	ldr	r0, [pc, #60]	; (8003048 <init_lwip+0x44>)
    netif = netif_add(netif, PADDR(ipaddr), PADDR(netmask), PADDR(gateway), NULL, netif_init_cb, ip_input);
 800300c:	490f      	ldr	r1, [pc, #60]	; (800304c <init_lwip+0x48>)
    netif->hwaddr_len = 6;
 800300e:	2306      	movs	r3, #6
 8003010:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    memcpy(netif->hwaddr, hwaddr, 6);
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <init_lwip+0x4c>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	889b      	ldrh	r3, [r3, #4]
 800301a:	f8a0 3027 	strh.w	r3, [r0, #39]	; 0x27
    netif = netif_add(netif, PADDR(ipaddr), PADDR(netmask), PADDR(gateway), NULL, netif_init_cb, ip_input);
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <init_lwip+0x50>)
    memcpy(netif->hwaddr, hwaddr, 6);
 8003020:	f8c0 2023 	str.w	r2, [r0, #35]	; 0x23
    netif = netif_add(netif, PADDR(ipaddr), PADDR(netmask), PADDR(gateway), NULL, netif_init_cb, ip_input);
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <init_lwip+0x54>)
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <init_lwip+0x58>)
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <init_lwip+0x5c>)
 8003032:	f001 fe69 	bl	8004d08 <netif_add>
    netif_set_default(netif);
 8003036:	f001 fe8d 	bl	8004d54 <netif_set_default>
    stmr_add(&tcp_timer);
 800303a:	480a      	ldr	r0, [pc, #40]	; (8003064 <init_lwip+0x60>)
}
 800303c:	b005      	add	sp, #20
 800303e:	f85d eb04 	ldr.w	lr, [sp], #4
    stmr_add(&tcp_timer);
 8003042:	f7ff bfd7 	b.w	8002ff4 <stmr_add>
 8003046:	bf00      	nop
 8003048:	20007f78 	.word	0x20007f78
 800304c:	200000e0 	.word	0x200000e0
 8003050:	08008058 	.word	0x08008058
 8003054:	08003f7d 	.word	0x08003f7d
 8003058:	08002dc5 	.word	0x08002dc5
 800305c:	200000e4 	.word	0x200000e4
 8003060:	200007cf 	.word	0x200007cf
 8003064:	200000e8 	.word	0x200000e8

08003068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003068:	b530      	push	{r4, r5, lr}
 800306a:	b09b      	sub	sp, #108	; 0x6c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <SystemClock_Config+0xb8>)
 800306e:	2100      	movs	r1, #0
 8003070:	9101      	str	r1, [sp, #4]
 8003072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003074:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <SystemClock_Config+0xbc>)
 8003086:	9102      	str	r1, [sp, #8]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003092:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003096:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003098:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800309e:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a4:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a6:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 80030a8:	22d8      	movs	r2, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030aa:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 216;
 80030ac:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80030ae:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030b2:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80030b4:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b6:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80030b8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ba:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030bc:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80030be:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80030c0:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c2:	f7fe f87b 	bl	80011bc <HAL_RCC_OscConfig>
 80030c6:	b100      	cbz	r0, 80030ca <SystemClock_Config+0x62>
 80030c8:	e7fe      	b.n	80030c8 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030ca:	230f      	movs	r3, #15
 80030cc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ce:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030d4:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030d6:	4621      	mov	r1, r4
 80030d8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030da:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030dc:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030de:	f7fe fa1d 	bl	800151c <HAL_RCC_ClockConfig>
 80030e2:	b100      	cbz	r0, 80030e6 <SystemClock_Config+0x7e>
 80030e4:	e7fe      	b.n	80030e4 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030e6:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ea:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030ec:	9408      	str	r4, [sp, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030ee:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f0:	f7fe fab4 	bl	800165c <HAL_RCCEx_PeriphCLKConfig>
 80030f4:	4604      	mov	r4, r0
 80030f6:	b100      	cbz	r0, 80030fa <SystemClock_Config+0x92>
 80030f8:	e7fe      	b.n	80030f8 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80030fa:	f7fe faa9 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 80030fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003102:	fbb0 f0f3 	udiv	r0, r0, r3
 8003106:	f7fd fb07 	bl	8000718 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800310a:	4628      	mov	r0, r5
 800310c:	f7fd fb1a 	bl	8000744 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003110:	4622      	mov	r2, r4
 8003112:	4621      	mov	r1, r4
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7fd fabe 	bl	8000698 <HAL_NVIC_SetPriority>
}
 800311c:	b01b      	add	sp, #108	; 0x6c
 800311e:	bd30      	pop	{r4, r5, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	40007000 	.word	0x40007000

08003128 <main>:
{
 8003128:	b507      	push	{r0, r1, r2, lr}
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800312a:	2400      	movs	r4, #0
  HAL_Init();
 800312c:	f7fd fa62 	bl	80005f4 <HAL_Init>
  SystemClock_Config();
 8003130:	f7ff ff9a 	bl	8003068 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <main+0x98>)
 8003136:	9400      	str	r4, [sp, #0]
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003146:	9200      	str	r2, [sp, #0]
 8003148:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800314a:	9401      	str	r4, [sp, #4]
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	9b01      	ldr	r3, [sp, #4]
  MX_USB_DEVICE_Init();
 800315e:	f000 f8b3 	bl	80032c8 <MX_USB_DEVICE_Init>
  hrtc.Instance = RTC;
 8003162:	4818      	ldr	r0, [pc, #96]	; (80031c4 <main+0x9c>)
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <main+0xa0>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003166:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003168:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 800316c:	237f      	movs	r3, #127	; 0x7f
 800316e:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003170:	23ff      	movs	r3, #255	; 0xff
 8003172:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003174:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003176:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003178:	f7fe fb42 	bl	8001800 <HAL_RTC_Init>
 800317c:	b100      	cbz	r0, 8003180 <main+0x58>
 800317e:	e7fe      	b.n	800317e <main+0x56>
  rndis_rxproc = on_packet;
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <main+0xa4>)
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <main+0xa8>)
 8003184:	601a      	str	r2, [r3, #0]
  init_lwip();
 8003186:	f7ff ff3d 	bl	8003004 <init_lwip>
	while (!netif_is_up(&netif_data)) ;
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <main+0xac>)
 800318c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003190:	07db      	lsls	r3, r3, #31
 8003192:	d400      	bmi.n	8003196 <main+0x6e>
 8003194:	e7fe      	b.n	8003194 <main+0x6c>
	while (dhserv_init(&dhcp_config) != ERR_OK) ;
 8003196:	4c10      	ldr	r4, [pc, #64]	; (80031d8 <main+0xb0>)
 8003198:	4620      	mov	r0, r4
 800319a:	f000 fbed 	bl	8003978 <dhserv_init>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d1fa      	bne.n	8003198 <main+0x70>
	while (dnserv_init(PADDR(ipaddr), 53, dns_query_proc) != ERR_OK) ;
 80031a2:	4d0e      	ldr	r5, [pc, #56]	; (80031dc <main+0xb4>)
 80031a4:	4c0e      	ldr	r4, [pc, #56]	; (80031e0 <main+0xb8>)
 80031a6:	462a      	mov	r2, r5
 80031a8:	2135      	movs	r1, #53	; 0x35
 80031aa:	4620      	mov	r0, r4
 80031ac:	f000 fcba 	bl	8003b24 <dnserv_init>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d1f8      	bne.n	80031a6 <main+0x7e>
  	  usb_polling();     /* usb device polling */
 80031b4:	f7ff fe4a 	bl	8002e4c <usb_polling>
  	  stmr();            /* call software timers */
 80031b8:	f7ff ff00 	bl	8002fbc <stmr>
 80031bc:	e7fa      	b.n	80031b4 <main+0x8c>
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	20007f58 	.word	0x20007f58
 80031c8:	40002800 	.word	0x40002800
 80031cc:	200001bc 	.word	0x200001bc
 80031d0:	08002df9 	.word	0x08002df9
 80031d4:	20007f78 	.word	0x20007f78
 80031d8:	2000008c 	.word	0x2000008c
 80031dc:	08002e19 	.word	0x08002e19
 80031e0:	200000e0 	.word	0x200000e0

080031e4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80031e4:	e7fe      	b.n	80031e4 <_Error_Handler>

080031e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f7fd fa43 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	4611      	mov	r1, r2
 80031f2:	f06f 000b 	mvn.w	r0, #11
 80031f6:	f7fd fa4f 	bl	8000698 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	4611      	mov	r1, r2
 80031fe:	f06f 000a 	mvn.w	r0, #10
 8003202:	f7fd fa49 	bl	8000698 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	4611      	mov	r1, r2
 800320a:	f06f 0009 	mvn.w	r0, #9
 800320e:	f7fd fa43 	bl	8000698 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	4611      	mov	r1, r2
 8003216:	f06f 0004 	mvn.w	r0, #4
 800321a:	f7fd fa3d 	bl	8000698 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	4611      	mov	r1, r2
 8003222:	f06f 0003 	mvn.w	r0, #3
 8003226:	f7fd fa37 	bl	8000698 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	4611      	mov	r1, r2
 800322e:	f06f 0001 	mvn.w	r0, #1
 8003232:	f7fd fa31 	bl	8000698 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	4611      	mov	r1, r2
 800323a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003242:	f7fd ba29 	b.w	8000698 <HAL_NVIC_SetPriority>
	...

08003248 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8003248:	6802      	ldr	r2, [r0, #0]
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RTC_MspInit+0x10>)
 800324c:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800324e:	bf02      	ittt	eq
 8003250:	4b02      	ldreq	r3, [pc, #8]	; (800325c <HAL_RTC_MspInit+0x14>)
 8003252:	2201      	moveq	r2, #1
 8003254:	601a      	streq	r2, [r3, #0]
 8003256:	4770      	bx	lr
 8003258:	40002800 	.word	0x40002800
 800325c:	42470e3c 	.word	0x42470e3c

08003260 <NMI_Handler>:
 8003260:	4770      	bx	lr

08003262 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003262:	e7fe      	b.n	8003262 <HardFault_Handler>

08003264 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003264:	e7fe      	b.n	8003264 <MemManage_Handler>

08003266 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003266:	e7fe      	b.n	8003266 <BusFault_Handler>

08003268 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003268:	e7fe      	b.n	8003268 <UsageFault_Handler>

0800326a <SVC_Handler>:
 800326a:	4770      	bx	lr

0800326c <DebugMon_Handler>:
 800326c:	4770      	bx	lr

0800326e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800326e:	4770      	bx	lr

08003270 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <OTG_FS_IRQHandler+0x8>)
 8003272:	f7fd bbd1 	b.w	8000a18 <HAL_PCD_IRQHandler>
 8003276:	bf00      	nop
 8003278:	200081cc 	.word	0x200081cc

0800327c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800327c:	490f      	ldr	r1, [pc, #60]	; (80032bc <SystemInit+0x40>)
 800327e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <SystemInit+0x44>)
 800328c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800328e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003296:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800329e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80032a4:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <SystemInit+0x48>)
 80032a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b6:	608b      	str	r3, [r1, #8]
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	24003010 	.word	0x24003010

080032c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80032c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &USR_desc, DEVICE_FS);
 80032ca:	4c09      	ldr	r4, [pc, #36]	; (80032f0 <MX_USB_DEVICE_Init+0x28>)
 80032cc:	4909      	ldr	r1, [pc, #36]	; (80032f4 <MX_USB_DEVICE_Init+0x2c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff fa54 	bl	800277e <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80032d6:	4908      	ldr	r1, [pc, #32]	; (80032f8 <MX_USB_DEVICE_Init+0x30>)
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fa65 	bl	80027a8 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80032de:	4620      	mov	r0, r4
 80032e0:	4906      	ldr	r1, [pc, #24]	; (80032fc <MX_USB_DEVICE_Init+0x34>)
 80032e2:	f7ff fa45 	bl	8002770 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80032e6:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80032ec:	f7ff ba63 	b.w	80027b6 <USBD_Start>
 80032f0:	20007fa8 	.word	0x20007fa8
 80032f4:	2000012c 	.word	0x2000012c
 80032f8:	20000008 	.word	0x20000008
 80032fc:	20000104 	.word	0x20000104

08003300 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
	  return (USBD_OK);


}
 8003300:	2000      	movs	r0, #0
 8003302:	4770      	bx	lr

08003304 <CDC_Control_FS>:
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
	  return (USBD_OK);

}
 8003304:	2000      	movs	r0, #0
 8003306:	4770      	bx	lr

08003308 <CDC_Receive_FS>:
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE END 6 */
	  return (USBD_OK);

}
 8003308:	2000      	movs	r0, #0
 800330a:	4770      	bx	lr

0800330c <CDC_Init_FS>:
 800330c:	2000      	movs	r0, #0
 800330e:	4770      	bx	lr

08003310 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003310:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003318:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 800331a:	d12e      	bne.n	800337a <HAL_PCD_MspInit+0x6a>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800331c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003320:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003326:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800332e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003330:	4813      	ldr	r0, [pc, #76]	; (8003380 <HAL_PCD_MspInit+0x70>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003332:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	f7fd fa17 	bl	8000768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800333a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	a901      	add	r1, sp, #4
 8003340:	480f      	ldr	r0, [pc, #60]	; (8003380 <HAL_PCD_MspInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003342:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003344:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f7fd fa0e 	bl	8000768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_PCD_MspInit+0x74>)
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
 8003356:	9400      	str	r4, [sp, #0]
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003366:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003368:	2043      	movs	r0, #67	; 0x43
 800336a:	4622      	mov	r2, r4
 800336c:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800336e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003370:	f7fd f992 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003374:	2043      	movs	r0, #67	; 0x43
 8003376:	f7fd f9c3 	bl	8000700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800337a:	b006      	add	sp, #24
 800337c:	bd10      	pop	{r4, pc}
 800337e:	bf00      	nop
 8003380:	40020000 	.word	0x40020000
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003388:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 800338c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003390:	f7ff ba28 	b.w	80027e4 <USBD_LL_SetupStage>

08003394 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003394:	231c      	movs	r3, #28
 8003396:	fb03 0301 	mla	r3, r3, r1, r0
 800339a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800339e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033a2:	f7ff ba4c 	b.w	800283e <USBD_LL_DataOutStage>

080033a6 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80033a6:	231c      	movs	r3, #28
 80033a8:	fb03 0301 	mla	r3, r3, r1, r0
 80033ac:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b2:	f7ff ba76 	b.w	80028a2 <USBD_LL_DataInStage>

080033b6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80033b6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033ba:	f7ff baf2 	b.w	80029a2 <USBD_LL_SOF>

080033be <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80033be:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80033c0:	68c1      	ldr	r1, [r0, #12]
{ 
 80033c2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80033c4:	3100      	adds	r1, #0
 80033c6:	bf18      	it	ne
 80033c8:	2101      	movne	r1, #1
 80033ca:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033ce:	f7ff fad6 	bl	800297e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80033d2:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 80033d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80033da:	f7ff bab1 	b.w	8002940 <USBD_LL_Reset>
	...

080033e0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80033e4:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80033e8:	f7ff facc 	bl	8002984 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80033fa:	6a23      	ldr	r3, [r4, #32]
 80033fc:	b123      	cbz	r3, 8003408 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80033fe:	4a03      	ldr	r2, [pc, #12]	; (800340c <HAL_PCD_SuspendCallback+0x2c>)
 8003400:	6913      	ldr	r3, [r2, #16]
 8003402:	f043 0306 	orr.w	r3, r3, #6
 8003406:	6113      	str	r3, [r2, #16]
 8003408:	bd10      	pop	{r4, pc}
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003410:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003414:	f7ff babf 	b.w	8002996 <USBD_LL_Resume>

08003418 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003418:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800341c:	f7ff bacf 	b.w	80029be <USBD_LL_IsoOUTIncomplete>

08003420 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003420:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003424:	f7ff bac9 	b.w	80029ba <USBD_LL_IsoINIncomplete>

08003428 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003428:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800342c:	f7ff bac9 	b.w	80029c2 <USBD_LL_DevConnected>

08003430 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003430:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003434:	f7ff bac7 	b.w	80029c6 <USBD_LL_DevDisconnected>

08003438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003438:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800343a:	7802      	ldrb	r2, [r0, #0]
 800343c:	bb5a      	cbnz	r2, 8003496 <USBD_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003440:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8003442:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8003446:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800344a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800344e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003452:	2102      	movs	r1, #2
 8003454:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003456:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003458:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800345a:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800345c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800345e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003460:	61d9      	str	r1, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003462:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003466:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800346a:	f7fd fa53 	bl	8000914 <HAL_PCD_Init>
 800346e:	b120      	cbz	r0, 800347a <USBD_LL_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003470:	f240 1153 	movw	r1, #339	; 0x153
 8003474:	480a      	ldr	r0, [pc, #40]	; (80034a0 <USBD_LL_Init+0x68>)
 8003476:	f7ff feb5 	bl	80031e4 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	4807      	ldr	r0, [pc, #28]	; (800349c <USBD_LL_Init+0x64>)
 800347e:	f7fd fe98 	bl	80011b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003482:	2240      	movs	r2, #64	; 0x40
 8003484:	2100      	movs	r1, #0
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <USBD_LL_Init+0x64>)
 8003488:	f7fd fe72 	bl	8001170 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	2101      	movs	r1, #1
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <USBD_LL_Init+0x64>)
 8003492:	f7fd fe6d 	bl	8001170 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003496:	2000      	movs	r0, #0
 8003498:	bd08      	pop	{r3, pc}
 800349a:	bf00      	nop
 800349c:	200081cc 	.word	0x200081cc
 80034a0:	08008072 	.word	0x08008072

080034a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80034a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80034a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034aa:	f7fd fa9f 	bl	80009ec <HAL_PCD_Start>
 80034ae:	2803      	cmp	r0, #3
 80034b0:	bf9a      	itte	ls
 80034b2:	4b02      	ldrls	r3, [pc, #8]	; (80034bc <USBD_LL_Start+0x18>)
 80034b4:	5c18      	ldrbls	r0, [r3, r0]
 80034b6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80034b8:	bd08      	pop	{r3, pc}
 80034ba:	bf00      	nop
 80034bc:	0800806e 	.word	0x0800806e

080034c0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80034c0:	b510      	push	{r4, lr}
 80034c2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80034c4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034c8:	4613      	mov	r3, r2
 80034ca:	4622      	mov	r2, r4
 80034cc:	f7fd fd62 	bl	8000f94 <HAL_PCD_EP_Open>
 80034d0:	2803      	cmp	r0, #3
 80034d2:	bf9a      	itte	ls
 80034d4:	4b01      	ldrls	r3, [pc, #4]	; (80034dc <USBD_LL_OpenEP+0x1c>)
 80034d6:	5c18      	ldrbls	r0, [r3, r0]
 80034d8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80034da:	bd10      	pop	{r4, pc}
 80034dc:	0800806e 	.word	0x0800806e

080034e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80034e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80034e2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034e6:	f7fd fd83 	bl	8000ff0 <HAL_PCD_EP_Close>
 80034ea:	2803      	cmp	r0, #3
 80034ec:	bf9a      	itte	ls
 80034ee:	4b02      	ldrls	r3, [pc, #8]	; (80034f8 <USBD_LL_CloseEP+0x18>)
 80034f0:	5c18      	ldrbls	r0, [r3, r0]
 80034f2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80034f4:	bd08      	pop	{r3, pc}
 80034f6:	bf00      	nop
 80034f8:	0800806e 	.word	0x0800806e

080034fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80034fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80034fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003502:	f7fd fde4 	bl	80010ce <HAL_PCD_EP_SetStall>
 8003506:	2803      	cmp	r0, #3
 8003508:	bf9a      	itte	ls
 800350a:	4b02      	ldrls	r3, [pc, #8]	; (8003514 <USBD_LL_StallEP+0x18>)
 800350c:	5c18      	ldrbls	r0, [r3, r0]
 800350e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003510:	bd08      	pop	{r3, pc}
 8003512:	bf00      	nop
 8003514:	0800806e 	.word	0x0800806e

08003518 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003518:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800351a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800351e:	f7fd fe02 	bl	8001126 <HAL_PCD_EP_ClrStall>
 8003522:	2803      	cmp	r0, #3
 8003524:	bf9a      	itte	ls
 8003526:	4b02      	ldrls	r3, [pc, #8]	; (8003530 <USBD_LL_ClearStallEP+0x18>)
 8003528:	5c18      	ldrbls	r0, [r3, r0]
 800352a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800352c:	bd08      	pop	{r3, pc}
 800352e:	bf00      	nop
 8003530:	0800806e 	.word	0x0800806e

08003534 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003534:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003538:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800353c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003540:	bf1b      	ittet	ne
 8003542:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003546:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800354a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800354e:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003552:	bf08      	it	eq
 8003554:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003558:	4770      	bx	lr
	...

0800355c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800355c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800355e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003562:	f7fd fd05 	bl	8000f70 <HAL_PCD_SetAddress>
 8003566:	2803      	cmp	r0, #3
 8003568:	bf9a      	itte	ls
 800356a:	4b02      	ldrls	r3, [pc, #8]	; (8003574 <USBD_LL_SetUSBAddress+0x18>)
 800356c:	5c18      	ldrbls	r0, [r3, r0]
 800356e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003570:	bd08      	pop	{r3, pc}
 8003572:	bf00      	nop
 8003574:	0800806e 	.word	0x0800806e

08003578 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003578:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800357a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800357e:	f7fd fd86 	bl	800108e <HAL_PCD_EP_Transmit>
 8003582:	2803      	cmp	r0, #3
 8003584:	bf9a      	itte	ls
 8003586:	4b02      	ldrls	r3, [pc, #8]	; (8003590 <USBD_LL_Transmit+0x18>)
 8003588:	5c18      	ldrbls	r0, [r3, r0]
 800358a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 800358c:	bd08      	pop	{r3, pc}
 800358e:	bf00      	nop
 8003590:	0800806e 	.word	0x0800806e

08003594 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003594:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003596:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800359a:	f7fd fd4c 	bl	8001036 <HAL_PCD_EP_Receive>
 800359e:	2803      	cmp	r0, #3
 80035a0:	bf9a      	itte	ls
 80035a2:	4b02      	ldrls	r3, [pc, #8]	; (80035ac <USBD_LL_PrepareReceive+0x18>)
 80035a4:	5c18      	ldrbls	r0, [r3, r0]
 80035a6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80035a8:	bd08      	pop	{r3, pc}
 80035aa:	bf00      	nop
 80035ac:	0800806e 	.word	0x0800806e

080035b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80035b0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80035b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035b6:	f7fd fd62 	bl	800107e <HAL_PCD_EP_GetRxCount>
}
 80035ba:	bd08      	pop	{r3, pc}

080035bc <USBD_USR_DeviceDescriptor>:
     HIBYTE(USBD_LANGID_STRING),
};

uint8_t *USBD_USR_DeviceDescriptor(uint8_t speed , uint16_t *length)
{
    *length = sizeof(USBD_DeviceDesc);
 80035bc:	2312      	movs	r3, #18
 80035be:	800b      	strh	r3, [r1, #0]
    return USBD_DeviceDesc;
}
 80035c0:	4800      	ldr	r0, [pc, #0]	; (80035c4 <USBD_USR_DeviceDescriptor+0x8>)
 80035c2:	4770      	bx	lr
 80035c4:	20000114 	.word	0x20000114

080035c8 <USBD_USR_LangIDStrDescriptor>:

uint8_t *USBD_USR_LangIDStrDescriptor(uint8_t speed , uint16_t *length)
{
    *length =  sizeof(USBD_LangIDDesc);
 80035c8:	2304      	movs	r3, #4
 80035ca:	800b      	strh	r3, [r1, #0]
    return USBD_LangIDDesc;
}
 80035cc:	4800      	ldr	r0, [pc, #0]	; (80035d0 <USBD_USR_LangIDStrDescriptor+0x8>)
 80035ce:	4770      	bx	lr
 80035d0:	20000128 	.word	0x20000128

080035d4 <USBD_USR_ManufacturerStrDescriptor>:
    }
    return USBD_StrDesc;
}

uint8_t *USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80035d4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80035d6:	4c04      	ldr	r4, [pc, #16]	; (80035e8 <USBD_USR_ManufacturerStrDescriptor+0x14>)
 80035d8:	4804      	ldr	r0, [pc, #16]	; (80035ec <USBD_USR_ManufacturerStrDescriptor+0x18>)
 80035da:	460a      	mov	r2, r1
 80035dc:	4621      	mov	r1, r4
 80035de:	f7ff fb92 	bl	8002d06 <USBD_GetString>
    return USBD_StrDesc;
}
 80035e2:	4620      	mov	r0, r4
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	200085bc 	.word	0x200085bc
 80035ec:	080080a2 	.word	0x080080a2

080035f0 <USBD_USR_ProductStrDescriptor>:
{
 80035f0:	b510      	push	{r4, lr}
        USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80035f2:	4c04      	ldr	r4, [pc, #16]	; (8003604 <USBD_USR_ProductStrDescriptor+0x14>)
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <USBD_USR_ProductStrDescriptor+0x18>)
 80035f6:	460a      	mov	r2, r1
 80035f8:	4621      	mov	r1, r4
 80035fa:	f7ff fb84 	bl	8002d06 <USBD_GetString>
}
 80035fe:	4620      	mov	r0, r4
 8003600:	bd10      	pop	{r4, pc}
 8003602:	bf00      	nop
 8003604:	200085bc 	.word	0x200085bc
 8003608:	080080b1 	.word	0x080080b1

0800360c <USBD_USR_SerialStrDescriptor>:

uint8_t *USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 800360c:	460a      	mov	r2, r1
 800360e:	b508      	push	{r3, lr}
    if(speed  == USB_OTG_SPEED_HIGH)
    {
        USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8003610:	4904      	ldr	r1, [pc, #16]	; (8003624 <USBD_USR_SerialStrDescriptor+0x18>)
    if(speed  == USB_OTG_SPEED_HIGH)
 8003612:	b920      	cbnz	r0, 800361e <USBD_USR_SerialStrDescriptor+0x12>
        USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8003614:	4804      	ldr	r0, [pc, #16]	; (8003628 <USBD_USR_SerialStrDescriptor+0x1c>)
    }
    else
    {
        USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8003616:	f7ff fb76 	bl	8002d06 <USBD_GetString>
    }
    return USBD_StrDesc;
}
 800361a:	4802      	ldr	r0, [pc, #8]	; (8003624 <USBD_USR_SerialStrDescriptor+0x18>)
 800361c:	bd08      	pop	{r3, pc}
        USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800361e:	4803      	ldr	r0, [pc, #12]	; (800362c <USBD_USR_SerialStrDescriptor+0x20>)
 8003620:	e7f9      	b.n	8003616 <USBD_USR_SerialStrDescriptor+0xa>
 8003622:	bf00      	nop
 8003624:	200085bc 	.word	0x200085bc
 8003628:	080080bf 	.word	0x080080bf
 800362c:	080080cc 	.word	0x080080cc

08003630 <USBD_USR_ConfigStrDescriptor>:

uint8_t *USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003630:	b510      	push	{r4, lr}
    if(speed  == USB_OTG_SPEED_HIGH)
    {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8003632:	4c04      	ldr	r4, [pc, #16]	; (8003644 <USBD_USR_ConfigStrDescriptor+0x14>)
 8003634:	4804      	ldr	r0, [pc, #16]	; (8003648 <USBD_USR_ConfigStrDescriptor+0x18>)
 8003636:	460a      	mov	r2, r1
 8003638:	4621      	mov	r1, r4
 800363a:	f7ff fb64 	bl	8002d06 <USBD_GetString>
    else
    {
        USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
    }
    return USBD_StrDesc;
}
 800363e:	4620      	mov	r0, r4
 8003640:	bd10      	pop	{r4, pc}
 8003642:	bf00      	nop
 8003644:	200085bc 	.word	0x200085bc
 8003648:	08008085 	.word	0x08008085

0800364c <USBD_USR_InterfaceStrDescriptor>:

uint8_t *USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 800364c:	b510      	push	{r4, lr}
    if(speed == 0)
    {
        USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800364e:	4c04      	ldr	r4, [pc, #16]	; (8003660 <USBD_USR_InterfaceStrDescriptor+0x14>)
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <USBD_USR_InterfaceStrDescriptor+0x18>)
 8003652:	460a      	mov	r2, r1
 8003654:	4621      	mov	r1, r4
 8003656:	f7ff fb56 	bl	8002d06 <USBD_GetString>
    else
    {
        USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
    }
    return USBD_StrDesc;
}
 800365a:	4620      	mov	r0, r4
 800365c:	bd10      	pop	{r4, pc}
 800365e:	bf00      	nop
 8003660:	200085bc 	.word	0x200085bc
 8003664:	08008092 	.word	0x08008092

08003668 <entry_by_mac.constprop.0>:
		if (*(uint32_t *)config->entries[i].addr == ip)
			return &config->entries[i];
	return NULL;
}

static dhcp_entry_t *entry_by_mac(uint8_t *mac)
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	int i;
	for (i = 0; i < config->num_entry; i++)
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <entry_by_mac.constprop.0+0x38>)
		if (memcmp(config->entries[i].mac, mac, 6) == 0)
 800366e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80036a4 <entry_by_mac.constprop.0+0x3c>
	for (i = 0; i < config->num_entry; i++)
 8003672:	681e      	ldr	r6, [r3, #0]
 8003674:	6937      	ldr	r7, [r6, #16]
 8003676:	2500      	movs	r5, #0
		if (memcmp(config->entries[i].mac, mac, 6) == 0)
 8003678:	f04f 0814 	mov.w	r8, #20
	for (i = 0; i < config->num_entry; i++)
 800367c:	42bd      	cmp	r5, r7
 800367e:	db03      	blt.n	8003688 <entry_by_mac.constprop.0+0x20>
			return &config->entries[i];
	return NULL;
 8003680:	2400      	movs	r4, #0
}
 8003682:	4620      	mov	r0, r4
 8003684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(config->entries[i].mac, mac, 6) == 0)
 8003688:	6974      	ldr	r4, [r6, #20]
 800368a:	fb08 4405 	mla	r4, r8, r5, r4
 800368e:	2206      	movs	r2, #6
 8003690:	4649      	mov	r1, r9
 8003692:	4620      	mov	r0, r4
 8003694:	f004 fc6e 	bl	8007f74 <memcmp>
 8003698:	2800      	cmp	r0, #0
 800369a:	d0f2      	beq.n	8003682 <entry_by_mac.constprop.0+0x1a>
	for (i = 0; i < config->num_entry; i++)
 800369c:	3501      	adds	r5, #1
 800369e:	e7ed      	b.n	800367c <entry_by_mac.constprop.0+0x14>
 80036a0:	20000de0 	.word	0x20000de0
 80036a4:	200087d8 	.word	0x200087d8

080036a8 <find_dhcp_option>:
{
	memset(entry->mac, 0, 6);
}

uint8_t *find_dhcp_option(uint8_t *attrs, int size, uint8_t attr)
{
 80036a8:	b530      	push	{r4, r5, lr}
	int i = 0;
 80036aa:	2300      	movs	r3, #0
{
 80036ac:	4605      	mov	r5, r0
	while ((i + 1) < size)
 80036ae:	1c58      	adds	r0, r3, #1
 80036b0:	4288      	cmp	r0, r1
 80036b2:	db01      	blt.n	80036b8 <find_dhcp_option+0x10>
	{
		int next = i + attrs[i + 1] + 2;
		if (next > size) return NULL;
 80036b4:	2000      	movs	r0, #0
 80036b6:	e00a      	b.n	80036ce <find_dhcp_option+0x26>
		int next = i + attrs[i + 1] + 2;
 80036b8:	461c      	mov	r4, r3
 80036ba:	18eb      	adds	r3, r5, r3
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	4423      	add	r3, r4
 80036c0:	3302      	adds	r3, #2
		if (next > size) return NULL;
 80036c2:	4299      	cmp	r1, r3
 80036c4:	dbf6      	blt.n	80036b4 <find_dhcp_option+0xc>
		if (attrs[i] == attr)
 80036c6:	1928      	adds	r0, r5, r4
 80036c8:	5d2c      	ldrb	r4, [r5, r4]
 80036ca:	4294      	cmp	r4, r2
 80036cc:	d1ef      	bne.n	80036ae <find_dhcp_option+0x6>
			return attrs + i;
		i = next;
	}
	return NULL;
}
 80036ce:	bd30      	pop	{r4, r5, pc}

080036d0 <fill_options>:
	uint32_t dns,
	int lease_time,
	uint32_t serverid,
	uint32_t router,
	uint32_t subnet)
{
 80036d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	9808      	ldr	r0, [sp, #32]
	uint8_t *ptr = (uint8_t *)dest;
	/* ACK message type */
	*ptr++ = 53;
	*ptr++ = 1;
	*ptr++ = msg_type;
 80036d8:	70a1      	strb	r1, [r4, #2]

	/* dhcp server identifier */
	*ptr++ = DHCP_SERVERID;
	*ptr++ = 4;
	*(uint32_t *)ptr = serverid;
 80036da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036dc:	f8c4 1005 	str.w	r1, [r4, #5]
	ptr += 4;

	/* lease time */
	*ptr++ = DHCP_LEASETIME;
 80036e0:	2133      	movs	r1, #51	; 0x33
 80036e2:	7261      	strb	r1, [r4, #9]
	*ptr++ = 4;
	*ptr++ = (lease_time >> 24) & 0xFF;
 80036e4:	0e01      	lsrs	r1, r0, #24
{
 80036e6:	4690      	mov	r8, r2
	*ptr++ = (lease_time >> 24) & 0xFF;
 80036e8:	72e1      	strb	r1, [r4, #11]
	*ptr++ = 53;
 80036ea:	2235      	movs	r2, #53	; 0x35
	*ptr++ = (lease_time >> 16) & 0xFF;
 80036ec:	1401      	asrs	r1, r0, #16
{
 80036ee:	4699      	mov	r9, r3
	*ptr++ = 53;
 80036f0:	7022      	strb	r2, [r4, #0]
	*ptr++ = (lease_time >> 16) & 0xFF;
 80036f2:	7321      	strb	r1, [r4, #12]
	*ptr++ = DHCP_SERVERID;
 80036f4:	2236      	movs	r2, #54	; 0x36
	*ptr++ = (lease_time >> 8) & 0xFF;
 80036f6:	1201      	asrs	r1, r0, #8
{
 80036f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = DHCP_SERVERID;
 80036fa:	70e2      	strb	r2, [r4, #3]
	*ptr++ = 1;
 80036fc:	2501      	movs	r5, #1
	*ptr++ = 4;
 80036fe:	2204      	movs	r2, #4
	*ptr++ = (lease_time >> 8) & 0xFF;
 8003700:	7361      	strb	r1, [r4, #13]
	*ptr++ = (lease_time >> 0) & 0xFF;

	/* subnet mask */
	*ptr++ = DHCP_SUBNETMASK;
	*ptr++ = 4;
	*(uint32_t *)ptr = subnet;
 8003702:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = 1;
 8003704:	7065      	strb	r5, [r4, #1]
	*ptr++ = 4;
 8003706:	7122      	strb	r2, [r4, #4]
	*ptr++ = 4;
 8003708:	72a2      	strb	r2, [r4, #10]
	*ptr++ = (lease_time >> 0) & 0xFF;
 800370a:	73a0      	strb	r0, [r4, #14]
	*ptr++ = DHCP_SUBNETMASK;
 800370c:	73e5      	strb	r5, [r4, #15]
	*ptr++ = 4;
 800370e:	7422      	strb	r2, [r4, #16]
	*(uint32_t *)ptr = subnet;
 8003710:	f8c4 1011 	str.w	r1, [r4, #17]
	ptr += 4;

	/* router */
	if (router != 0)
 8003714:	bb1b      	cbnz	r3, 800375e <fill_options+0x8e>
	ptr += 4;
 8003716:	f104 0515 	add.w	r5, r4, #21
		*(uint32_t *)ptr = router;
		ptr += 4;
	}

	/* domain name */
	if (domain != NULL)
 800371a:	f1b8 0f00 	cmp.w	r8, #0
 800371e:	d00e      	beq.n	800373e <fill_options+0x6e>
	{
		int len = strlen(domain);
		*ptr++ = DHCP_DNSDOMAIN;
 8003720:	462e      	mov	r6, r5
		int len = strlen(domain);
 8003722:	4640      	mov	r0, r8
 8003724:	f7fc fd62 	bl	80001ec <strlen>
		*ptr++ = DHCP_DNSDOMAIN;
 8003728:	230f      	movs	r3, #15
 800372a:	f806 3b02 	strb.w	r3, [r6], #2
		int len = strlen(domain);
 800372e:	4607      	mov	r7, r0
		*ptr++ = len;
 8003730:	7068      	strb	r0, [r5, #1]
		memcpy(ptr, domain, len);
 8003732:	4602      	mov	r2, r0
 8003734:	4641      	mov	r1, r8
 8003736:	4630      	mov	r0, r6
 8003738:	f004 fc2b 	bl	8007f92 <memcpy>
		ptr += len;
 800373c:	19f5      	adds	r5, r6, r7
	}

	/* domain name server (DNS) */
	if (dns != 0)
 800373e:	f1b9 0f00 	cmp.w	r9, #0
 8003742:	d006      	beq.n	8003752 <fill_options+0x82>
	{
		*ptr++ = DHCP_DNSSERVER;
 8003744:	2306      	movs	r3, #6
 8003746:	702b      	strb	r3, [r5, #0]
		*ptr++ = 4;
 8003748:	2304      	movs	r3, #4
 800374a:	706b      	strb	r3, [r5, #1]
		*(uint32_t *)ptr = dns;
 800374c:	f8c5 9002 	str.w	r9, [r5, #2]
		ptr += 4;
 8003750:	3506      	adds	r5, #6
	}

	/* end */
	*ptr++ = DHCP_END;
 8003752:	23ff      	movs	r3, #255	; 0xff
 8003754:	f805 3b01 	strb.w	r3, [r5], #1
	return ptr - (uint8_t *)dest;
}
 8003758:	1b28      	subs	r0, r5, r4
 800375a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*ptr++ = DHCP_ROUTER;
 800375e:	2103      	movs	r1, #3
 8003760:	7561      	strb	r1, [r4, #21]
		*ptr++ = 4;
 8003762:	75a2      	strb	r2, [r4, #22]
		*(uint32_t *)ptr = router;
 8003764:	f8c4 3017 	str.w	r3, [r4, #23]
		ptr += 4;
 8003768:	f104 051b 	add.w	r5, r4, #27
 800376c:	e7d5      	b.n	800371a <fill_options+0x4a>
	...

08003770 <udp_recv_proc>:

static void udp_recv_proc(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 8003770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003774:	4616      	mov	r6, r2
	dhcp_entry_t *entry;
	struct pbuf *pp;

	int n = p->len;
	if (n > sizeof(dhcp_data)) n = sizeof(dhcp_data);
	memcpy(&dhcp_data, p->payload, n);
 8003776:	8952      	ldrh	r2, [r2, #10]
 8003778:	4c72      	ldr	r4, [pc, #456]	; (8003944 <udp_recv_proc+0x1d4>)
 800377a:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
{
 800377e:	b087      	sub	sp, #28
	memcpy(&dhcp_data, p->payload, n);
 8003780:	bf28      	it	cs
 8003782:	f44f 7201 	movcs.w	r2, #516	; 0x204
{
 8003786:	4688      	mov	r8, r1
	memcpy(&dhcp_data, p->payload, n);
 8003788:	4620      	mov	r0, r4
 800378a:	6871      	ldr	r1, [r6, #4]
{
 800378c:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	memcpy(&dhcp_data, p->payload, n);
 8003790:	f004 fbff 	bl	8007f92 <memcpy>
	switch (dhcp_data.dp_options[2])
 8003794:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
 8003798:	2b01      	cmp	r3, #1
 800379a:	d007      	beq.n	80037ac <udp_recv_proc+0x3c>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d063      	beq.n	8003868 <udp_recv_proc+0xf8>
			break;

		default:
				break;
	}
	pbuf_free(p);
 80037a0:	4630      	mov	r0, r6
}
 80037a2:	b007      	add	sp, #28
 80037a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pbuf_free(p);
 80037a8:	f001 bb2f 	b.w	8004e0a <pbuf_free>
			entry = entry_by_mac(dhcp_data.dp_chaddr);
 80037ac:	f7ff ff5c 	bl	8003668 <entry_by_mac.constprop.0>
 80037b0:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8003958 <udp_recv_proc+0x1e8>
			if (entry == NULL) entry = vacant_address();
 80037b4:	4605      	mov	r5, r0
 80037b6:	b9b8      	cbnz	r0, 80037e8 <udp_recv_proc+0x78>
	for (i = 0; i < config->num_entry; i++)
 80037b8:	f8da b000 	ldr.w	fp, [sl]
 80037bc:	f8db 3010 	ldr.w	r3, [fp, #16]
 80037c0:	9304      	str	r3, [sp, #16]
		if (is_vacant(config->entries + i))
 80037c2:	2314      	movs	r3, #20
	for (i = 0; i < config->num_entry; i++)
 80037c4:	9a04      	ldr	r2, [sp, #16]
 80037c6:	4295      	cmp	r5, r2
 80037c8:	daea      	bge.n	80037a0 <udp_recv_proc+0x30>
		if (is_vacant(config->entries + i))
 80037ca:	f8db 7014 	ldr.w	r7, [fp, #20]
	return memcmp("\0\0\0\0\0", entry->mac, 6) == 0;
 80037ce:	485e      	ldr	r0, [pc, #376]	; (8003948 <udp_recv_proc+0x1d8>)
 80037d0:	9305      	str	r3, [sp, #20]
 80037d2:	fb03 7105 	mla	r1, r3, r5, r7
 80037d6:	2206      	movs	r2, #6
 80037d8:	f004 fbcc 	bl	8007f74 <memcmp>
		if (is_vacant(config->entries + i))
 80037dc:	9b05      	ldr	r3, [sp, #20]
 80037de:	2800      	cmp	r0, #0
 80037e0:	d140      	bne.n	8003864 <udp_recv_proc+0xf4>
			if (entry == NULL) break;
 80037e2:	f117 0514 	adds.w	r5, r7, #20
 80037e6:	d0db      	beq.n	80037a0 <udp_recv_proc+0x30>
			*(uint32_t *)dhcp_data.dp_yiaddr = *(uint32_t *)entry->addr;
 80037e8:	f8d5 3006 	ldr.w	r3, [r5, #6]
 80037ec:	6123      	str	r3, [r4, #16]
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <udp_recv_proc+0x1dc>)
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 80037f0:	4857      	ldr	r0, [pc, #348]	; (8003950 <udp_recv_proc+0x1e0>)
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			dhcp_data.dp_secs = 0;
 80037f8:	2700      	movs	r7, #0
			dhcp_data.dp_op = 2; /* reply */
 80037fa:	f04f 0b02 	mov.w	fp, #2
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 80037fe:	f240 1213 	movw	r2, #275	; 0x113
 8003802:	4639      	mov	r1, r7
			dhcp_data.dp_op = 2; /* reply */
 8003804:	f884 b000 	strb.w	fp, [r4]
			dhcp_data.dp_secs = 0;
 8003808:	8127      	strh	r7, [r4, #8]
			dhcp_data.dp_flags = 0;
 800380a:	8167      	strh	r7, [r4, #10]
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 800380c:	f004 fbcc 	bl	8007fa8 <memset>
				config->domain,
 8003810:	f8da 2000 	ldr.w	r2, [sl]
			fill_options(dhcp_data.dp_options,
 8003814:	f8d5 100a 	ldr.w	r1, [r5, #10]
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	9302      	str	r3, [sp, #8]
 800381c:	9103      	str	r1, [sp, #12]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	692b      	ldr	r3, [r5, #16]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8003828:	4849      	ldr	r0, [pc, #292]	; (8003950 <udp_recv_proc+0x1e0>)
 800382a:	68d2      	ldr	r2, [r2, #12]
 800382c:	4659      	mov	r1, fp
 800382e:	f7ff ff4f 	bl	80036d0 <fill_options>
			pp = pbuf_alloc(PBUF_TRANSPORT, sizeof(dhcp_data), PBUF_POOL);
 8003832:	2203      	movs	r2, #3
 8003834:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003838:	4638      	mov	r0, r7
 800383a:	f001 fb0d 	bl	8004e58 <pbuf_alloc>
			if (pp == NULL) break;
 800383e:	4604      	mov	r4, r0
 8003840:	2800      	cmp	r0, #0
 8003842:	d0ad      	beq.n	80037a0 <udp_recv_proc+0x30>
			memcpy(pp->payload, &dhcp_data, sizeof(dhcp_data));
 8003844:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003848:	493e      	ldr	r1, [pc, #248]	; (8003944 <udp_recv_proc+0x1d4>)
 800384a:	6840      	ldr	r0, [r0, #4]
 800384c:	f004 fba1 	bl	8007f92 <memcpy>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
 8003850:	464b      	mov	r3, r9
 8003852:	4a40      	ldr	r2, [pc, #256]	; (8003954 <udp_recv_proc+0x1e4>)
 8003854:	4621      	mov	r1, r4
 8003856:	4640      	mov	r0, r8
 8003858:	f003 ffb6 	bl	80077c8 <udp_sendto>
			pbuf_free(pp);
 800385c:	4620      	mov	r0, r4
			pbuf_free(pp);
 800385e:	f001 fad4 	bl	8004e0a <pbuf_free>
			break;
 8003862:	e79d      	b.n	80037a0 <udp_recv_proc+0x30>
	for (i = 0; i < config->num_entry; i++)
 8003864:	3501      	adds	r5, #1
 8003866:	e7ad      	b.n	80037c4 <udp_recv_proc+0x54>
			ptr = find_dhcp_option(dhcp_data.dp_options, sizeof(dhcp_data.dp_options), DHCP_IPADDRESS);
 8003868:	2232      	movs	r2, #50	; 0x32
 800386a:	f240 1113 	movw	r1, #275	; 0x113
 800386e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8003872:	f7ff ff19 	bl	80036a8 <find_dhcp_option>
			if (ptr == NULL) break;
 8003876:	4605      	mov	r5, r0
 8003878:	2800      	cmp	r0, #0
 800387a:	d091      	beq.n	80037a0 <udp_recv_proc+0x30>
			if (ptr[1] != 4) break;
 800387c:	7843      	ldrb	r3, [r0, #1]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d18e      	bne.n	80037a0 <udp_recv_proc+0x30>
			entry = entry_by_mac(dhcp_data.dp_chaddr);
 8003882:	f7ff fef1 	bl	8003668 <entry_by_mac.constprop.0>
			if (entry != NULL) free_entry(entry);
 8003886:	b110      	cbz	r0, 800388e <udp_recv_proc+0x11e>
	memset(entry->mac, 0, 6);
 8003888:	2300      	movs	r3, #0
 800388a:	6003      	str	r3, [r0, #0]
 800388c:	8083      	strh	r3, [r0, #4]
	for (i = 0; i < config->num_entry; i++)
 800388e:	4b32      	ldr	r3, [pc, #200]	; (8003958 <udp_recv_proc+0x1e8>)
			entry = entry_by_ip(*(uint32_t *)ptr);
 8003890:	f8d5 b002 	ldr.w	fp, [r5, #2]
	for (i = 0; i < config->num_entry; i++)
 8003894:	681f      	ldr	r7, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	2300      	movs	r3, #0
		if (*(uint32_t *)config->entries[i].addr == ip)
 800389a:	2014      	movs	r0, #20
	for (i = 0; i < config->num_entry; i++)
 800389c:	4293      	cmp	r3, r2
 800389e:	f6bf af7f 	bge.w	80037a0 <udp_recv_proc+0x30>
		if (*(uint32_t *)config->entries[i].addr == ip)
 80038a2:	697d      	ldr	r5, [r7, #20]
 80038a4:	fb00 5503 	mla	r5, r0, r3, r5
 80038a8:	f8d5 1006 	ldr.w	r1, [r5, #6]
 80038ac:	458b      	cmp	fp, r1
 80038ae:	d001      	beq.n	80038b4 <udp_recv_proc+0x144>
	for (i = 0; i < config->num_entry; i++)
 80038b0:	3301      	adds	r3, #1
 80038b2:	e7f3      	b.n	800389c <udp_recv_proc+0x12c>
	return memcmp("\0\0\0\0\0", entry->mac, 6) == 0;
 80038b4:	2206      	movs	r2, #6
 80038b6:	4629      	mov	r1, r5
 80038b8:	4823      	ldr	r0, [pc, #140]	; (8003948 <udp_recv_proc+0x1d8>)
 80038ba:	f004 fb5b 	bl	8007f74 <memcmp>
			if (!is_vacant(entry)) break;
 80038be:	4682      	mov	sl, r0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	f47f af6d 	bne.w	80037a0 <udp_recv_proc+0x30>
			dhcp_data.dp_op = 2; /* reply */
 80038c6:	2302      	movs	r3, #2
 80038c8:	7023      	strb	r3, [r4, #0]
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <udp_recv_proc+0x1dc>)
			memcpy(dhcp_data.dp_yiaddr, ptr, 4);
 80038cc:	f8c4 b010 	str.w	fp, [r4, #16]
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 80038d6:	f240 1213 	movw	r2, #275	; 0x113
 80038da:	4651      	mov	r1, sl
 80038dc:	481c      	ldr	r0, [pc, #112]	; (8003950 <udp_recv_proc+0x1e0>)
			dhcp_data.dp_secs = 0;
 80038de:	f8a4 a008 	strh.w	sl, [r4, #8]
			dhcp_data.dp_flags = 0;
 80038e2:	f8a4 a00a 	strh.w	sl, [r4, #10]
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 80038e6:	f004 fb5f 	bl	8007fa8 <memset>
			fill_options(dhcp_data.dp_options,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f8d5 200a 	ldr.w	r2, [r5, #10]
 80038f0:	9203      	str	r2, [sp, #12]
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	692b      	ldr	r3, [r5, #16]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f8d7 3006 	ldr.w	r3, [r7, #6]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4813      	ldr	r0, [pc, #76]	; (8003950 <udp_recv_proc+0x1e0>)
 8003902:	2105      	movs	r1, #5
 8003904:	f7ff fee4 	bl	80036d0 <fill_options>
			pp = pbuf_alloc(PBUF_TRANSPORT, sizeof(dhcp_data), PBUF_POOL);
 8003908:	2203      	movs	r2, #3
 800390a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800390e:	4650      	mov	r0, sl
 8003910:	f001 faa2 	bl	8004e58 <pbuf_alloc>
			if (pp == NULL) break;
 8003914:	4607      	mov	r7, r0
 8003916:	2800      	cmp	r0, #0
 8003918:	f43f af42 	beq.w	80037a0 <udp_recv_proc+0x30>
			memcpy(entry->mac, dhcp_data.dp_chaddr, 6);
 800391c:	69e0      	ldr	r0, [r4, #28]
 800391e:	490f      	ldr	r1, [pc, #60]	; (800395c <udp_recv_proc+0x1ec>)
 8003920:	6028      	str	r0, [r5, #0]
 8003922:	888b      	ldrh	r3, [r1, #4]
 8003924:	80ab      	strh	r3, [r5, #4]
			memcpy(pp->payload, &dhcp_data, sizeof(dhcp_data));
 8003926:	f44f 7201 	mov.w	r2, #516	; 0x204
 800392a:	391c      	subs	r1, #28
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f004 fb30 	bl	8007f92 <memcpy>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
 8003932:	464b      	mov	r3, r9
 8003934:	4a07      	ldr	r2, [pc, #28]	; (8003954 <udp_recv_proc+0x1e4>)
 8003936:	4639      	mov	r1, r7
 8003938:	4640      	mov	r0, r8
 800393a:	f003 ff45 	bl	80077c8 <udp_sendto>
			pbuf_free(pp);
 800393e:	4638      	mov	r0, r7
 8003940:	e78d      	b.n	800385e <udp_recv_proc+0xee>
 8003942:	bf00      	nop
 8003944:	200087bc 	.word	0x200087bc
 8003948:	08007fd9 	.word	0x08007fd9
 800394c:	20000148 	.word	0x20000148
 8003950:	200088ac 	.word	0x200088ac
 8003954:	080080e0 	.word	0x080080e0
 8003958:	20000de0 	.word	0x20000de0
 800395c:	200087d8 	.word	0x200087d8

08003960 <dhserv_free>:
	config = c;
	return ERR_OK;
}

void dhserv_free(void)
{
 8003960:	b510      	push	{r4, lr}
	if (pcb == NULL) return;
 8003962:	4c04      	ldr	r4, [pc, #16]	; (8003974 <dhserv_free+0x14>)
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	b118      	cbz	r0, 8003970 <dhserv_free+0x10>
	udp_remove(pcb);
 8003968:	f003 ff50 	bl	800780c <udp_remove>
	pcb = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	20000de4 	.word	0x20000de4

08003978 <dhserv_init>:
{
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	4605      	mov	r5, r0
	udp_init();
 800397c:	f003 fd82 	bl	8007484 <udp_init>
	dhserv_free();
 8003980:	f7ff ffee 	bl	8003960 <dhserv_free>
	pcb = udp_new();
 8003984:	f003 ff58 	bl	8007838 <udp_new>
 8003988:	4e0b      	ldr	r6, [pc, #44]	; (80039b8 <dhserv_init+0x40>)
 800398a:	6030      	str	r0, [r6, #0]
	if (pcb == NULL)
 800398c:	b188      	cbz	r0, 80039b2 <dhserv_init+0x3a>
	err = udp_bind(pcb, IP_ADDR_ANY, c->port);
 800398e:	88aa      	ldrh	r2, [r5, #4]
 8003990:	490a      	ldr	r1, [pc, #40]	; (80039bc <dhserv_init+0x44>)
 8003992:	f003 fe51 	bl	8007638 <udp_bind>
	if (err != ERR_OK)
 8003996:	4604      	mov	r4, r0
 8003998:	b118      	cbz	r0, 80039a2 <dhserv_init+0x2a>
		dhserv_free();
 800399a:	f7ff ffe1 	bl	8003960 <dhserv_free>
}
 800399e:	4620      	mov	r0, r4
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
	udp_recv(pcb, udp_recv_proc, NULL);
 80039a2:	4602      	mov	r2, r0
 80039a4:	4906      	ldr	r1, [pc, #24]	; (80039c0 <dhserv_init+0x48>)
 80039a6:	6830      	ldr	r0, [r6, #0]
 80039a8:	f003 ff2c 	bl	8007804 <udp_recv>
	config = c;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <dhserv_init+0x4c>)
 80039ae:	601d      	str	r5, [r3, #0]
	return ERR_OK;
 80039b0:	e7f5      	b.n	800399e <dhserv_init+0x26>
		return ERR_MEM;
 80039b2:	f04f 34ff 	mov.w	r4, #4294967295
 80039b6:	e7f2      	b.n	800399e <dhserv_init+0x26>
 80039b8:	20000de4 	.word	0x20000de4
 80039bc:	080080dc 	.word	0x080080dc
 80039c0:	08003771 	.word	0x08003771
 80039c4:	20000de0 	.word	0x20000de0

080039c8 <udp_recv_proc>:
	ptr += 2;
	return ptr - (uint8_t *)data;
}

static void udp_recv_proc(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	469b      	mov	fp, r3
	static dns_query_t query;
	struct pbuf *out;
	ip_addr_t host_addr;
	dns_answer_t *answer;

	if (p->len <= sizeof(dns_header_t)) goto error;
 80039ce:	8953      	ldrh	r3, [r2, #10]
{
 80039d0:	b085      	sub	sp, #20
	if (p->len <= sizeof(dns_header_t)) goto error;
 80039d2:	2b0c      	cmp	r3, #12
{
 80039d4:	9100      	str	r1, [sp, #0]
 80039d6:	4617      	mov	r7, r2
	if (p->len <= sizeof(dns_header_t)) goto error;
 80039d8:	f240 808e 	bls.w	8003af8 <udp_recv_proc+0x130>
	header = (dns_header_t *)p->payload;
 80039dc:	6856      	ldr	r6, [r2, #4]
	if (header->flags.qr != 0) goto error;
 80039de:	f996 3002 	ldrsb.w	r3, [r6, #2]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f2c0 8088 	blt.w	8003af8 <udp_recv_proc+0x130>
	if (ntohs(header->n_record[0]) != 1) goto error;
 80039e8:	88b0      	ldrh	r0, [r6, #4]
 80039ea:	f000 f8c6 	bl	8003b7a <lwip_ntohs>
 80039ee:	2801      	cmp	r0, #1
 80039f0:	f040 8082 	bne.w	8003af8 <udp_recv_proc+0x130>

	len = parse_next_query(header + 1, p->len - sizeof(dns_header_t), &query);
 80039f4:	897c      	ldrh	r4, [r7, #10]
			query->name[len++] = '.';
 80039f6:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <udp_recv_proc+0x13c>)
	len = parse_next_query(header + 1, p->len - sizeof(dns_header_t), &query);
 80039f8:	360c      	adds	r6, #12
	lables = 0;
 80039fa:	f04f 0800 	mov.w	r8, #0
	len = parse_next_query(header + 1, p->len - sizeof(dns_header_t), &query);
 80039fe:	3c0c      	subs	r4, #12
	ptr = (uint8_t *)data;
 8003a00:	4631      	mov	r1, r6
	len = 0;
 8003a02:	46c6      	mov	lr, r8
		if (size <= 0) return -1;
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	dd77      	ble.n	8003af8 <udp_recv_proc+0x130>
		lable_len = *ptr++;
 8003a08:	780d      	ldrb	r5, [r1, #0]
 8003a0a:	f101 0a01 	add.w	sl, r1, #1
		size--;
 8003a0e:	3c01      	subs	r4, #1
		if (lable_len == 0) break;
 8003a10:	b1f5      	cbz	r5, 8003a50 <udp_recv_proc+0x88>
		if (lables > 0)
 8003a12:	f1b8 0f00 	cmp.w	r8, #0
 8003a16:	d005      	beq.n	8003a24 <udp_recv_proc+0x5c>
			query->name[len++] = '.';
 8003a18:	f04f 022e 	mov.w	r2, #46	; 0x2e
 8003a1c:	f803 200e 	strb.w	r2, [r3, lr]
 8003a20:	f10e 0e01 	add.w	lr, lr, #1
		if (lable_len > size) return -1;
 8003a24:	42ac      	cmp	r4, r5
 8003a26:	db67      	blt.n	8003af8 <udp_recv_proc+0x130>
		if (len + lable_len >= DNS_MAX_HOST_NAME_LEN) return -2;
 8003a28:	eb05 090e 	add.w	r9, r5, lr
 8003a2c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8003a30:	dc62      	bgt.n	8003af8 <udp_recv_proc+0x130>
		memcpy(&query->name[len], ptr, lable_len);
 8003a32:	eb03 000e 	add.w	r0, r3, lr
 8003a36:	4651      	mov	r1, sl
 8003a38:	462a      	mov	r2, r5
 8003a3a:	9301      	str	r3, [sp, #4]
		size -= lable_len;
 8003a3c:	1b64      	subs	r4, r4, r5
		memcpy(&query->name[len], ptr, lable_len);
 8003a3e:	f004 faa8 	bl	8007f92 <memcpy>
		lables++;
 8003a42:	f108 0801 	add.w	r8, r8, #1
		ptr += lable_len;
 8003a46:	eb0a 0105 	add.w	r1, sl, r5
		lables++;
 8003a4a:	46ce      	mov	lr, r9
 8003a4c:	9b01      	ldr	r3, [sp, #4]
 8003a4e:	e7d9      	b.n	8003a04 <udp_recv_proc+0x3c>
	if (size < 4) return -1;
 8003a50:	2c03      	cmp	r4, #3
 8003a52:	dd51      	ble.n	8003af8 <udp_recv_proc+0x130>
	query->name[len] = 0;
 8003a54:	482b      	ldr	r0, [pc, #172]	; (8003b04 <udp_recv_proc+0x13c>)
 8003a56:	f800 500e 	strb.w	r5, [r0, lr]
	query->type = *(uint16_t *)ptr;
 8003a5a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8003a5e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	query->Class = *(uint16_t *)ptr;
 8003a62:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8003a66:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
	ptr += 2;
 8003a6a:	3105      	adds	r1, #5
	if (len < 0) goto error;
 8003a6c:	1b8e      	subs	r6, r1, r6
 8003a6e:	d443      	bmi.n	8003af8 <udp_recv_proc+0x130>
	if (!query_proc(query.name, &host_addr)) goto error;
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <udp_recv_proc+0x140>)
 8003a72:	a903      	add	r1, sp, #12
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4798      	blx	r3
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d03d      	beq.n	8003af8 <udp_recv_proc+0x130>

	len += sizeof(dns_header_t);
 8003a7c:	f106 080c 	add.w	r8, r6, #12
	out = pbuf_alloc(PBUF_TRANSPORT, len + 16, PBUF_POOL);
 8003a80:	361c      	adds	r6, #28
 8003a82:	2203      	movs	r2, #3
 8003a84:	b2b1      	uxth	r1, r6
 8003a86:	4628      	mov	r0, r5
 8003a88:	f001 f9e6 	bl	8004e58 <pbuf_alloc>
	if (out == NULL) goto error;
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	b398      	cbz	r0, 8003af8 <udp_recv_proc+0x130>

	memcpy(out->payload, p->payload, len);
 8003a90:	4642      	mov	r2, r8
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	6840      	ldr	r0, [r0, #4]
 8003a96:	f004 fa7c 	bl	8007f92 <memcpy>
	header = (dns_header_t *)out->payload;
 8003a9a:	6865      	ldr	r5, [r4, #4]
	header->flags.qr = 1;
 8003a9c:	78ab      	ldrb	r3, [r5, #2]
 8003a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa2:	70ab      	strb	r3, [r5, #2]
	header->n_record[1] = htons(1);
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f000 f865 	bl	8003b74 <lwip_htons>
 8003aaa:	80e8      	strh	r0, [r5, #6]
	answer = (struct dns_answer *)((uint8_t *)out->payload + len);
	answer->name = htons(0xC00C);
 8003aac:	f24c 000c 	movw	r0, #49164	; 0xc00c
	answer = (struct dns_answer *)((uint8_t *)out->payload + len);
 8003ab0:	6866      	ldr	r6, [r4, #4]
	answer->name = htons(0xC00C);
 8003ab2:	f000 f85f 	bl	8003b74 <lwip_htons>
 8003ab6:	f826 0008 	strh.w	r0, [r6, r8]
	answer->type = htons(1);
 8003aba:	2001      	movs	r0, #1
 8003abc:	f000 f85a 	bl	8003b74 <lwip_htons>
	answer = (struct dns_answer *)((uint8_t *)out->payload + len);
 8003ac0:	eb06 0508 	add.w	r5, r6, r8
	answer->type = htons(1);
 8003ac4:	8068      	strh	r0, [r5, #2]
	answer->Class = htons(1);
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f000 f854 	bl	8003b74 <lwip_htons>
 8003acc:	80a8      	strh	r0, [r5, #4]
	answer->ttl = htonl(32);
 8003ace:	2020      	movs	r0, #32
 8003ad0:	f000 f856 	bl	8003b80 <lwip_htonl>
 8003ad4:	f8c5 0006 	str.w	r0, [r5, #6]
	answer->len = htons(4);
 8003ad8:	2004      	movs	r0, #4
 8003ada:	f000 f84b 	bl	8003b74 <lwip_htons>
	answer->addr = host_addr.addr;
 8003ade:	9b03      	ldr	r3, [sp, #12]
	answer->len = htons(4);
 8003ae0:	8168      	strh	r0, [r5, #10]
	answer->addr = host_addr.addr;
 8003ae2:	60eb      	str	r3, [r5, #12]
	
	udp_sendto(upcb, out, addr, port);
 8003ae4:	465a      	mov	r2, fp
 8003ae6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8003aea:	9800      	ldr	r0, [sp, #0]
 8003aec:	4621      	mov	r1, r4
 8003aee:	f003 fe6b 	bl	80077c8 <udp_sendto>
	pbuf_free(out);
 8003af2:	4620      	mov	r0, r4
 8003af4:	f001 f989 	bl	8004e0a <pbuf_free>

error:
	pbuf_free(p);
 8003af8:	4638      	mov	r0, r7
 8003afa:	f001 f986 	bl	8004e0a <pbuf_free>
}
 8003afe:	b005      	add	sp, #20
 8003b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b04:	20000dec 	.word	0x20000dec
 8003b08:	20000e70 	.word	0x20000e70

08003b0c <dnserv_free>:
	query_proc = qp;
	return ERR_OK;
}

void dnserv_free()
{
 8003b0c:	b510      	push	{r4, lr}
	if (pcb == NULL) return;
 8003b0e:	4c04      	ldr	r4, [pc, #16]	; (8003b20 <dnserv_free+0x14>)
 8003b10:	6820      	ldr	r0, [r4, #0]
 8003b12:	b118      	cbz	r0, 8003b1c <dnserv_free+0x10>
	udp_remove(pcb);
 8003b14:	f003 fe7a 	bl	800780c <udp_remove>
	pcb = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000de8 	.word	0x20000de8

08003b24 <dnserv_init>:
{
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	4604      	mov	r4, r0
 8003b28:	460f      	mov	r7, r1
 8003b2a:	4616      	mov	r6, r2
	udp_init();
 8003b2c:	f003 fcaa 	bl	8007484 <udp_init>
	dnserv_free();
 8003b30:	f7ff ffec 	bl	8003b0c <dnserv_free>
	pcb = udp_new();
 8003b34:	f003 fe80 	bl	8007838 <udp_new>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	; (8003b68 <dnserv_init+0x44>)
 8003b3a:	6028      	str	r0, [r5, #0]
	if (pcb == NULL)
 8003b3c:	b188      	cbz	r0, 8003b62 <dnserv_init+0x3e>
	err = udp_bind(pcb, bind, port);
 8003b3e:	4621      	mov	r1, r4
 8003b40:	463a      	mov	r2, r7
 8003b42:	f003 fd79 	bl	8007638 <udp_bind>
	if (err != ERR_OK)
 8003b46:	4604      	mov	r4, r0
 8003b48:	b118      	cbz	r0, 8003b52 <dnserv_init+0x2e>
		dnserv_free();
 8003b4a:	f7ff ffdf 	bl	8003b0c <dnserv_free>
}
 8003b4e:	4620      	mov	r0, r4
 8003b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udp_recv(pcb, udp_recv_proc, NULL);
 8003b52:	4602      	mov	r2, r0
 8003b54:	4905      	ldr	r1, [pc, #20]	; (8003b6c <dnserv_init+0x48>)
 8003b56:	6828      	ldr	r0, [r5, #0]
 8003b58:	f003 fe54 	bl	8007804 <udp_recv>
	query_proc = qp;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <dnserv_init+0x4c>)
 8003b5e:	601e      	str	r6, [r3, #0]
	return ERR_OK;
 8003b60:	e7f5      	b.n	8003b4e <dnserv_init+0x2a>
		return ERR_MEM;
 8003b62:	f04f 34ff 	mov.w	r4, #4294967295
 8003b66:	e7f2      	b.n	8003b4e <dnserv_init+0x2a>
 8003b68:	20000de8 	.word	0x20000de8
 8003b6c:	080039c9 	.word	0x080039c9
 8003b70:	20000e70 	.word	0x20000e70

08003b74 <lwip_htons>:
 8003b74:	ba40      	rev16	r0, r0
 8003b76:	b280      	uxth	r0, r0
 8003b78:	4770      	bx	lr

08003b7a <lwip_ntohs>:
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
 8003b7a:	ba40      	rev16	r0, r0
}
 8003b7c:	b280      	uxth	r0, r0
 8003b7e:	4770      	bx	lr

08003b80 <lwip_htonl>:
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 8003b80:	ba00      	rev	r0, r0
 8003b82:	4770      	bx	lr

08003b84 <lwip_ntohl>:
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  return lwip_htonl(n);
 8003b84:	f7ff bffc 	b.w	8003b80 <lwip_htonl>

08003b88 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 8003b88:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
 8003b8a:	f001 faf5 	bl	8005178 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003b8e:	f000 fe93 	bl	80048b8 <mem_init>
  memp_init();
 8003b92:	f000 ffff 	bl	8004b94 <memp_init>
  pbuf_init();
  netif_init();
 8003b96:	f001 f87f 	bl	8004c98 <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003b9a:	f003 fc73 	bl	8007484 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003b9e:	f001 faec 	bl	800517a <tcp_init>
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8003ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8003ba6:	f003 bc39 	b.w	800741c <sys_timeouts_init>
	...

08003bac <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8003bac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	4616      	mov	r6, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8003bb6:	2124      	movs	r1, #36	; 0x24
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f001 f94c 	bl	8004e58 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	b388      	cbz	r0, 8003c28 <icmp_send_response.isra.0+0x7c>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8003bc4:	6827      	ldr	r7, [r4, #0]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8003bc6:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	7123      	strb	r3, [r4, #4]
 8003bcc:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8003bce:	71a3      	strb	r3, [r4, #6]
 8003bd0:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8003bd2:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8003bd6:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8003bd8:	463b      	mov	r3, r7
 8003bda:	f104 0208 	add.w	r2, r4, #8
 8003bde:	f107 011c 	add.w	r1, r7, #28
 8003be2:	f853 0b04 	ldr.w	r0, [r3], #4
 8003be6:	f842 0b04 	str.w	r0, [r2], #4
 8003bea:	428b      	cmp	r3, r1
 8003bec:	d1f9      	bne.n	8003be2 <icmp_send_response.isra.0+0x36>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 8003bee:	2600      	movs	r6, #0
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8003bf0:	8969      	ldrh	r1, [r5, #10]
  icmphdr->chksum = 0;
 8003bf2:	70a6      	strb	r6, [r4, #2]
 8003bf4:	70e6      	strb	r6, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 f971 	bl	8003ede <inet_chksum>
  ICMP_STATS_INC(icmp.xmit);
 8003bfc:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <icmp_send_response.isra.0+0x84>)
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8003bfe:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
 8003c00:	f8b2 3060 	ldrh.w	r3, [r2, #96]	; 0x60
 8003c04:	3301      	adds	r3, #1
 8003c06:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 8003c0a:	aa04      	add	r2, sp, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 8003c12:	2301      	movs	r3, #1
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	9600      	str	r6, [sp, #0]
 8003c18:	23ff      	movs	r3, #255	; 0xff
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 fb31 	bl	8004284 <ip_output>
  pbuf_free(q);
 8003c22:	4628      	mov	r0, r5
 8003c24:	f001 f8f1 	bl	8004e0a <pbuf_free>
}
 8003c28:	b004      	add	sp, #16
 8003c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000b0fe 	.word	0x2000b0fe

08003c34 <icmp_input>:
{
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 8003c38:	4d67      	ldr	r5, [pc, #412]	; (8003dd8 <icmp_input+0x1a4>)
  iphdr = (struct ip_hdr *)p->payload;
 8003c3a:	6846      	ldr	r6, [r0, #4]
  ICMP_STATS_INC(icmp.recv);
 8003c3c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8003c40:	3301      	adds	r3, #1
 8003c42:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  hlen = IPH_HL(iphdr) * 4;
 8003c46:	f896 b000 	ldrb.w	fp, [r6]
 8003c4a:	f00b 0b0f 	and.w	fp, fp, #15
 8003c4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8003c52:	f1cb 0a00 	rsb	sl, fp, #0
 8003c56:	fa0f fa8a 	sxth.w	sl, sl
{
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	4688      	mov	r8, r1
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8003c5e:	4651      	mov	r1, sl
{
 8003c60:	4604      	mov	r4, r0
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8003c62:	f001 f8a7 	bl	8004db4 <pbuf_header>
 8003c66:	462f      	mov	r7, r5
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	f040 80ac 	bne.w	8003dc6 <icmp_input+0x192>
 8003c6e:	8923      	ldrh	r3, [r4, #8]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	f240 80a8 	bls.w	8003dc6 <icmp_input+0x192>
  type = *((u8_t *)p->payload);
 8003c76:	6863      	ldr	r3, [r4, #4]
  switch (type) {
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b1ab      	cbz	r3, 8003ca8 <icmp_input+0x74>
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	f040 8097 	bne.w	8003db0 <icmp_input+0x17c>
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8003c82:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8003de0 <icmp_input+0x1ac>
 8003c86:	f8d9 0000 	ldr.w	r0, [r9]
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 8003c8a:	4641      	mov	r1, r8
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8003c8c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8003c90:	9305      	str	r3, [sp, #20]
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 8003c92:	f000 fb1b 	bl	80042cc <ip4_addr_isbroadcast>
 8003c96:	b910      	cbnz	r0, 8003c9e <icmp_input+0x6a>
      if (!accepted) {
 8003c98:	9b05      	ldr	r3, [sp, #20]
 8003c9a:	2be0      	cmp	r3, #224	; 0xe0
 8003c9c:	d10a      	bne.n	8003cb4 <icmp_input+0x80>
        ICMP_STATS_INC(icmp.err);
 8003c9e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  pbuf_free(p);
 8003ca8:	4620      	mov	r0, r4
}
 8003caa:	b007      	add	sp, #28
 8003cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8003cb0:	f001 b8ab 	b.w	8004e0a <pbuf_free>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8003cb4:	8923      	ldrh	r3, [r4, #8]
 8003cb6:	2b07      	cmp	r3, #7
 8003cb8:	f240 8085 	bls.w	8003dc6 <icmp_input+0x192>
    if (inet_chksum_pbuf(p) != 0) {
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f000 f914 	bl	8003eea <inet_chksum_pbuf>
 8003cc2:	b150      	cbz	r0, 8003cda <icmp_input+0xa6>
      pbuf_free(p);
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f001 f8a0 	bl	8004e0a <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
 8003cca:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 8003cd4:	b007      	add	sp, #28
 8003cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8003cda:	2122      	movs	r1, #34	; 0x22
 8003cdc:	4620      	mov	r0, r4
  hlen = IPH_HL(iphdr) * 4;
 8003cde:	fa0f f58b 	sxth.w	r5, fp
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8003ce2:	f001 f867 	bl	8004db4 <pbuf_header>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d052      	beq.n	8003d90 <icmp_input+0x15c>
      if (pbuf_header(p, hlen)) {
 8003cea:	4629      	mov	r1, r5
 8003cec:	4620      	mov	r0, r4
 8003cee:	f001 f861 	bl	8004db4 <pbuf_header>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d153      	bne.n	8003d9e <icmp_input+0x16a>
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	8921      	ldrh	r1, [r4, #8]
 8003cfa:	2002      	movs	r0, #2
 8003cfc:	f001 f8ac 	bl	8004e58 <pbuf_alloc>
      if (r == NULL) {
 8003d00:	4683      	mov	fp, r0
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d04b      	beq.n	8003d9e <icmp_input+0x16a>
      if (pbuf_copy(r, p) != ERR_OK) {
 8003d06:	4621      	mov	r1, r4
 8003d08:	f001 f97b 	bl	8005002 <pbuf_copy>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d146      	bne.n	8003d9e <icmp_input+0x16a>
      if (pbuf_header(r, -hlen)) {
 8003d10:	4651      	mov	r1, sl
 8003d12:	4658      	mov	r0, fp
      iphdr = (struct ip_hdr *)r->payload;
 8003d14:	f8db 6004 	ldr.w	r6, [fp, #4]
      if (pbuf_header(r, -hlen)) {
 8003d18:	f001 f84c 	bl	8004db4 <pbuf_header>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d13e      	bne.n	8003d9e <icmp_input+0x16a>
      pbuf_free(p);
 8003d20:	4620      	mov	r0, r4
 8003d22:	f001 f872 	bl	8004e0a <pbuf_free>
 8003d26:	465c      	mov	r4, fp
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 8003d28:	f8d9 3000 	ldr.w	r3, [r9]
    iecho = (struct icmp_echo_hdr *)p->payload;
 8003d2c:	6862      	ldr	r2, [r4, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 8003d2e:	60f3      	str	r3, [r6, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <icmp_input+0x1a8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6133      	str	r3, [r6, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 8003d36:	2300      	movs	r3, #0
 8003d38:	7013      	strb	r3, [r2, #0]
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8003d3a:	8853      	ldrh	r3, [r2, #2]
 8003d3c:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 8003d40:	428b      	cmp	r3, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 8003d42:	bf8c      	ite	hi
 8003d44:	3309      	addhi	r3, #9
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 8003d46:	3308      	addls	r3, #8
 8003d48:	8053      	strh	r3, [r2, #2]
    IPH_TTL_SET(iphdr, ICMP_TTL);
 8003d4a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    IPH_CHKSUM_SET(iphdr, 0);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	72b3      	strb	r3, [r6, #10]
 8003d52:	72f3      	strb	r3, [r6, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8003d54:	2114      	movs	r1, #20
    IPH_TTL_SET(iphdr, ICMP_TTL);
 8003d56:	f886 9008 	strb.w	r9, [r6, #8]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f000 f8bf 	bl	8003ede <inet_chksum>
    ICMP_STATS_INC(icmp.xmit);
 8003d60:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8003d64:	8170      	strh	r0, [r6, #10]
    ICMP_STATS_INC(icmp.xmit);
 8003d66:	3201      	adds	r2, #1
    if(pbuf_header(p, hlen)) {
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4620      	mov	r0, r4
    ICMP_STATS_INC(icmp.xmit);
 8003d6c:	f8a7 2060 	strh.w	r2, [r7, #96]	; 0x60
    if(pbuf_header(p, hlen)) {
 8003d70:	f001 f820 	bl	8004db4 <pbuf_header>
 8003d74:	4602      	mov	r2, r0
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d196      	bne.n	8003ca8 <icmp_input+0x74>
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003d80:	f8cd 8008 	str.w	r8, [sp, #8]
 8003d84:	464b      	mov	r3, r9
 8003d86:	4916      	ldr	r1, [pc, #88]	; (8003de0 <icmp_input+0x1ac>)
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f000 f9f1 	bl	8004170 <ip_output_if>
 8003d8e:	e78b      	b.n	8003ca8 <icmp_input+0x74>
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8003d90:	f06f 0121 	mvn.w	r1, #33	; 0x21
 8003d94:	4620      	mov	r0, r4
 8003d96:	f001 f80d 	bl	8004db4 <pbuf_header>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d0c4      	beq.n	8003d28 <icmp_input+0xf4>
  pbuf_free(p);
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f001 f833 	bl	8004e0a <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8003da4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003da8:	3301      	adds	r3, #1
 8003daa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  return;
 8003dae:	e791      	b.n	8003cd4 <icmp_input+0xa0>
    ICMP_STATS_INC(icmp.proterr);
 8003db0:	f8b5 3070 	ldrh.w	r3, [r5, #112]	; 0x70
 8003db4:	3301      	adds	r3, #1
 8003db6:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
 8003dba:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
 8003dc4:	e770      	b.n	8003ca8 <icmp_input+0x74>
  pbuf_free(p);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f001 f81f 	bl	8004e0a <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8003dcc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  return;
 8003dd6:	e77d      	b.n	8003cd4 <icmp_input+0xa0>
 8003dd8:	2000b0fe 	.word	0x2000b0fe
 8003ddc:	200089c0 	.word	0x200089c0
 8003de0:	200089c8 	.word	0x200089c8

08003de4 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8003de4:	460a      	mov	r2, r1
 8003de6:	3004      	adds	r0, #4
 8003de8:	2103      	movs	r1, #3
 8003dea:	f7ff bedf 	b.w	8003bac <icmp_send_response.isra.0>

08003dee <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8003dee:	460a      	mov	r2, r1
 8003df0:	3004      	adds	r0, #4
 8003df2:	210b      	movs	r1, #11
 8003df4:	f7ff beda 	b.w	8003bac <icmp_send_response.isra.0>

08003df8 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 8003df8:	b513      	push	{r0, r1, r4, lr}
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
 8003dfa:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8003dfc:	f010 0201 	ands.w	r2, r0, #1
  u16_t *ps, t = 0;
 8003e00:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8003e04:	d01f      	beq.n	8003e46 <lwip_standard_chksum+0x4e>
 8003e06:	4299      	cmp	r1, r3
 8003e08:	dd24      	ble.n	8003e54 <lwip_standard_chksum+0x5c>
    ((u8_t *)&t)[1] = *pb++;
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	7800      	ldrb	r0, [r0, #0]
 8003e0e:	f88d 0007 	strb.w	r0, [sp, #7]
    len--;
 8003e12:	3901      	subs	r1, #1
  u32_t sum = 0;
 8003e14:	2000      	movs	r0, #0
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
 8003e16:	2901      	cmp	r1, #1
 8003e18:	dc17      	bgt.n	8003e4a <lwip_standard_chksum+0x52>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8003e1a:	d102      	bne.n	8003e22 <lwip_standard_chksum+0x2a>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8003e22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003e26:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 8003e28:	b298      	uxth	r0, r3
 8003e2a:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8003e2e:	b298      	uxth	r0, r3
 8003e30:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8003e34:	b122      	cbz	r2, 8003e40 <lwip_standard_chksum+0x48>
    sum = SWAP_BYTES_IN_WORD(sum);
 8003e36:	0203      	lsls	r3, r0, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003e3e:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8003e40:	b280      	uxth	r0, r0
 8003e42:	b002      	add	sp, #8
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	4603      	mov	r3, r0
 8003e48:	e7e4      	b.n	8003e14 <lwip_standard_chksum+0x1c>
    sum += *ps++;
 8003e4a:	f833 4b02 	ldrh.w	r4, [r3], #2
    len -= 2;
 8003e4e:	3902      	subs	r1, #2
    sum += *ps++;
 8003e50:	4420      	add	r0, r4
 8003e52:	e7e0      	b.n	8003e16 <lwip_standard_chksum+0x1e>
  u32_t sum = 0;
 8003e54:	4618      	mov	r0, r3
 8003e56:	e7e4      	b.n	8003e22 <lwip_standard_chksum+0x2a>

08003e58 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
 8003e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
 8003e5c:	2500      	movs	r5, #0
{
 8003e5e:	4606      	mov	r6, r0
 8003e60:	4688      	mov	r8, r1
 8003e62:	4691      	mov	r9, r2
 8003e64:	461f      	mov	r7, r3
  acc = 0;
 8003e66:	462c      	mov	r4, r5
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 8003e68:	bb26      	cbnz	r6, 8003eb4 <inet_chksum_pseudo+0x5c>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8003e6a:	b125      	cbz	r5, 8003e76 <inet_chksum_pseudo+0x1e>
    acc = SWAP_BYTES_IN_WORD(acc);
 8003e6c:	0221      	lsls	r1, r4, #8
 8003e6e:	b289      	uxth	r1, r1
 8003e70:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003e74:	430c      	orrs	r4, r1
  }
  addr = ip4_addr_get_u32(src);
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
 8003e76:	f8d9 2000 	ldr.w	r2, [r9]
  addr = ip4_addr_get_u32(src);
 8003e7a:	f8d8 3000 	ldr.w	r3, [r8]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
 8003e7e:	0c10      	lsrs	r0, r2, #16
 8003e80:	fa10 f082 	uxtah	r0, r0, r2
 8003e84:	fa10 f083 	uxtah	r0, r0, r3
 8003e88:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8003e8c:	4404      	add	r4, r0
  acc += (u32_t)htons((u16_t)proto);
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f7ff fe70 	bl	8003b74 <lwip_htons>
 8003e94:	4404      	add	r4, r0
  acc += (u32_t)htons(proto_len);
 8003e96:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8003e9a:	f7ff fe6b 	bl	8003b74 <lwip_htons>
 8003e9e:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 8003ea0:	b284      	uxth	r4, r0
 8003ea2:	eb04 4410 	add.w	r4, r4, r0, lsr #16
  acc = FOLD_U32T(acc);
 8003ea6:	b2a0      	uxth	r0, r4
 8003ea8:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8003eac:	43c0      	mvns	r0, r0
}
 8003eae:	b280      	uxth	r0, r0
 8003eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003eb4:	8971      	ldrh	r1, [r6, #10]
 8003eb6:	6870      	ldr	r0, [r6, #4]
 8003eb8:	f7ff ff9e 	bl	8003df8 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8003ebc:	8973      	ldrh	r3, [r6, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003ebe:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 8003ec0:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8003ec2:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8003ec4:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8003ec8:	d507      	bpl.n	8003eda <inet_chksum_pseudo+0x82>
      acc = SWAP_BYTES_IN_WORD(acc);
 8003eca:	0223      	lsls	r3, r4, #8
      swapped = 1 - swapped;
 8003ecc:	f1c5 0501 	rsb	r5, r5, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f3c4 2407 	ubfx	r4, r4, #8, #8
      swapped = 1 - swapped;
 8003ed6:	b2ed      	uxtb	r5, r5
      acc = SWAP_BYTES_IN_WORD(acc);
 8003ed8:	431c      	orrs	r4, r3
  for(q = p; q != NULL; q = q->next) {
 8003eda:	6836      	ldr	r6, [r6, #0]
 8003edc:	e7c4      	b.n	8003e68 <inet_chksum_pseudo+0x10>

08003ede <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 8003ede:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
 8003ee0:	f7ff ff8a 	bl	8003df8 <lwip_standard_chksum>
 8003ee4:	43c0      	mvns	r0, r0
}
 8003ee6:	b280      	uxth	r0, r0
 8003ee8:	bd08      	pop	{r3, pc}

08003eea <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8003eea:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
 8003eec:	2500      	movs	r5, #0
{
 8003eee:	4606      	mov	r6, r0
  acc = 0;
 8003ef0:	462c      	mov	r4, r5
  for(q = p; q != NULL; q = q->next) {
 8003ef2:	b946      	cbnz	r6, 8003f06 <inet_chksum_pbuf+0x1c>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8003ef4:	b125      	cbz	r5, 8003f00 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8003ef6:	0223      	lsls	r3, r4, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003efe:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8003f00:	43e0      	mvns	r0, r4
}
 8003f02:	b280      	uxth	r0, r0
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003f06:	8971      	ldrh	r1, [r6, #10]
 8003f08:	6870      	ldr	r0, [r6, #4]
 8003f0a:	f7ff ff75 	bl	8003df8 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8003f0e:	8973      	ldrh	r3, [r6, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003f10:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
 8003f12:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 8003f14:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8003f16:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 8003f1a:	d507      	bpl.n	8003f2c <inet_chksum_pbuf+0x42>
      acc = SWAP_BYTES_IN_WORD(acc);
 8003f1c:	0223      	lsls	r3, r4, #8
      swapped = 1 - swapped;
 8003f1e:	f1c5 0501 	rsb	r5, r5, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f3c4 2407 	ubfx	r4, r4, #8, #8
      swapped = 1 - swapped;
 8003f28:	b2ed      	uxtb	r5, r5
      acc = SWAP_BYTES_IN_WORD(acc);
 8003f2a:	431c      	orrs	r4, r3
  for(q = p; q != NULL; q = q->next) {
 8003f2c:	6836      	ldr	r6, [r6, #0]
 8003f2e:	e7e0      	b.n	8003ef2 <inet_chksum_pbuf+0x8>

08003f30 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <ip_route+0x40>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	b96b      	cbnz	r3, 8003f52 <ip_route+0x22>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 8003f36:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <ip_route+0x44>)
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	b11a      	cbz	r2, 8003f44 <ip_route+0x14>
 8003f3c:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8003f40:	07c9      	lsls	r1, r1, #31
 8003f42:	d412      	bmi.n	8003f6a <ip_route+0x3a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <ip_route+0x48>)
 8003f46:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
 8003f4a:	3201      	adds	r2, #1
 8003f4c:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
 8003f50:	e009      	b.n	8003f66 <ip_route+0x36>
    if (netif_is_up(netif)) {
 8003f52:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003f56:	07d2      	lsls	r2, r2, #31
 8003f58:	d5eb      	bpl.n	8003f32 <ip_route+0x2>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	6802      	ldr	r2, [r0, #0]
 8003f5e:	404a      	eors	r2, r1
 8003f60:	6899      	ldr	r1, [r3, #8]
 8003f62:	420a      	tst	r2, r1
 8003f64:	d1e5      	bne.n	8003f32 <ip_route+0x2>
    snmp_inc_ipoutnoroutes();
    return NULL;
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	4770      	bx	lr
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	e7fb      	b.n	8003f66 <ip_route+0x36>
 8003f6e:	bf00      	nop
 8003f70:	2000b0f4 	.word	0x2000b0f4
 8003f74:	2000b0f8 	.word	0x2000b0f8
 8003f78:	2000b0fe 	.word	0x2000b0fe

08003f7c <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 8003f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
 8003f80:	4e75      	ldr	r6, [pc, #468]	; (8004158 <ip_input+0x1dc>)
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8003f82:	6845      	ldr	r5, [r0, #4]
  IP_STATS_INC(ip.recv);
 8003f84:	f8b6 304a 	ldrh.w	r3, [r6, #74]	; 0x4a
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f8a6 304a 	strh.w	r3, [r6, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 8003f8e:	f895 9000 	ldrb.w	r9, [r5]
 8003f92:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8003f96:	2b04      	cmp	r3, #4
{
 8003f98:	4604      	mov	r4, r0
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	46b0      	mov	r8, r6
  if (IPH_V(iphdr) != 4) {
 8003f9e:	d00f      	beq.n	8003fc0 <ip_input+0x44>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 8003fa0:	f000 ff33 	bl	8004e0a <pbuf_free>
    IP_STATS_INC(ip.err);
 8003fa4:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
 8003fae:	f8b6 304e 	ldrh.w	r3, [r6, #78]	; 0x4e
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
  current_header = NULL;
  ip_addr_set_any(&current_iphdr_src);
  ip_addr_set_any(&current_iphdr_dest);

  return ERR_OK;
}
 8003fb8:	2000      	movs	r0, #0
 8003fba:	b003      	add	sp, #12
 8003fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = ntohs(IPH_LEN(iphdr));
 8003fc0:	8868      	ldrh	r0, [r5, #2]
 8003fc2:	f7ff fdda 	bl	8003b7a <lwip_ntohs>
  iphdr_hlen = IPH_HL(iphdr);
 8003fc6:	f009 090f 	and.w	r9, r9, #15
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8003fca:	8963      	ldrh	r3, [r4, #10]
  iphdr_hlen *= 4;
 8003fcc:	ea4f 0989 	mov.w	r9, r9, lsl #2
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8003fd0:	454b      	cmp	r3, r9
  iphdr_len = ntohs(IPH_LEN(iphdr));
 8003fd2:	4682      	mov	sl, r0
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8003fd4:	d302      	bcc.n	8003fdc <ip_input+0x60>
 8003fd6:	8923      	ldrh	r3, [r4, #8]
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	d20d      	bcs.n	8003ff8 <ip_input+0x7c>
    pbuf_free(p);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f000 ff14 	bl	8004e0a <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8003fe2:	f8b8 3052 	ldrh.w	r3, [r8, #82]	; 0x52
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f8a8 3052 	strh.w	r3, [r8, #82]	; 0x52
      IP_STATS_INC(ip.drop);
 8003fec:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8a8 304e 	strh.w	r3, [r8, #78]	; 0x4e
      return ERR_OK;
 8003ff6:	e7df      	b.n	8003fb8 <ip_input+0x3c>
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff ff6f 	bl	8003ede <inet_chksum>
 8004000:	b140      	cbz	r0, 8004014 <ip_input+0x98>
    pbuf_free(p);
 8004002:	4620      	mov	r0, r4
 8004004:	f000 ff01 	bl	8004e0a <pbuf_free>
    IP_STATS_INC(ip.chkerr);
 8004008:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
 800400c:	3301      	adds	r3, #1
 800400e:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8004012:	e7cc      	b.n	8003fae <ip_input+0x32>
  pbuf_realloc(p, iphdr_len);
 8004014:	4651      	mov	r1, sl
 8004016:	4620      	mov	r0, r4
 8004018:	f000 ffaa 	bl	8004f70 <pbuf_realloc>
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 800401c:	494f      	ldr	r1, [pc, #316]	; (800415c <ip_input+0x1e0>)
 800401e:	692b      	ldr	r3, [r5, #16]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 8004020:	4a4f      	ldr	r2, [pc, #316]	; (8004160 <ip_input+0x1e4>)
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 8004022:	600b      	str	r3, [r1, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 8004024:	68eb      	ldr	r3, [r5, #12]
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4693      	mov	fp, r2
        netif = netif_list;
 800402a:	4a4e      	ldr	r2, [pc, #312]	; (8004164 <ip_input+0x1e8>)
  ip_addr_copy(current_iphdr_src, iphdr->src);
 800402c:	463e      	mov	r6, r7
    int first = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	468a      	mov	sl, r1
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 8004032:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8004036:	07c9      	lsls	r1, r1, #31
 8004038:	d402      	bmi.n	8004040 <ip_input+0xc4>
      if (first) {
 800403a:	bb13      	cbnz	r3, 8004082 <ip_input+0x106>
        netif = netif->next;
 800403c:	6836      	ldr	r6, [r6, #0]
 800403e:	e021      	b.n	8004084 <ip_input+0x108>
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 8004040:	6871      	ldr	r1, [r6, #4]
 8004042:	2900      	cmp	r1, #0
 8004044:	d0f9      	beq.n	800403a <ip_input+0xbe>
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8004046:	f8da 0000 	ldr.w	r0, [sl]
 800404a:	9201      	str	r2, [sp, #4]
 800404c:	4281      	cmp	r1, r0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	d006      	beq.n	8004060 <ip_input+0xe4>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 8004052:	4631      	mov	r1, r6
 8004054:	f000 f93a 	bl	80042cc <ip4_addr_isbroadcast>
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8004058:	9b00      	ldr	r3, [sp, #0]
 800405a:	9a01      	ldr	r2, [sp, #4]
 800405c:	2800      	cmp	r0, #0
 800405e:	d0ec      	beq.n	800403a <ip_input+0xbe>
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 8004060:	f8db 0000 	ldr.w	r0, [fp]
 8004064:	b1f0      	cbz	r0, 80040a4 <ip_input+0x128>
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8004066:	4639      	mov	r1, r7
 8004068:	f000 f930 	bl	80042cc <ip4_addr_isbroadcast>
 800406c:	b928      	cbnz	r0, 800407a <ip_input+0xfe>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 800406e:	f8db 3000 	ldr.w	r3, [fp]
 8004072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8004076:	2be0      	cmp	r3, #224	; 0xe0
 8004078:	d114      	bne.n	80040a4 <ip_input+0x128>
      pbuf_free(p);
 800407a:	4620      	mov	r0, r4
 800407c:	f000 fec5 	bl	8004e0a <pbuf_free>
 8004080:	e7b4      	b.n	8003fec <ip_input+0x70>
        netif = netif_list;
 8004082:	6816      	ldr	r6, [r2, #0]
      if (netif == inp) {
 8004084:	42be      	cmp	r6, r7
        netif = netif->next;
 8004086:	bf08      	it	eq
 8004088:	6836      	ldreq	r6, [r6, #0]
 800408a:	2300      	movs	r3, #0
    } while(netif != NULL);
 800408c:	2e00      	cmp	r6, #0
 800408e:	d1d0      	bne.n	8004032 <ip_input+0xb6>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8004090:	7a6b      	ldrb	r3, [r5, #9]
 8004092:	2b11      	cmp	r3, #17
 8004094:	d1e4      	bne.n	8004060 <ip_input+0xe4>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8004096:	44a9      	add	r9, r5
 8004098:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800409c:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 80040a0:	d1de      	bne.n	8004060 <ip_input+0xe4>
 80040a2:	463e      	mov	r6, r7
  if (netif == NULL) {
 80040a4:	b91e      	cbnz	r6, 80040ae <ip_input+0x132>
    pbuf_free(p);
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 feaf 	bl	8004e0a <pbuf_free>
    return ERR_OK;
 80040ac:	e784      	b.n	8003fb8 <ip_input+0x3c>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80040ae:	88eb      	ldrh	r3, [r5, #6]
 80040b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040b4:	b13b      	cbz	r3, 80040c6 <ip_input+0x14a>
    p = ip_reass(p);
 80040b6:	4620      	mov	r0, r4
 80040b8:	f000 f9c4 	bl	8004444 <ip_reass>
    if (p == NULL) {
 80040bc:	4604      	mov	r4, r0
 80040be:	2800      	cmp	r0, #0
 80040c0:	f43f af7a 	beq.w	8003fb8 <ip_input+0x3c>
    iphdr = (struct ip_hdr *)p->payload;
 80040c4:	6845      	ldr	r5, [r0, #4]
  current_netif = inp;
 80040c6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800416c <ip_input+0x1f0>
  current_header = iphdr;
 80040ca:	4e27      	ldr	r6, [pc, #156]	; (8004168 <ip_input+0x1ec>)
  current_netif = inp;
 80040cc:	f8c9 7000 	str.w	r7, [r9]
  if (raw_input(p, inp) == 0)
 80040d0:	4639      	mov	r1, r7
 80040d2:	4620      	mov	r0, r4
  current_header = iphdr;
 80040d4:	6035      	str	r5, [r6, #0]
  if (raw_input(p, inp) == 0)
 80040d6:	f001 f811 	bl	80050fc <raw_input>
 80040da:	b978      	cbnz	r0, 80040fc <ip_input+0x180>
    switch (IPH_PROTO(iphdr)) {
 80040dc:	7a6b      	ldrb	r3, [r5, #9]
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d015      	beq.n	800410e <ip_input+0x192>
 80040e2:	2b11      	cmp	r3, #17
 80040e4:	d006      	beq.n	80040f4 <ip_input+0x178>
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d116      	bne.n	8004118 <ip_input+0x19c>
      icmp_input(p, inp);
 80040ea:	4639      	mov	r1, r7
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff fda1 	bl	8003c34 <icmp_input>
      break;
 80040f2:	e003      	b.n	80040fc <ip_input+0x180>
      udp_input(p, inp);
 80040f4:	4639      	mov	r1, r7
 80040f6:	4620      	mov	r0, r4
 80040f8:	f003 f9c6 	bl	8007488 <udp_input>
  current_netif = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c9 3000 	str.w	r3, [r9]
  current_header = NULL;
 8004102:	6033      	str	r3, [r6, #0]
  ip_addr_set_any(&current_iphdr_src);
 8004104:	f8cb 3000 	str.w	r3, [fp]
  ip_addr_set_any(&current_iphdr_dest);
 8004108:	f8ca 3000 	str.w	r3, [sl]
  return ERR_OK;
 800410c:	e754      	b.n	8003fb8 <ip_input+0x3c>
      tcp_input(p, inp);
 800410e:	4639      	mov	r1, r7
 8004110:	4620      	mov	r0, r4
 8004112:	f002 f8ff 	bl	8006314 <tcp_input>
      break;
 8004116:	e7f1      	b.n	80040fc <ip_input+0x180>
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 8004118:	4639      	mov	r1, r7
 800411a:	f8da 0000 	ldr.w	r0, [sl]
 800411e:	f000 f8d5 	bl	80042cc <ip4_addr_isbroadcast>
 8004122:	b950      	cbnz	r0, 800413a <ip_input+0x1be>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 8004124:	f8da 3000 	ldr.w	r3, [sl]
 8004128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 800412c:	2be0      	cmp	r3, #224	; 0xe0
 800412e:	d004      	beq.n	800413a <ip_input+0x1be>
        p->payload = iphdr;
 8004130:	6065      	str	r5, [r4, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8004132:	2102      	movs	r1, #2
 8004134:	4620      	mov	r0, r4
 8004136:	f7ff fe55 	bl	8003de4 <icmp_dest_unreach>
      pbuf_free(p);
 800413a:	4620      	mov	r0, r4
 800413c:	f000 fe65 	bl	8004e0a <pbuf_free>
      IP_STATS_INC(ip.proterr);
 8004140:	f8b8 3058 	ldrh.w	r3, [r8, #88]	; 0x58
 8004144:	3301      	adds	r3, #1
 8004146:	f8a8 3058 	strh.w	r3, [r8, #88]	; 0x58
      IP_STATS_INC(ip.drop);
 800414a:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
 800414e:	3301      	adds	r3, #1
 8004150:	f8a8 304e 	strh.w	r3, [r8, #78]	; 0x4e
 8004154:	e7d2      	b.n	80040fc <ip_input+0x180>
 8004156:	bf00      	nop
 8004158:	2000b0fe 	.word	0x2000b0fe
 800415c:	200089c8 	.word	0x200089c8
 8004160:	200089c0 	.word	0x200089c0
 8004164:	2000b0f4 	.word	0x2000b0f4
 8004168:	200089cc 	.word	0x200089cc
 800416c:	200089c4 	.word	0x200089c4

08004170 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	b085      	sub	sp, #20
 8004176:	461c      	mov	r4, r3
 8004178:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800417c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	4606      	mov	r6, r0
 8004184:	468a      	mov	sl, r1
 8004186:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004188:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004280 <ip_output_if+0x110>
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 800418c:	4615      	mov	r5, r2
 800418e:	2a00      	cmp	r2, #0
 8004190:	d067      	beq.n	8004262 <ip_output_if+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8004192:	2114      	movs	r1, #20
 8004194:	f000 fe0e 	bl	8004db4 <pbuf_header>
 8004198:	9b01      	ldr	r3, [sp, #4]
 800419a:	b148      	cbz	r0, 80041b0 <ip_output_if+0x40>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800419c:	f8b8 305c 	ldrh.w	r3, [r8, #92]	; 0x5c
 80041a0:	3301      	adds	r3, #1
 80041a2:	f8a8 305c 	strh.w	r3, [r8, #92]	; 0x5c
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 80041a6:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
}
 80041aa:	b005      	add	sp, #20
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iphdr = (struct ip_hdr *)p->payload;
 80041b0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80041b4:	9001      	str	r0, [sp, #4]
    IPH_TTL_SET(iphdr, ttl);
 80041b6:	f889 4008 	strb.w	r4, [r9, #8]
    IPH_PROTO_SET(iphdr, proto);
 80041ba:	f889 3009 	strb.w	r3, [r9, #9]
    ip_addr_copy(iphdr->dest, *dest);
 80041be:	6828      	ldr	r0, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 80041c0:	f889 b001 	strb.w	fp, [r9, #1]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80041c4:	2145      	movs	r1, #69	; 0x45
    chk_sum += LWIP_MAKE_U16(proto, ttl);
 80041c6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 80041ca:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 80041ce:	ea4b 0b01 	orr.w	fp, fp, r1
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80041d2:	fa14 f480 	uxtah	r4, r4, r0
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80041d6:	f889 1000 	strb.w	r1, [r9]
 80041da:	445c      	add	r4, fp
    ip_addr_copy(iphdr->dest, *dest);
 80041dc:	f8c9 0010 	str.w	r0, [r9, #16]
 80041e0:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 80041e4:	8930      	ldrh	r0, [r6, #8]
 80041e6:	f7ff fcc5 	bl	8003b74 <lwip_htons>
    IPH_ID_SET(iphdr, htons(ip_id));
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <ip_output_if+0x10c>)
    IPH_OFFSET_SET(iphdr, 0);
 80041ec:	9a01      	ldr	r2, [sp, #4]
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 80041ee:	f8a9 0002 	strh.w	r0, [r9, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80041f2:	f889 2006 	strb.w	r2, [r9, #6]
 80041f6:	f889 2007 	strb.w	r2, [r9, #7]
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 80041fa:	4683      	mov	fp, r0
    IPH_ID_SET(iphdr, htons(ip_id));
 80041fc:	8818      	ldrh	r0, [r3, #0]
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	f7ff fcb8 	bl	8003b74 <lwip_htons>
    ++ip_id;
 8004204:	9b01      	ldr	r3, [sp, #4]
    IPH_ID_SET(iphdr, htons(ip_id));
 8004206:	f8a9 0004 	strh.w	r0, [r9, #4]
    ++ip_id;
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	3201      	adds	r2, #1
 800420e:	801a      	strh	r2, [r3, #0]
    if (ip_addr_isany(src)) {
 8004210:	f1ba 0f00 	cmp.w	sl, #0
 8004214:	d002      	beq.n	800421c <ip_output_if+0xac>
 8004216:	f8da 3000 	ldr.w	r3, [sl]
 800421a:	b903      	cbnz	r3, 800421e <ip_output_if+0xae>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 800421c:	687b      	ldr	r3, [r7, #4]
      ip_addr_copy(iphdr->src, *src);
 800421e:	f8c9 300c 	str.w	r3, [r9, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8004222:	f8d9 300c 	ldr.w	r3, [r9, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8004226:	fa14 f483 	uxtah	r4, r4, r3
 800422a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800422e:	445c      	add	r4, fp
 8004230:	4420      	add	r0, r4
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8004232:	b283      	uxth	r3, r0
 8004234:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8004238:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    iphdr->_chksum = chk_sum; /* network order */
 800423c:	43c0      	mvns	r0, r0
 800423e:	f8a9 000a 	strh.w	r0, [r9, #10]
  IP_STATS_INC(ip.xmit);
 8004242:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8004246:	3301      	adds	r3, #1
 8004248:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800424c:	8c3b      	ldrh	r3, [r7, #32]
 800424e:	b173      	cbz	r3, 800426e <ip_output_if+0xfe>
 8004250:	8932      	ldrh	r2, [r6, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90b      	bls.n	800426e <ip_output_if+0xfe>
    return ip_frag(p, netif, dest);
 8004256:	462a      	mov	r2, r5
 8004258:	4639      	mov	r1, r7
 800425a:	4630      	mov	r0, r6
 800425c:	f000 fa6e 	bl	800473c <ip_frag>
 8004260:	e7a3      	b.n	80041aa <ip_output_if+0x3a>
    ip_addr_copy(dest_addr, iphdr->dest);
 8004262:	6843      	ldr	r3, [r0, #4]
 8004264:	ad04      	add	r5, sp, #16
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f845 3d04 	str.w	r3, [r5, #-4]!
 800426c:	e7e9      	b.n	8004242 <ip_output_if+0xd2>
  return netif->output(netif, p, dest);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	462a      	mov	r2, r5
 8004272:	4631      	mov	r1, r6
 8004274:	4638      	mov	r0, r7
 8004276:	4798      	blx	r3
 8004278:	e797      	b.n	80041aa <ip_output_if+0x3a>
 800427a:	bf00      	nop
 800427c:	20000e74 	.word	0x20000e74
 8004280:	2000b0fe 	.word	0x2000b0fe

08004284 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004286:	4605      	mov	r5, r0
 8004288:	b085      	sub	sp, #20

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 800428a:	4610      	mov	r0, r2
{
 800428c:	460e      	mov	r6, r1
 800428e:	4614      	mov	r4, r2
 8004290:	461f      	mov	r7, r3
  if ((netif = ip_route(dest)) == NULL) {
 8004292:	f7ff fe4d 	bl	8003f30 <ip_route>
 8004296:	b948      	cbnz	r0, 80042ac <ip_output+0x28>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <ip_output+0x44>)
 800429a:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 800429e:	3301      	adds	r3, #1
 80042a0:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    return ERR_RTE;
 80042a4:	f06f 0003 	mvn.w	r0, #3
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
}
 80042a8:	b005      	add	sp, #20
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 80042ac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	4622      	mov	r2, r4
 80042bc:	463b      	mov	r3, r7
 80042be:	4631      	mov	r1, r6
 80042c0:	4628      	mov	r0, r5
 80042c2:	f7ff ff55 	bl	8004170 <ip_output_if>
 80042c6:	e7ef      	b.n	80042a8 <ip_output+0x24>
 80042c8:	2000b0fe 	.word	0x2000b0fe

080042cc <ip4_addr_isbroadcast>:
{
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80042cc:	1e43      	subs	r3, r0, #1
 80042ce:	3303      	adds	r3, #3
 80042d0:	d811      	bhi.n	80042f6 <ip4_addr_isbroadcast+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80042d2:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80042d6:	f013 0302 	ands.w	r3, r3, #2
 80042da:	d00e      	beq.n	80042fa <ip4_addr_isbroadcast+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 80042dc:	684a      	ldr	r2, [r1, #4]
 80042de:	4290      	cmp	r0, r2
 80042e0:	d00b      	beq.n	80042fa <ip4_addr_isbroadcast+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 80042e2:	688b      	ldr	r3, [r1, #8]
 80042e4:	4042      	eors	r2, r0
 80042e6:	421a      	tst	r2, r3
 80042e8:	d107      	bne.n	80042fa <ip4_addr_isbroadcast+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80042ea:	43db      	mvns	r3, r3
 80042ec:	4383      	bics	r3, r0
    return 1;
 80042ee:	bf0c      	ite	eq
 80042f0:	2001      	moveq	r0, #1
 80042f2:	2000      	movne	r0, #0
 80042f4:	4770      	bx	lr
 80042f6:	2001      	movs	r0, #1
 80042f8:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80042fa:	2000      	movs	r0, #0
  }
}
 80042fc:	4770      	bx	lr

080042fe <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80042fe:	b510      	push	{r4, lr}
 8004300:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8004302:	6940      	ldr	r0, [r0, #20]
 8004304:	b108      	cbz	r0, 800430a <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
 8004306:	f000 fd80 	bl	8004e0a <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800430a:	4621      	mov	r1, r4
 800430c:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8004312:	f000 bcab 	b.w	8004c6c <memp_free>
	...

08004318 <ip_reass_free_complete_datagram>:
{
 8004318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800431c:	6846      	ldr	r6, [r0, #4]
 800431e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8004320:	889a      	ldrh	r2, [r3, #4]
{
 8004322:	4604      	mov	r4, r0
 8004324:	460f      	mov	r7, r1
  if (iprh->start == 0) {
 8004326:	bb62      	cbnz	r2, 8004382 <ip_reass_free_complete_datagram+0x6a>
    ipr->p = iprh->next_pbuf;
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	6042      	str	r2, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800432c:	f100 011c 	add.w	r1, r0, #28
 8004330:	f100 0208 	add.w	r2, r0, #8
 8004334:	f852 0b04 	ldr.w	r0, [r2], #4
 8004338:	f843 0b04 	str.w	r0, [r3], #4
 800433c:	428a      	cmp	r2, r1
 800433e:	d1f9      	bne.n	8004334 <ip_reass_free_complete_datagram+0x1c>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8004340:	2101      	movs	r1, #1
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff fd53 	bl	8003dee <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8004348:	4630      	mov	r0, r6
 800434a:	f000 fe37 	bl	8004fbc <pbuf_clen>
    pbufs_freed += clen;
 800434e:	b285      	uxth	r5, r0
    pbuf_free(p);
 8004350:	4630      	mov	r0, r6
 8004352:	f000 fd5a 	bl	8004e0a <pbuf_free>
  p = ipr->p;
 8004356:	6866      	ldr	r6, [r4, #4]
  while (p != NULL) {
 8004358:	b9ae      	cbnz	r6, 8004386 <ip_reass_free_complete_datagram+0x6e>
  if (reassdatagrams == ipr) {
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <ip_reass_free_complete_datagram+0x88>)
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	429c      	cmp	r4, r3
 8004360:	6823      	ldr	r3, [r4, #0]
    prev->next = ipr->next;
 8004362:	bf18      	it	ne
 8004364:	603b      	strne	r3, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8004366:	4621      	mov	r1, r4
 8004368:	f04f 0005 	mov.w	r0, #5
    reassdatagrams = ipr->next;
 800436c:	bf08      	it	eq
 800436e:	6013      	streq	r3, [r2, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8004370:	f000 fc7c 	bl	8004c6c <memp_free>
  ip_reass_pbufcount -= pbufs_freed;
 8004374:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <ip_reass_free_complete_datagram+0x8c>)
 8004376:	8813      	ldrh	r3, [r2, #0]
 8004378:	1b5b      	subs	r3, r3, r5
 800437a:	8013      	strh	r3, [r2, #0]
}
 800437c:	4628      	mov	r0, r5
 800437e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t pbufs_freed = 0;
 8004382:	2500      	movs	r5, #0
 8004384:	e7e7      	b.n	8004356 <ip_reass_free_complete_datagram+0x3e>
    iprh = (struct ip_reass_helper *)p->payload;
 8004386:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8004388:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 800438a:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 800438e:	f000 fe15 	bl	8004fbc <pbuf_clen>
    pbufs_freed += clen;
 8004392:	4405      	add	r5, r0
    pbuf_free(pcur);
 8004394:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8004396:	b2ad      	uxth	r5, r5
    pbuf_free(pcur);
 8004398:	f000 fd37 	bl	8004e0a <pbuf_free>
    p = iprh->next_pbuf;
 800439c:	4646      	mov	r6, r8
 800439e:	e7db      	b.n	8004358 <ip_reass_free_complete_datagram+0x40>
 80043a0:	20000e78 	.word	0x20000e78
 80043a4:	20000e76 	.word	0x20000e76

080043a8 <ip_reass_remove_oldest_datagram>:
{
 80043a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 80043ac:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8004418 <ip_reass_remove_oldest_datagram+0x70>
{
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80043b4:	2500      	movs	r5, #0
    other_datagrams = 0;
 80043b6:	2400      	movs	r4, #0
    r = reassdatagrams;
 80043b8:	f8d8 3000 	ldr.w	r3, [r8]
    prev = NULL;
 80043bc:	4621      	mov	r1, r4
    oldest = NULL;
 80043be:	4620      	mov	r0, r4
    while (r != NULL) {
 80043c0:	b953      	cbnz	r3, 80043d8 <ip_reass_remove_oldest_datagram+0x30>
    if (oldest != NULL) {
 80043c2:	b110      	cbz	r0, 80043ca <ip_reass_remove_oldest_datagram+0x22>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 80043c4:	f7ff ffa8 	bl	8004318 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80043c8:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80043ca:	42bd      	cmp	r5, r7
 80043cc:	da01      	bge.n	80043d2 <ip_reass_remove_oldest_datagram+0x2a>
 80043ce:	2c01      	cmp	r4, #1
 80043d0:	dcf1      	bgt.n	80043b6 <ip_reass_remove_oldest_datagram+0xe>
}
 80043d2:	4628      	mov	r0, r5
 80043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80043d8:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	4572      	cmp	r2, lr
 80043e0:	d109      	bne.n	80043f6 <ip_reass_remove_oldest_datagram+0x4e>
 80043e2:	f8d6 e010 	ldr.w	lr, [r6, #16]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	4572      	cmp	r2, lr
 80043ea:	d104      	bne.n	80043f6 <ip_reass_remove_oldest_datagram+0x4e>
 80043ec:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80043f0:	88b2      	ldrh	r2, [r6, #4]
 80043f2:	4596      	cmp	lr, r2
 80043f4:	d007      	beq.n	8004406 <ip_reass_remove_oldest_datagram+0x5e>
        other_datagrams++;
 80043f6:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80043f8:	b158      	cbz	r0, 8004412 <ip_reass_remove_oldest_datagram+0x6a>
        } else if (r->timer <= oldest->timer) {
 80043fa:	f893 e01f 	ldrb.w	lr, [r3, #31]
 80043fe:	7fc2      	ldrb	r2, [r0, #31]
 8004400:	4596      	cmp	lr, r2
 8004402:	bf98      	it	ls
 8004404:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	2a00      	cmp	r2, #0
 800440a:	bf18      	it	ne
 800440c:	4619      	movne	r1, r3
 800440e:	4613      	mov	r3, r2
 8004410:	e7d6      	b.n	80043c0 <ip_reass_remove_oldest_datagram+0x18>
 8004412:	4618      	mov	r0, r3
 8004414:	e7f7      	b.n	8004406 <ip_reass_remove_oldest_datagram+0x5e>
 8004416:	bf00      	nop
 8004418:	20000e78 	.word	0x20000e78

0800441c <ip_reass_tmr>:
{
 800441c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <ip_reass_tmr+0x24>)
 8004420:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8004422:	2400      	movs	r4, #0
  while (r != NULL) {
 8004424:	b900      	cbnz	r0, 8004428 <ip_reass_tmr+0xc>
}
 8004426:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8004428:	7fc3      	ldrb	r3, [r0, #31]
 800442a:	6805      	ldr	r5, [r0, #0]
 800442c:	b123      	cbz	r3, 8004438 <ip_reass_tmr+0x1c>
      r->timer--;
 800442e:	3b01      	subs	r3, #1
 8004430:	77c3      	strb	r3, [r0, #31]
 8004432:	4604      	mov	r4, r0
      r = r->next;
 8004434:	4628      	mov	r0, r5
 8004436:	e7f5      	b.n	8004424 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8004438:	4621      	mov	r1, r4
 800443a:	f7ff ff6d 	bl	8004318 <ip_reass_free_complete_datagram>
 800443e:	e7f9      	b.n	8004434 <ip_reass_tmr+0x18>
 8004440:	20000e78 	.word	0x20000e78

08004444 <ip_reass>:
  IPFRAG_STATS_INC(ip_frag.recv);
 8004444:	4aba      	ldr	r2, [pc, #744]	; (8004730 <ip_reass+0x2ec>)
{
 8004446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 800444a:	8e53      	ldrh	r3, [r2, #50]	; 0x32
  fraghdr = (struct ip_hdr*)p->payload;
 800444c:	6844      	ldr	r4, [r0, #4]
  IPFRAG_STATS_INC(ip_frag.recv);
 800444e:	3301      	adds	r3, #1
 8004450:	8653      	strh	r3, [r2, #50]	; 0x32
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8004452:	7823      	ldrb	r3, [r4, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	2b05      	cmp	r3, #5
{
 800445a:	b085      	sub	sp, #20
 800445c:	4605      	mov	r5, r0
 800445e:	4692      	mov	sl, r2
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8004460:	d00a      	beq.n	8004478 <ip_reass+0x34>
    IPFRAG_STATS_INC(ip_frag.err);
 8004462:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004466:	3301      	adds	r3, #1
 8004468:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  IPFRAG_STATS_INC(ip_frag.drop);
 800446c:	f8ba 3036 	ldrh.w	r3, [sl, #54]	; 0x36
 8004470:	3301      	adds	r3, #1
 8004472:	f8aa 3036 	strh.w	r3, [sl, #54]	; 0x36
 8004476:	e147      	b.n	8004708 <ip_reass+0x2c4>
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004478:	88e0      	ldrh	r0, [r4, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800447a:	4eae      	ldr	r6, [pc, #696]	; (8004734 <ip_reass+0x2f0>)
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800447c:	f7ff fb7d 	bl	8003b7a <lwip_ntohs>
 8004480:	9002      	str	r0, [sp, #8]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004482:	8860      	ldrh	r0, [r4, #2]
 8004484:	f7ff fb79 	bl	8003b7a <lwip_ntohs>
 8004488:	7823      	ldrb	r3, [r4, #0]
 800448a:	9303      	str	r3, [sp, #12]
 800448c:	4683      	mov	fp, r0
  clen = pbuf_clen(p);
 800448e:	4628      	mov	r0, r5
 8004490:	f000 fd94 	bl	8004fbc <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004494:	8833      	ldrh	r3, [r6, #0]
 8004496:	4403      	add	r3, r0
 8004498:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800449a:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800449c:	dd0e      	ble.n	80044bc <ip_reass+0x78>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800449e:	4601      	mov	r1, r0
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff ff81 	bl	80043a8 <ip_reass_remove_oldest_datagram>
 80044a6:	b118      	cbz	r0, 80044b0 <ip_reass+0x6c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80044a8:	8833      	ldrh	r3, [r6, #0]
 80044aa:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80044ac:	2b0a      	cmp	r3, #10
 80044ae:	dd05      	ble.n	80044bc <ip_reass+0x78>
      IPFRAG_STATS_INC(ip_frag.memerr);
 80044b0:	f8ba 303c 	ldrh.w	r3, [sl, #60]	; 0x3c
 80044b4:	3301      	adds	r3, #1
 80044b6:	f8aa 303c 	strh.w	r3, [sl, #60]	; 0x3c
 80044ba:	e7d7      	b.n	800446c <ip_reass+0x28>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80044bc:	4f9e      	ldr	r7, [pc, #632]	; (8004738 <ip_reass+0x2f4>)
  struct ip_reassdata *ipr_prev = NULL;
 80044be:	2300      	movs	r3, #0
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80044c0:	f8d7 9000 	ldr.w	r9, [r7]
  struct ip_reassdata *ipr_prev = NULL;
 80044c4:	9301      	str	r3, [sp, #4]
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80044c6:	f1b9 0f00 	cmp.w	r9, #0
 80044ca:	d169      	bne.n	80045a0 <ip_reass+0x15c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80044cc:	2005      	movs	r0, #5
 80044ce:	f000 fba3 	bl	8004c18 <memp_malloc>
  if (ipr == NULL) {
 80044d2:	4681      	mov	r9, r0
 80044d4:	b958      	cbnz	r0, 80044ee <ip_reass+0xaa>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80044d6:	4641      	mov	r1, r8
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff ff65 	bl	80043a8 <ip_reass_remove_oldest_datagram>
 80044de:	4580      	cmp	r8, r0
 80044e0:	dce6      	bgt.n	80044b0 <ip_reass+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80044e2:	2005      	movs	r0, #5
 80044e4:	f000 fb98 	bl	8004c18 <memp_malloc>
    if (ipr == NULL)
 80044e8:	4681      	mov	r9, r0
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0e0      	beq.n	80044b0 <ip_reass+0x6c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80044ee:	2220      	movs	r2, #32
 80044f0:	2100      	movs	r1, #0
 80044f2:	4648      	mov	r0, r9
 80044f4:	f003 fd58 	bl	8007fa8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80044f8:	2203      	movs	r2, #3
 80044fa:	f889 201f 	strb.w	r2, [r9, #31]
  ipr->next = reassdatagrams;
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
 8004504:	f8c7 9000 	str.w	r9, [r7]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8004508:	4622      	mov	r2, r4
 800450a:	f109 0108 	add.w	r1, r9, #8
 800450e:	f104 0014 	add.w	r0, r4, #20
 8004512:	f852 eb04 	ldr.w	lr, [r2], #4
 8004516:	f841 eb04 	str.w	lr, [r1], #4
 800451a:	4282      	cmp	r2, r0
 800451c:	d1f9      	bne.n	8004512 <ip_reass+0xce>
  ip_reass_pbufcount += clen;
 800451e:	8832      	ldrh	r2, [r6, #0]
 8004520:	4490      	add	r8, r2
 8004522:	f8a6 8000 	strh.w	r8, [r6]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 8004526:	88e2      	ldrh	r2, [r4, #6]
 8004528:	0693      	lsls	r3, r2, #26
 800452a:	d40f      	bmi.n	800454c <ip_reass+0x108>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800452c:	f899 201e 	ldrb.w	r2, [r9, #30]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004530:	9b03      	ldr	r3, [sp, #12]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	f889 201e 	strb.w	r2, [r9, #30]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800453a:	f003 020f 	and.w	r2, r3, #15
    ipr->datagram_len = offset + len;
 800453e:	9b02      	ldr	r3, [sp, #8]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004540:	ebab 0b82 	sub.w	fp, fp, r2, lsl #2
    ipr->datagram_len = offset + len;
 8004544:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8004548:	f8a9 a01c 	strh.w	sl, [r9, #28]
  fraghdr = (struct ip_hdr*)new_p->payload; 
 800454c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004550:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8004554:	f7ff fb11 	bl	8003b7a <lwip_ntohs>
 8004558:	f898 4000 	ldrb.w	r4, [r8]
 800455c:	f004 040f 	and.w	r4, r4, #15
 8004560:	eba0 0484 	sub.w	r4, r0, r4, lsl #2
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004564:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 8004568:	f7ff fb07 	bl	8003b7a <lwip_ntohs>
 800456c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004570:	00c0      	lsls	r0, r0, #3
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004572:	b2a4      	uxth	r4, r4
  iprh = (struct ip_reass_helper*)new_p->payload;
 8004574:	6869      	ldr	r1, [r5, #4]
  for (q = ipr->p; q != NULL;) {
 8004576:	f8d9 c004 	ldr.w	ip, [r9, #4]
  iprh->start = offset;
 800457a:	8088      	strh	r0, [r1, #4]
  iprh->end = offset + len;
 800457c:	4404      	add	r4, r0
  iprh->next_pbuf = NULL;
 800457e:	2200      	movs	r2, #0
  iprh->end = offset + len;
 8004580:	b2a4      	uxth	r4, r4
  iprh->next_pbuf = NULL;
 8004582:	700a      	strb	r2, [r1, #0]
 8004584:	704a      	strb	r2, [r1, #1]
 8004586:	708a      	strb	r2, [r1, #2]
 8004588:	70ca      	strb	r2, [r1, #3]
  iprh->end = offset + len;
 800458a:	80cc      	strh	r4, [r1, #6]
  int valid = 1;
 800458c:	2301      	movs	r3, #1
  for (q = ipr->p; q != NULL;) {
 800458e:	f1bc 0f00 	cmp.w	ip, #0
 8004592:	d139      	bne.n	8004608 <ip_reass+0x1c4>
    if (iprh_prev != NULL) {
 8004594:	2a00      	cmp	r2, #0
 8004596:	f040 80a3 	bne.w	80046e0 <ip_reass+0x29c>
      ipr->p = new_p;
 800459a:	f8c9 5004 	str.w	r5, [r9, #4]
 800459e:	e044      	b.n	800462a <ip_reass+0x1e6>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80045a0:	68e1      	ldr	r1, [r4, #12]
 80045a2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80045a6:	4288      	cmp	r0, r1
 80045a8:	d129      	bne.n	80045fe <ip_reass+0x1ba>
 80045aa:	6921      	ldr	r1, [r4, #16]
 80045ac:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80045b0:	4288      	cmp	r0, r1
 80045b2:	d124      	bne.n	80045fe <ip_reass+0x1ba>
 80045b4:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 80045b8:	88a1      	ldrh	r1, [r4, #4]
 80045ba:	4288      	cmp	r0, r1
 80045bc:	d11f      	bne.n	80045fe <ip_reass+0x1ba>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 80045be:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
 80045c2:	3101      	adds	r1, #1
 80045c4:	f8aa 1046 	strh.w	r1, [sl, #70]	; 0x46
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 80045c8:	88e0      	ldrh	r0, [r4, #6]
 80045ca:	f7ff fad6 	bl	8003b7a <lwip_ntohs>
 80045ce:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d1a3      	bne.n	800451e <ip_reass+0xda>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80045d6:	f8b9 000e 	ldrh.w	r0, [r9, #14]
 80045da:	f7ff face 	bl	8003b7a <lwip_ntohs>
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 80045de:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d09b      	beq.n	800451e <ip_reass+0xda>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80045e6:	4622      	mov	r2, r4
 80045e8:	f109 0108 	add.w	r1, r9, #8
 80045ec:	f104 0014 	add.w	r0, r4, #20
 80045f0:	f852 eb04 	ldr.w	lr, [r2], #4
 80045f4:	f841 eb04 	str.w	lr, [r1], #4
 80045f8:	4282      	cmp	r2, r0
 80045fa:	d1f9      	bne.n	80045f0 <ip_reass+0x1ac>
 80045fc:	e78f      	b.n	800451e <ip_reass+0xda>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80045fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8004602:	f8d9 9000 	ldr.w	r9, [r9]
 8004606:	e75e      	b.n	80044c6 <ip_reass+0x82>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8004608:	f8dc 8004 	ldr.w	r8, [ip, #4]
    if (iprh->start < iprh_tmp->start) {
 800460c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 8004610:	4550      	cmp	r0, sl
 8004612:	d257      	bcs.n	80046c4 <ip_reass+0x280>
      iprh->next_pbuf = q;
 8004614:	f8c1 c000 	str.w	ip, [r1]
      if (iprh_prev != NULL) {
 8004618:	2a00      	cmp	r2, #0
 800461a:	d0be      	beq.n	800459a <ip_reass+0x156>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800461c:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8004620:	4584      	cmp	ip, r0
 8004622:	d86b      	bhi.n	80046fc <ip_reass+0x2b8>
 8004624:	4554      	cmp	r4, sl
 8004626:	d869      	bhi.n	80046fc <ip_reass+0x2b8>
        iprh_prev->next_pbuf = new_p;
 8004628:	6015      	str	r5, [r2, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 800462a:	f899 201e 	ldrb.w	r2, [r9, #30]
 800462e:	f012 0401 	ands.w	r4, r2, #1
 8004632:	d043      	beq.n	80046bc <ip_reass+0x278>
    if (valid) {
 8004634:	2b00      	cmp	r3, #0
 8004636:	d06a      	beq.n	800470e <ip_reass+0x2ca>
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 8004638:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800463c:	6854      	ldr	r4, [r2, #4]
 800463e:	88a2      	ldrh	r2, [r4, #4]
 8004640:	2a00      	cmp	r2, #0
 8004642:	d164      	bne.n	800470e <ip_reass+0x2ca>
        q = iprh->next_pbuf;
 8004644:	680a      	ldr	r2, [r1, #0]
        while (q != NULL) {
 8004646:	2a00      	cmp	r2, #0
 8004648:	d150      	bne.n	80046ec <ip_reass+0x2a8>
    ipr->datagram_len += IP_HLEN;
 800464a:	f8b9 201c 	ldrh.w	r2, [r9, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800464e:	6825      	ldr	r5, [r4, #0]
    ipr->datagram_len += IP_HLEN;
 8004650:	3214      	adds	r2, #20
 8004652:	f8a9 201c 	strh.w	r2, [r9, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8004656:	4621      	mov	r1, r4
 8004658:	f109 0208 	add.w	r2, r9, #8
 800465c:	f109 001c 	add.w	r0, r9, #28
 8004660:	f852 eb04 	ldr.w	lr, [r2], #4
 8004664:	f841 eb04 	str.w	lr, [r1], #4
 8004668:	4282      	cmp	r2, r0
 800466a:	d1f9      	bne.n	8004660 <ip_reass+0x21c>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 800466c:	f8b9 001c 	ldrh.w	r0, [r9, #28]
 8004670:	f7ff fa80 	bl	8003b74 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8004674:	2200      	movs	r2, #0
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 8004676:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8004678:	71a2      	strb	r2, [r4, #6]
 800467a:	71e2      	strb	r2, [r4, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800467c:	72a2      	strb	r2, [r4, #10]
 800467e:	72e2      	strb	r2, [r4, #11]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8004680:	4620      	mov	r0, r4
 8004682:	2114      	movs	r1, #20
 8004684:	f7ff fc2b 	bl	8003ede <inet_chksum>
 8004688:	8160      	strh	r0, [r4, #10]
    p = ipr->p;
 800468a:	f8d9 4004 	ldr.w	r4, [r9, #4]
    while(r != NULL) {
 800468e:	2d00      	cmp	r5, #0
 8004690:	d13f      	bne.n	8004712 <ip_reass+0x2ce>
  if (reassdatagrams == ipr) {
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	4591      	cmp	r9, r2
    prev->next = ipr->next;
 8004696:	bf18      	it	ne
 8004698:	9b01      	ldrne	r3, [sp, #4]
 800469a:	f8d9 2000 	ldr.w	r2, [r9]
 800469e:	bf18      	it	ne
 80046a0:	601a      	strne	r2, [r3, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80046a2:	4649      	mov	r1, r9
 80046a4:	f04f 0005 	mov.w	r0, #5
    reassdatagrams = ipr->next;
 80046a8:	bf08      	it	eq
 80046aa:	603a      	streq	r2, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80046ac:	f000 fade 	bl	8004c6c <memp_free>
    ip_reass_pbufcount -= pbuf_clen(p);
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 fc83 	bl	8004fbc <pbuf_clen>
 80046b6:	8833      	ldrh	r3, [r6, #0]
 80046b8:	1a18      	subs	r0, r3, r0
 80046ba:	8030      	strh	r0, [r6, #0]
}
 80046bc:	4620      	mov	r0, r4
 80046be:	b005      	add	sp, #20
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(iprh->start == iprh_tmp->start) {
 80046c4:	d01a      	beq.n	80046fc <ip_reass+0x2b8>
    } else if(iprh->start < iprh_tmp->end) {
 80046c6:	f8b8 c006 	ldrh.w	ip, [r8, #6]
 80046ca:	4584      	cmp	ip, r0
 80046cc:	d816      	bhi.n	80046fc <ip_reass+0x2b8>
      if (iprh_prev != NULL) {
 80046ce:	b11a      	cbz	r2, 80046d8 <ip_reass+0x294>
        if (iprh_prev->end != iprh_tmp->start) {
 80046d0:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80046d2:	4552      	cmp	r2, sl
 80046d4:	bf18      	it	ne
 80046d6:	2300      	movne	r3, #0
    q = iprh_tmp->next_pbuf;
 80046d8:	f8d8 c000 	ldr.w	ip, [r8]
 80046dc:	4642      	mov	r2, r8
 80046de:	e756      	b.n	800458e <ip_reass+0x14a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80046e0:	88d4      	ldrh	r4, [r2, #6]
      iprh_prev->next_pbuf = new_p;
 80046e2:	6015      	str	r5, [r2, #0]
        valid = 0;
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	bf18      	it	ne
 80046e8:	2300      	movne	r3, #0
 80046ea:	e79e      	b.n	800462a <ip_reass+0x1e6>
          iprh = (struct ip_reass_helper*)q->payload;
 80046ec:	6850      	ldr	r0, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80046ee:	88c9      	ldrh	r1, [r1, #6]
 80046f0:	8882      	ldrh	r2, [r0, #4]
 80046f2:	4291      	cmp	r1, r2
 80046f4:	d10b      	bne.n	800470e <ip_reass+0x2ca>
          q = iprh->next_pbuf;
 80046f6:	6802      	ldr	r2, [r0, #0]
 80046f8:	4601      	mov	r1, r0
 80046fa:	e7a4      	b.n	8004646 <ip_reass+0x202>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 fc5d 	bl	8004fbc <pbuf_clen>
 8004702:	8833      	ldrh	r3, [r6, #0]
 8004704:	1a18      	subs	r0, r3, r0
 8004706:	8030      	strh	r0, [r6, #0]
  pbuf_free(p);
 8004708:	4628      	mov	r0, r5
 800470a:	f000 fb7e 	bl	8004e0a <pbuf_free>
  return NULL;
 800470e:	2400      	movs	r4, #0
 8004710:	e7d4      	b.n	80046bc <ip_reass+0x278>
      iprh = (struct ip_reass_helper*)r->payload;
 8004712:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8004716:	f06f 0113 	mvn.w	r1, #19
 800471a:	4628      	mov	r0, r5
 800471c:	f000 fb4a 	bl	8004db4 <pbuf_header>
      pbuf_cat(p, r);
 8004720:	4629      	mov	r1, r5
 8004722:	4620      	mov	r0, r4
 8004724:	f000 fc57 	bl	8004fd6 <pbuf_cat>
      r = iprh->next_pbuf;
 8004728:	f8d8 5000 	ldr.w	r5, [r8]
 800472c:	e7af      	b.n	800468e <ip_reass+0x24a>
 800472e:	bf00      	nop
 8004730:	2000b0fe 	.word	0x2000b0fe
 8004734:	20000e76 	.word	0x20000e76
 8004738:	20000e78 	.word	0x20000e78

0800473c <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	b08d      	sub	sp, #52	; 0x34
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 8004742:	8c0b      	ldrh	r3, [r1, #32]
 8004744:	9306      	str	r3, [sp, #24]

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 8004746:	6843      	ldr	r3, [r0, #4]
{
 8004748:	920a      	str	r2, [sp, #40]	; 0x28
  original_iphdr = (struct ip_hdr *)p->payload;
 800474a:	9303      	str	r3, [sp, #12]
{
 800474c:	9105      	str	r1, [sp, #20]
 800474e:	4605      	mov	r5, r0
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 8004750:	88d8      	ldrh	r0, [r3, #6]
 8004752:	f7ff fa12 	bl	8003b7a <lwip_ntohs>
  ofo = tmp & IP_OFFMASK;
 8004756:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800475a:	9302      	str	r3, [sp, #8]
  omf = tmp & IP_MF;
 800475c:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8004760:	9308      	str	r3, [sp, #32]

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;
 8004762:	9b06      	ldr	r3, [sp, #24]
  left = p->tot_len - IP_HLEN;
 8004764:	892c      	ldrh	r4, [r5, #8]
  nfb = (mtu - IP_HLEN) / 8;
 8004766:	3b14      	subs	r3, #20
 8004768:	2208      	movs	r2, #8
 800476a:	fb93 f3f2 	sdiv	r3, r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	9307      	str	r3, [sp, #28]
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 8004772:	00db      	lsls	r3, r3, #3
  left = p->tot_len - IP_HLEN;
 8004774:	3c14      	subs	r4, #20
    cop = last ? left : nfb * 8;
 8004776:	b29b      	uxth	r3, r3
  left = p->tot_len - IP_HLEN;
 8004778:	b2a4      	uxth	r4, r4
    cop = last ? left : nfb * 8;
 800477a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t newpbuflen = 0;
 800477c:	2600      	movs	r6, #0
  u16_t poff = IP_HLEN;
 800477e:	2714      	movs	r7, #20
  while (left) {
 8004780:	b91c      	cbnz	r4, 800478a <ip_frag+0x4e>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 8004782:	4620      	mov	r0, r4
}
 8004784:	b00d      	add	sp, #52	; 0x34
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = omf | (IP_OFFMASK & (ofo));
 800478a:	9b02      	ldr	r3, [sp, #8]
 800478c:	f3c3 0a0c 	ubfx	sl, r3, #0, #13
 8004790:	9b08      	ldr	r3, [sp, #32]
 8004792:	ea43 030a 	orr.w	r3, r3, sl
 8004796:	9304      	str	r3, [sp, #16]
    last = (left <= mtu - IP_HLEN);
 8004798:	9b06      	ldr	r3, [sp, #24]
 800479a:	3b13      	subs	r3, #19
    if (!last) {
 800479c:	42a3      	cmp	r3, r4
      tmp = tmp | IP_MF;
 800479e:	bfde      	ittt	le
 80047a0:	9b04      	ldrle	r3, [sp, #16]
    cop = last ? left : nfb * 8;
 80047a2:	f8dd a024 	ldrle.w	sl, [sp, #36]	; 0x24
      tmp = tmp | IP_MF;
 80047a6:	f443 5300 	orrle.w	r3, r3, #8192	; 0x2000
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0114 	mov.w	r1, #20
 80047b2:	f04f 0002 	mov.w	r0, #2
      tmp = tmp | IP_MF;
 80047b6:	bfd4      	ite	le
 80047b8:	9304      	strle	r3, [sp, #16]
 80047ba:	46a2      	movgt	sl, r4
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80047bc:	f000 fb4c 	bl	8004e58 <pbuf_alloc>
    if (rambuf == NULL) {
 80047c0:	4680      	mov	r8, r0
 80047c2:	b318      	cbz	r0, 800480c <ip_frag+0xd0>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	6842      	ldr	r2, [r0, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	3114      	adds	r1, #20
 80047cc:	f853 0b04 	ldr.w	r0, [r3], #4
 80047d0:	f842 0b04 	str.w	r0, [r2], #4
 80047d4:	428b      	cmp	r3, r1
 80047d6:	d1f9      	bne.n	80047cc <ip_frag+0x90>
    p->payload = (u8_t *)p->payload + poff;
 80047d8:	686b      	ldr	r3, [r5, #4]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80047da:	f8d8 9004 	ldr.w	r9, [r8, #4]
    p->payload = (u8_t *)p->payload + poff;
 80047de:	443b      	add	r3, r7
 80047e0:	606b      	str	r3, [r5, #4]
    p->len -= poff;
 80047e2:	896b      	ldrh	r3, [r5, #10]
 80047e4:	1bdf      	subs	r7, r3, r7
 80047e6:	816f      	strh	r7, [r5, #10]
    left_to_copy = cop;
 80047e8:	4657      	mov	r7, sl
    while (left_to_copy) {
 80047ea:	b397      	cbz	r7, 8004852 <ip_frag+0x116>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 80047ec:	896e      	ldrh	r6, [r5, #10]
 80047ee:	42be      	cmp	r6, r7
 80047f0:	bf28      	it	cs
 80047f2:	463e      	movcs	r6, r7
 80047f4:	b2b6      	uxth	r6, r6
      if (!newpbuflen) {
 80047f6:	b90e      	cbnz	r6, 80047fc <ip_frag+0xc0>
        p = p->next;
 80047f8:	682d      	ldr	r5, [r5, #0]
 80047fa:	e7f6      	b.n	80047ea <ip_frag+0xae>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80047fc:	2006      	movs	r0, #6
 80047fe:	f000 fa0b 	bl	8004c18 <memp_malloc>
      if (pcr == NULL) {
 8004802:	4683      	mov	fp, r0
 8004804:	b928      	cbnz	r0, 8004812 <ip_frag+0xd6>
        pbuf_free(rambuf);
 8004806:	4640      	mov	r0, r8
 8004808:	f000 faff 	bl	8004e0a <pbuf_free>
      return ERR_MEM;
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	e7b8      	b.n	8004784 <ip_frag+0x48>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 8004812:	9601      	str	r6, [sp, #4]
 8004814:	686b      	ldr	r3, [r5, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2202      	movs	r2, #2
 800481a:	4603      	mov	r3, r0
 800481c:	4631      	mov	r1, r6
 800481e:	2003      	movs	r0, #3
 8004820:	f000 fa9e 	bl	8004d60 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8004824:	b920      	cbnz	r0, 8004830 <ip_frag+0xf4>
  memp_free(MEMP_FRAG_PBUF, p);
 8004826:	4659      	mov	r1, fp
 8004828:	2006      	movs	r0, #6
 800482a:	f000 fa1f 	bl	8004c6c <memp_free>
 800482e:	e7ea      	b.n	8004806 <ip_frag+0xca>
 8004830:	900b      	str	r0, [sp, #44]	; 0x2c
      pbuf_ref(p);
 8004832:	4628      	mov	r0, r5
 8004834:	f000 fbca 	bl	8004fcc <pbuf_ref>
      left_to_copy -= newpbuflen;
 8004838:	1bbf      	subs	r7, r7, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <ip_frag+0x174>)
      pcr->original = p;
 800483c:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004840:	f8cb 3010 	str.w	r3, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8004844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004846:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8004848:	b2bf      	uxth	r7, r7
      pbuf_cat(rambuf, newpbuf);
 800484a:	f000 fbc4 	bl	8004fd6 <pbuf_cat>
      if (left_to_copy) {
 800484e:	2f00      	cmp	r7, #0
 8004850:	d1d2      	bne.n	80047f8 <ip_frag+0xbc>
    IPH_OFFSET_SET(iphdr, htons(tmp));
 8004852:	9804      	ldr	r0, [sp, #16]
 8004854:	f7ff f98e 	bl	8003b74 <lwip_htons>
 8004858:	f8a9 0006 	strh.w	r0, [r9, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 800485c:	f10a 0014 	add.w	r0, sl, #20
 8004860:	b280      	uxth	r0, r0
 8004862:	f7ff f987 	bl	8003b74 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8004866:	f889 700a 	strb.w	r7, [r9, #10]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 800486a:	f8a9 0002 	strh.w	r0, [r9, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800486e:	f889 700b 	strb.w	r7, [r9, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8004872:	2114      	movs	r1, #20
 8004874:	4648      	mov	r0, r9
 8004876:	f7ff fb32 	bl	8003ede <inet_chksum>
    netif->output(netif, rambuf, dest);
 800487a:	9b05      	ldr	r3, [sp, #20]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800487c:	f8a9 000a 	strh.w	r0, [r9, #10]
    netif->output(netif, rambuf, dest);
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004884:	9805      	ldr	r0, [sp, #20]
 8004886:	4641      	mov	r1, r8
 8004888:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <ip_frag+0x178>)
 800488c:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <ip_frag+0x178>)
 800488e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    pbuf_free(rambuf);
 8004890:	4640      	mov	r0, r8
    IPFRAG_STATS_INC(ip_frag.xmit);
 8004892:	3301      	adds	r3, #1
 8004894:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 8004896:	f000 fab8 	bl	8004e0a <pbuf_free>
    ofo += nfb;
 800489a:	9b02      	ldr	r3, [sp, #8]
 800489c:	9a07      	ldr	r2, [sp, #28]
 800489e:	4413      	add	r3, r2
    left -= cop;
 80048a0:	eba4 040a 	sub.w	r4, r4, sl
    ofo += nfb;
 80048a4:	b29b      	uxth	r3, r3
    left -= cop;
 80048a6:	b2a4      	uxth	r4, r4
    ofo += nfb;
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	4637      	mov	r7, r6
 80048ac:	e768      	b.n	8004780 <ip_frag+0x44>
 80048ae:	bf00      	nop
 80048b0:	080042ff 	.word	0x080042ff
 80048b4:	2000b0fe 	.word	0x2000b0fe

080048b8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <mem_init+0x30>)
 80048ba:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <mem_init+0x34>)
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80048bc:	480c      	ldr	r0, [pc, #48]	; (80048f0 <mem_init+0x38>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80048be:	f023 0303 	bic.w	r3, r3, #3
  mem->prev = 0;
 80048c2:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80048c4:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 80048c6:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->prev = 0;
 80048ca:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
 80048cc:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80048ce:	1899      	adds	r1, r3, r2
 80048d0:	6001      	str	r1, [r0, #0]
  ram_end->used = 1;
 80048d2:	2001      	movs	r0, #1
  mem->next = MEM_SIZE_ALIGNED;
 80048d4:	801a      	strh	r2, [r3, #0]
  ram_end->used = 1;
 80048d6:	7108      	strb	r0, [r1, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80048d8:	529a      	strh	r2, [r3, r2]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80048da:	804a      	strh	r2, [r1, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80048dc:	4905      	ldr	r1, [pc, #20]	; (80048f4 <mem_init+0x3c>)
 80048de:	600b      	str	r3, [r1, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <mem_init+0x40>)
 80048e2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80048e6:	4770      	bx	lr
 80048e8:	200089d3 	.word	0x200089d3
 80048ec:	20000e80 	.word	0x20000e80
 80048f0:	20000e84 	.word	0x20000e84
 80048f4:	20000e7c 	.word	0x20000e7c
 80048f8:	2000b0fe 	.word	0x2000b0fe

080048fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80048fe:	2800      	cmp	r0, #0
 8004900:	d046      	beq.n	8004990 <mem_free+0x94>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <mem_free+0x98>)
 8004904:	4f24      	ldr	r7, [pc, #144]	; (8004998 <mem_free+0x9c>)
 8004906:	681b      	ldr	r3, [r3, #0]
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004908:	4298      	cmp	r0, r3
 800490a:	d304      	bcc.n	8004916 <mem_free+0x1a>
 800490c:	4a23      	ldr	r2, [pc, #140]	; (800499c <mem_free+0xa0>)
 800490e:	f8d2 e000 	ldr.w	lr, [r2]
 8004912:	4570      	cmp	r0, lr
 8004914:	d305      	bcc.n	8004922 <mem_free+0x26>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8004916:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800491a:	3301      	adds	r3, #1
 800491c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8004920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8004922:	2200      	movs	r2, #0
 8004924:	f800 2c04 	strb.w	r2, [r0, #-4]

  if (mem < lfree) {
 8004928:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <mem_free+0xa4>)
    /* the newly freed struct is now the lowest */
    lfree = mem;
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800492a:	f830 6c08 	ldrh.w	r6, [r0, #-8]
  if (mem < lfree) {
 800492e:	6814      	ldr	r4, [r2, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004930:	f1a0 0108 	sub.w	r1, r0, #8
  if (mem < lfree) {
 8004934:	42a1      	cmp	r1, r4
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004936:	f8b7 40aa 	ldrh.w	r4, [r7, #170]	; 0xaa
    lfree = mem;
 800493a:	bf38      	it	cc
 800493c:	6011      	strcc	r1, [r2, #0]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800493e:	1acd      	subs	r5, r1, r3
 8004940:	b2ad      	uxth	r5, r5
 8004942:	1ba4      	subs	r4, r4, r6
 8004944:	442c      	add	r4, r5
 8004946:	f8a7 40aa 	strh.w	r4, [r7, #170]	; 0xaa
  nmem = (struct mem *)(void *)&ram[mem->next];
 800494a:	199c      	adds	r4, r3, r6
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800494c:	42a1      	cmp	r1, r4
 800494e:	d00d      	beq.n	800496c <mem_free+0x70>
 8004950:	7927      	ldrb	r7, [r4, #4]
 8004952:	b95f      	cbnz	r7, 800496c <mem_free+0x70>
 8004954:	45a6      	cmp	lr, r4
 8004956:	d009      	beq.n	800496c <mem_free+0x70>
    if (lfree == nmem) {
 8004958:	6817      	ldr	r7, [r2, #0]
 800495a:	42bc      	cmp	r4, r7
    mem->next = nmem->next;
 800495c:	5b9c      	ldrh	r4, [r3, r6]
 800495e:	f820 4c08 	strh.w	r4, [r0, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004962:	5b9c      	ldrh	r4, [r3, r6]
      lfree = mem;
 8004964:	bf08      	it	eq
 8004966:	6011      	streq	r1, [r2, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004968:	441c      	add	r4, r3
 800496a:	8065      	strh	r5, [r4, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800496c:	f830 4c06 	ldrh.w	r4, [r0, #-6]
 8004970:	191d      	adds	r5, r3, r4
  if (pmem != mem && pmem->used == 0) {
 8004972:	42a9      	cmp	r1, r5
 8004974:	d00c      	beq.n	8004990 <mem_free+0x94>
 8004976:	792e      	ldrb	r6, [r5, #4]
 8004978:	b956      	cbnz	r6, 8004990 <mem_free+0x94>
    if (lfree == mem) {
 800497a:	6816      	ldr	r6, [r2, #0]
 800497c:	42b1      	cmp	r1, r6
      lfree = pmem;
 800497e:	bf08      	it	eq
 8004980:	6015      	streq	r5, [r2, #0]
    pmem->next = mem->next;
 8004982:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8004986:	531a      	strh	r2, [r3, r4]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004988:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 800498c:	4413      	add	r3, r2
 800498e:	805c      	strh	r4, [r3, #2]
 8004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004992:	bf00      	nop
 8004994:	20000e80 	.word	0x20000e80
 8004998:	2000b0fe 	.word	0x2000b0fe
 800499c:	20000e84 	.word	0x20000e84
 80049a0:	20000e7c 	.word	0x20000e7c

080049a4 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80049a4:	3103      	adds	r1, #3
 80049a6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80049aa:	400a      	ands	r2, r1

  if(newsize < MIN_SIZE_ALIGNED) {
 80049ac:	2a0b      	cmp	r2, #11
{
 80049ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(newsize < MIN_SIZE_ALIGNED) {
 80049b2:	d906      	bls.n	80049c2 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80049b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d903      	bls.n	80049c4 <mem_trim+0x20>
    return NULL;
 80049bc:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80049be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    newsize = MIN_SIZE_ALIGNED;
 80049c2:	220c      	movs	r2, #12
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80049c4:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <mem_trim+0xcc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80049c8:	4283      	cmp	r3, r0
 80049ca:	d803      	bhi.n	80049d4 <mem_trim+0x30>
 80049cc:	4929      	ldr	r1, [pc, #164]	; (8004a74 <mem_trim+0xd0>)
 80049ce:	6809      	ldr	r1, [r1, #0]
 80049d0:	4288      	cmp	r0, r1
 80049d2:	d307      	bcc.n	80049e4 <mem_trim+0x40>
    MEM_STATS_INC(illegal);
 80049d4:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <mem_trim+0xd4>)
 80049d6:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 80049da:	3301      	adds	r3, #1
 80049dc:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
    return rmem;
 80049e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80049e4:	f1a0 0408 	sub.w	r4, r0, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80049e8:	f830 ec08 	ldrh.w	lr, [r0, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80049ec:	1ae4      	subs	r4, r4, r3
 80049ee:	b2a4      	uxth	r4, r4
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80049f0:	f1ae 0508 	sub.w	r5, lr, #8
 80049f4:	1b2d      	subs	r5, r5, r4
 80049f6:	fa1f f885 	uxth.w	r8, r5
  if (newsize > size) {
 80049fa:	4590      	cmp	r8, r2
 80049fc:	d3de      	bcc.n	80049bc <mem_trim+0x18>
  if (newsize == size) {
 80049fe:	d0de      	beq.n	80049be <mem_trim+0x1a>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004a00:	eb03 0c0e 	add.w	ip, r3, lr
  if(mem2->used == 0) {
 8004a04:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8004a08:	b969      	cbnz	r1, 8004a26 <mem_trim+0x82>
    if (lfree == mem2) {
 8004a0a:	4f1c      	ldr	r7, [pc, #112]	; (8004a7c <mem_trim+0xd8>)
    next = mem2->next;
 8004a0c:	f833 e00e 	ldrh.w	lr, [r3, lr]
    if (lfree == mem2) {
 8004a10:	683e      	ldr	r6, [r7, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a12:	f104 0108 	add.w	r1, r4, #8
 8004a16:	4411      	add	r1, r2
 8004a18:	b289      	uxth	r1, r1
    if (lfree == mem2) {
 8004a1a:	45b4      	cmp	ip, r6
 8004a1c:	eb03 0601 	add.w	r6, r3, r1
 8004a20:	d10e      	bne.n	8004a40 <mem_trim+0x9c>
      lfree = mem2;
 8004a22:	603e      	str	r6, [r7, #0]
 8004a24:	e00c      	b.n	8004a40 <mem_trim+0x9c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004a26:	f102 0114 	add.w	r1, r2, #20
 8004a2a:	4541      	cmp	r1, r8
 8004a2c:	d8c7      	bhi.n	80049be <mem_trim+0x1a>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a2e:	f104 0108 	add.w	r1, r4, #8
    if (mem2 < lfree) {
 8004a32:	4f12      	ldr	r7, [pc, #72]	; (8004a7c <mem_trim+0xd8>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a34:	4411      	add	r1, r2
 8004a36:	b289      	uxth	r1, r1
    if (mem2 < lfree) {
 8004a38:	683d      	ldr	r5, [r7, #0]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004a3a:	185e      	adds	r6, r3, r1
    if (mem2 < lfree) {
 8004a3c:	42ae      	cmp	r6, r5
 8004a3e:	d3f0      	bcc.n	8004a22 <mem_trim+0x7e>
    mem2->used = 0;
 8004a40:	2700      	movs	r7, #0
 8004a42:	7137      	strb	r7, [r6, #4]
    mem2->next = mem->next;
 8004a44:	f823 e001 	strh.w	lr, [r3, r1]
    mem2->prev = ptr;
 8004a48:	8074      	strh	r4, [r6, #2]
    mem->next = ptr2;
 8004a4a:	f820 1c08 	strh.w	r1, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a4e:	5a5c      	ldrh	r4, [r3, r1]
 8004a50:	f242 7610 	movw	r6, #10000	; 0x2710
 8004a54:	42b4      	cmp	r4, r6
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a56:	bf1c      	itt	ne
 8004a58:	191b      	addne	r3, r3, r4
 8004a5a:	8059      	strhne	r1, [r3, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004a5c:	4906      	ldr	r1, [pc, #24]	; (8004a78 <mem_trim+0xd4>)
 8004a5e:	f8b1 30aa 	ldrh.w	r3, [r1, #170]	; 0xaa
 8004a62:	eba3 0508 	sub.w	r5, r3, r8
 8004a66:	442a      	add	r2, r5
 8004a68:	f8a1 20aa 	strh.w	r2, [r1, #170]	; 0xaa
 8004a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a70:	20000e80 	.word	0x20000e80
 8004a74:	20000e84 	.word	0x20000e84
 8004a78:	2000b0fe 	.word	0x2000b0fe
 8004a7c:	20000e7c 	.word	0x20000e7c

08004a80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004a84:	b150      	cbz	r0, 8004a9c <mem_malloc+0x1c>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004a86:	3003      	adds	r0, #3
 8004a88:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004a8c:	4002      	ands	r2, r0

  if(size < MIN_SIZE_ALIGNED) {
 8004a8e:	2a0b      	cmp	r2, #11
 8004a90:	d906      	bls.n	8004aa0 <mem_malloc+0x20>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004a92:	f242 7310 	movw	r3, #10000	; 0x2710
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <mem_malloc+0x22>
    return NULL;
 8004a9a:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8004a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size = MIN_SIZE_ALIGNED;
 8004aa0:	220c      	movs	r2, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004aa2:	4c38      	ldr	r4, [pc, #224]	; (8004b84 <mem_malloc+0x104>)
 8004aa4:	4d38      	ldr	r5, [pc, #224]	; (8004b88 <mem_malloc+0x108>)
 8004aa6:	6826      	ldr	r6, [r4, #0]
 8004aa8:	f8d5 e000 	ldr.w	lr, [r5]
 8004aac:	f242 7810 	movw	r8, #10000	; 0x2710
 8004ab0:	eba6 030e 	sub.w	r3, r6, lr
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	eba8 0702 	sub.w	r7, r8, r2
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004aba:	f06f 0a07 	mvn.w	sl, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004abe:	42bb      	cmp	r3, r7
 8004ac0:	db06      	blt.n	8004ad0 <mem_malloc+0x50>
  MEM_STATS_INC(err);
 8004ac2:	4a32      	ldr	r2, [pc, #200]	; (8004b8c <mem_malloc+0x10c>)
 8004ac4:	f8b2 30ae 	ldrh.w	r3, [r2, #174]	; 0xae
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8004ace:	e7e4      	b.n	8004a9a <mem_malloc+0x1a>
      mem = (struct mem *)(void *)&ram[ptr];
 8004ad0:	eb0e 0003 	add.w	r0, lr, r3
 8004ad4:	f83e c003 	ldrh.w	ip, [lr, r3]
      if ((!mem->used) &&
 8004ad8:	f890 9004 	ldrb.w	r9, [r0, #4]
 8004adc:	f1b9 0f00 	cmp.w	r9, #0
 8004ae0:	d14e      	bne.n	8004b80 <mem_malloc+0x100>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004ae2:	ebaa 0103 	sub.w	r1, sl, r3
 8004ae6:	4461      	add	r1, ip
      if ((!mem->used) &&
 8004ae8:	4291      	cmp	r1, r2
 8004aea:	d349      	bcc.n	8004b80 <mem_malloc+0x100>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004aec:	f102 0714 	add.w	r7, r2, #20
 8004af0:	42b9      	cmp	r1, r7
 8004af2:	4926      	ldr	r1, [pc, #152]	; (8004b8c <mem_malloc+0x10c>)
 8004af4:	d331      	bcc.n	8004b5a <mem_malloc+0xda>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004af6:	f102 0708 	add.w	r7, r2, #8
 8004afa:	441f      	add	r7, r3
 8004afc:	b2bf      	uxth	r7, r7
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004afe:	eb0e 0a07 	add.w	sl, lr, r7
          mem2->used = 0;
 8004b02:	f88a 9004 	strb.w	r9, [sl, #4]
          mem2->next = mem->next;
 8004b06:	f82e c007 	strh.w	ip, [lr, r7]
          mem2->prev = ptr;
 8004b0a:	f8aa 3002 	strh.w	r3, [sl, #2]
          mem->used = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	7103      	strb	r3, [r0, #4]
          mem->next = ptr2;
 8004b12:	8007      	strh	r7, [r0, #0]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b14:	f83e 3007 	ldrh.w	r3, [lr, r7]
 8004b18:	4543      	cmp	r3, r8
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004b1a:	bf18      	it	ne
 8004b1c:	449e      	addne	lr, r3
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8004b1e:	f8b1 30aa 	ldrh.w	r3, [r1, #170]	; 0xaa
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004b22:	bf18      	it	ne
 8004b24:	f8ae 7002 	strhne.w	r7, [lr, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8004b28:	3308      	adds	r3, #8
 8004b2a:	441a      	add	r2, r3
 8004b2c:	f8b1 30ac 	ldrh.w	r3, [r1, #172]	; 0xac
 8004b30:	b292      	uxth	r2, r2
 8004b32:	4293      	cmp	r3, r2
 8004b34:	f8a1 20aa 	strh.w	r2, [r1, #170]	; 0xaa
 8004b38:	d201      	bcs.n	8004b3e <mem_malloc+0xbe>
 8004b3a:	f8a1 20ac 	strh.w	r2, [r1, #172]	; 0xac
        if (mem == lfree) {
 8004b3e:	4286      	cmp	r6, r0
 8004b40:	d108      	bne.n	8004b54 <mem_malloc+0xd4>
          while (cur->used && cur != ram_end) {
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <mem_malloc+0x110>)
            cur = (struct mem *)(void *)&ram[cur->next];
 8004b44:	6829      	ldr	r1, [r5, #0]
          while (cur->used && cur != ram_end) {
 8004b46:	681a      	ldr	r2, [r3, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8004b48:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
 8004b4a:	791d      	ldrb	r5, [r3, #4]
 8004b4c:	b10d      	cbz	r5, 8004b52 <mem_malloc+0xd2>
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d113      	bne.n	8004b7a <mem_malloc+0xfa>
          lfree = cur;
 8004b52:	6023      	str	r3, [r4, #0]
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004b54:	3008      	adds	r0, #8
 8004b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          mem->used = 1;
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	7102      	strb	r2, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8004b5e:	f8b1 20aa 	ldrh.w	r2, [r1, #170]	; 0xaa
 8004b62:	4462      	add	r2, ip
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	f8a1 30aa 	strh.w	r3, [r1, #170]	; 0xaa
 8004b72:	bf38      	it	cc
 8004b74:	f8a1 30ac 	strhcc.w	r3, [r1, #172]	; 0xac
 8004b78:	e7e1      	b.n	8004b3e <mem_malloc+0xbe>
            cur = (struct mem *)(void *)&ram[cur->next];
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	440b      	add	r3, r1
 8004b7e:	e7e4      	b.n	8004b4a <mem_malloc+0xca>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004b80:	4663      	mov	r3, ip
 8004b82:	e79c      	b.n	8004abe <mem_malloc+0x3e>
 8004b84:	20000e7c 	.word	0x20000e7c
 8004b88:	20000e80 	.word	0x20000e80
 8004b8c:	2000b0fe 	.word	0x2000b0fe
 8004b90:	20000e84 	.word	0x20000e84

08004b94 <memp_init>:

  for (i = 0; i < MEMP_MAX; ++i) {
    MEMP_STATS_AVAIL(used, i, 0);
    MEMP_STATS_AVAIL(max, i, 0);
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 8004b94:	481b      	ldr	r0, [pc, #108]	; (8004c04 <memp_init+0x70>)
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <memp_init+0x74>)
{
 8004b98:	2200      	movs	r2, #0
 8004b9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    MEMP_STATS_AVAIL(used, i, 0);
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4686      	mov	lr, r0
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 8004ba2:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    MEMP_STATS_AVAIL(used, i, 0);
 8004ba6:	f8a3 10b4 	strh.w	r1, [r3, #180]	; 0xb4
 8004baa:	3201      	adds	r2, #1
  for (i = 0; i < MEMP_MAX; ++i) {
 8004bac:	2a0a      	cmp	r2, #10
    MEMP_STATS_AVAIL(max, i, 0);
 8004bae:	f8a3 10b6 	strh.w	r1, [r3, #182]	; 0xb6
    MEMP_STATS_AVAIL(err, i, 0);
 8004bb2:	f8a3 10b8 	strh.w	r1, [r3, #184]	; 0xb8
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 8004bb6:	f8a3 40b2 	strh.w	r4, [r3, #178]	; 0xb2
 8004bba:	f103 030a 	add.w	r3, r3, #10
  for (i = 0; i < MEMP_MAX; ++i) {
 8004bbe:	d1f0      	bne.n	8004ba2 <memp_init+0xe>
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <memp_init+0x78>)
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
 8004bc2:	4813      	ldr	r0, [pc, #76]	; (8004c10 <memp_init+0x7c>)
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8004bc4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8004c14 <memp_init+0x80>
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f022 0203 	bic.w	r2, r2, #3
    memp_tab[i] = NULL;
 8004bce:	461e      	mov	r6, r3
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    for (j = 0; j < memp_num[i]; ++j) {
 8004bd6:	f83e 8013 	ldrh.w	r8, [lr, r3, lsl #1]
 8004bda:	009d      	lsls	r5, r3, #2
 8004bdc:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8004be0:	2100      	movs	r1, #0
 8004be2:	b28f      	uxth	r7, r1
 8004be4:	45b8      	cmp	r8, r7
 8004be6:	d804      	bhi.n	8004bf2 <memp_init+0x5e>
 8004be8:	3301      	adds	r3, #1
  for (i = 0; i < MEMP_MAX; ++i) {
 8004bea:	2b0a      	cmp	r3, #10
 8004bec:	d1f1      	bne.n	8004bd2 <memp_init+0x3e>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 8004bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      memp->next = memp_tab[i];
 8004bf2:	5967      	ldr	r7, [r4, r5]
 8004bf4:	6017      	str	r7, [r2, #0]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8004bf6:	f839 700c 	ldrh.w	r7, [r9, ip]
      memp_tab[i] = memp;
 8004bfa:	5162      	str	r2, [r4, r5]
 8004bfc:	3101      	adds	r1, #1
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8004bfe:	443a      	add	r2, r7
 8004c00:	e7ef      	b.n	8004be2 <memp_init+0x4e>
 8004c02:	bf00      	nop
 8004c04:	080080e4 	.word	0x080080e4
 8004c08:	2000b0fe 	.word	0x2000b0fe
 8004c0c:	20000e8b 	.word	0x20000e8b
 8004c10:	2000774c 	.word	0x2000774c
 8004c14:	080080f8 	.word	0x080080f8

08004c18 <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004c18:	2809      	cmp	r0, #9
{
 8004c1a:	b530      	push	{r4, r5, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004c1c:	d820      	bhi.n	8004c60 <memp_malloc+0x48>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 8004c1e:	4c11      	ldr	r4, [pc, #68]	; (8004c64 <memp_malloc+0x4c>)
 8004c20:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <memp_malloc+0x50>)
 8004c22:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8004c26:	210a      	movs	r1, #10
  
  if (memp != NULL) {
 8004c28:	b192      	cbz	r2, 8004c50 <memp_malloc+0x38>
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
 8004c2a:	fb01 3300 	mla	r3, r1, r0, r3
    memp_tab[type] = memp->next;
 8004c2e:	6815      	ldr	r5, [r2, #0]
    MEMP_STATS_INC_USED(used, type);
 8004c30:	f8b3 10b4 	ldrh.w	r1, [r3, #180]	; 0xb4
    memp_tab[type] = memp->next;
 8004c34:	f844 5020 	str.w	r5, [r4, r0, lsl #2]
    MEMP_STATS_INC_USED(used, type);
 8004c38:	3101      	adds	r1, #1
 8004c3a:	f8b3 00b6 	ldrh.w	r0, [r3, #182]	; 0xb6
 8004c3e:	b289      	uxth	r1, r1
 8004c40:	4288      	cmp	r0, r1
 8004c42:	f8a3 10b4 	strh.w	r1, [r3, #180]	; 0xb4
 8004c46:	d201      	bcs.n	8004c4c <memp_malloc+0x34>
 8004c48:	f8a3 10b6 	strh.w	r1, [r3, #182]	; 0xb6
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	bd30      	pop	{r4, r5, pc}
    MEMP_STATS_INC(err, type);
 8004c50:	fb01 3300 	mla	r3, r1, r0, r3
 8004c54:	f8b3 10b8 	ldrh.w	r1, [r3, #184]	; 0xb8
 8004c58:	3101      	adds	r1, #1
 8004c5a:	f8a3 10b8 	strh.w	r1, [r3, #184]	; 0xb8
 8004c5e:	e7f5      	b.n	8004c4c <memp_malloc+0x34>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004c60:	2200      	movs	r2, #0
 8004c62:	e7f3      	b.n	8004c4c <memp_malloc+0x34>
 8004c64:	2000774c 	.word	0x2000774c
 8004c68:	2000b0fe 	.word	0x2000b0fe

08004c6c <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 8004c6c:	b171      	cbz	r1, 8004c8c <memp_free+0x20>
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <memp_free+0x24>)
 8004c70:	230a      	movs	r3, #10
 8004c72:	fb03 2300 	mla	r3, r3, r0, r2
 8004c76:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  
  memp->next = memp_tab[type]; 
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <memp_free+0x28>)
 8004c82:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8004c86:	600a      	str	r2, [r1, #0]
  memp_tab[type] = memp;
 8004c88:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000b0fe 	.word	0x2000b0fe
 8004c94:	2000774c 	.word	0x2000774c

08004c98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004c98:	4770      	bx	lr
	...

08004c9c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4605      	mov	r5, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	b151      	cbz	r1, 8004cba <netif_set_ipaddr+0x1e>
 8004ca4:	680a      	ldr	r2, [r1, #0]
 8004ca6:	6843      	ldr	r3, [r0, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d005      	beq.n	8004cb8 <netif_set_ipaddr+0x1c>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <netif_set_ipaddr+0x48>)
 8004cae:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
 8004cb0:	b928      	cbnz	r0, 8004cbe <netif_set_ipaddr+0x22>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <netif_set_ipaddr+0x4c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b95b      	cbnz	r3, 8004cd0 <netif_set_ipaddr+0x34>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 8004cb8:	6824      	ldr	r4, [r4, #0]
 8004cba:	606c      	str	r4, [r5, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 8004cbe:	6802      	ldr	r2, [r0, #0]
 8004cc0:	686b      	ldr	r3, [r5, #4]
 8004cc2:	68c6      	ldr	r6, [r0, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d101      	bne.n	8004ccc <netif_set_ipaddr+0x30>
        tcp_abort(pcb);
 8004cc8:	f000 fe0a 	bl	80058e0 <tcp_abort>
        pcb = pcb->next;
 8004ccc:	4630      	mov	r0, r6
 8004cce:	e7ef      	b.n	8004cb0 <netif_set_ipaddr+0x14>
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	b122      	cbz	r2, 8004cde <netif_set_ipaddr+0x42>
 8004cd4:	6869      	ldr	r1, [r5, #4]
 8004cd6:	428a      	cmp	r2, r1
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 8004cd8:	bf04      	itt	eq
 8004cda:	6822      	ldreq	r2, [r4, #0]
 8004cdc:	601a      	streq	r2, [r3, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	e7e9      	b.n	8004cb6 <netif_set_ipaddr+0x1a>
 8004ce2:	bf00      	nop
 8004ce4:	2000b218 	.word	0x2000b218
 8004ce8:	2000b220 	.word	0x2000b220

08004cec <netif_set_addr>:
{
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4615      	mov	r5, r2
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	461c      	mov	r4, r3
  netif_set_ipaddr(netif, ipaddr);
 8004cf4:	f7ff ffd2 	bl	8004c9c <netif_set_ipaddr>
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 8004cf8:	b105      	cbz	r5, 8004cfc <netif_set_addr+0x10>
 8004cfa:	682d      	ldr	r5, [r5, #0]
 8004cfc:	60b5      	str	r5, [r6, #8]
  ip_addr_set(&(netif->gw), gw);
 8004cfe:	b104      	cbz	r4, 8004d02 <netif_set_addr+0x16>
 8004d00:	6824      	ldr	r4, [r4, #0]
 8004d02:	60f4      	str	r4, [r6, #12]
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d08 <netif_add>:
{
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  netif->num = netif_num++;
 8004d0a:	4f10      	ldr	r7, [pc, #64]	; (8004d4c <netif_add+0x44>)
  netif->state = state;
 8004d0c:	9e06      	ldr	r6, [sp, #24]
 8004d0e:	61c6      	str	r6, [r0, #28]
  netif->num = netif_num++;
 8004d10:	783e      	ldrb	r6, [r7, #0]
 8004d12:	f880 602c 	strb.w	r6, [r0, #44]	; 0x2c
  ip_addr_set_zero(&netif->ip_addr);
 8004d16:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8004d18:	f106 0e01 	add.w	lr, r6, #1
  netif->input = input;
 8004d1c:	9e08      	ldr	r6, [sp, #32]
  ip_addr_set_zero(&netif->ip_addr);
 8004d1e:	6045      	str	r5, [r0, #4]
{
 8004d20:	4604      	mov	r4, r0
  ip_addr_set_zero(&netif->netmask);
 8004d22:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
 8004d24:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
 8004d26:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
  netif->input = input;
 8004d2a:	6106      	str	r6, [r0, #16]
  netif->num = netif_num++;
 8004d2c:	f887 e000 	strb.w	lr, [r7]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004d30:	f7ff ffdc 	bl	8004cec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8004d34:	4620      	mov	r0, r4
 8004d36:	9b07      	ldr	r3, [sp, #28]
 8004d38:	4798      	blx	r3
 8004d3a:	b928      	cbnz	r0, 8004d48 <netif_add+0x40>
  netif->next = netif_list;
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <netif_add+0x48>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8004d42:	601c      	str	r4, [r3, #0]
}
 8004d44:	4620      	mov	r0, r4
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8004d48:	462c      	mov	r4, r5
 8004d4a:	e7fb      	b.n	8004d44 <netif_add+0x3c>
 8004d4c:	20007774 	.word	0x20007774
 8004d50:	2000b0f4 	.word	0x2000b0f4

08004d54 <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <netif_set_default+0x8>)
 8004d56:	6018      	str	r0, [r3, #0]
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	2000b0f8 	.word	0x2000b0f8

08004d60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	9d04      	ldr	r5, [sp, #16]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004d64:	2803      	cmp	r0, #3
 8004d66:	d823      	bhi.n	8004db0 <pbuf_alloced_custom+0x50>
 8004d68:	e8df f000 	tbb	[pc, r0]
 8004d6c:	1c1a021e 	.word	0x1c1a021e
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004d70:	2022      	movs	r0, #34	; 0x22
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004d72:	3003      	adds	r0, #3
 8004d74:	f020 0403 	bic.w	r4, r0, #3
 8004d78:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8004d7c:	1866      	adds	r6, r4, r1
 8004d7e:	4286      	cmp	r6, r0
 8004d80:	f04f 0000 	mov.w	r0, #0
 8004d84:	dc15      	bgt.n	8004db2 <pbuf_alloced_custom+0x52>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  p->pbuf.next = NULL;
 8004d86:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8004d88:	b185      	cbz	r5, 8004dac <pbuf_alloced_custom+0x4c>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004d8a:	442c      	add	r4, r5
 8004d8c:	605c      	str	r4, [r3, #4]
  } else {
    p->pbuf.payload = NULL;
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004d8e:	2002      	movs	r0, #2
  p->pbuf.len = p->pbuf.tot_len = length;
  p->pbuf.type = type;
 8004d90:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004d92:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004d94:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004d96:	8119      	strh	r1, [r3, #8]
 8004d98:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8004d9a:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_HLEN;
 8004da0:	200e      	movs	r0, #14
    break;
 8004da2:	e7e6      	b.n	8004d72 <pbuf_alloced_custom+0x12>
    offset = 0;
 8004da4:	2000      	movs	r0, #0
    break;
 8004da6:	e7e4      	b.n	8004d72 <pbuf_alloced_custom+0x12>
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004da8:	2036      	movs	r0, #54	; 0x36
 8004daa:	e7e2      	b.n	8004d72 <pbuf_alloced_custom+0x12>
    p->pbuf.payload = NULL;
 8004dac:	605d      	str	r5, [r3, #4]
 8004dae:	e7ee      	b.n	8004d8e <pbuf_alloced_custom+0x2e>
    return NULL;
 8004db0:	2000      	movs	r0, #0
}
 8004db2:	bd70      	pop	{r4, r5, r6, pc}

08004db4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004db4:	b510      	push	{r4, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 8004db6:	b1e1      	cbz	r1, 8004df2 <pbuf_header+0x3e>
 8004db8:	b138      	cbz	r0, 8004dca <pbuf_header+0x16>
    return 0;
  }
 
  if (header_size_increment < 0){
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	da06      	bge.n	8004dcc <pbuf_header+0x18>
    increment_magnitude = -header_size_increment;
 8004dbe:	424a      	negs	r2, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004dc0:	8943      	ldrh	r3, [r0, #10]
    increment_magnitude = -header_size_increment;
 8004dc2:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d202      	bcs.n	8004dce <pbuf_header+0x1a>
 8004dc8:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 8004dca:	bd10      	pop	{r4, pc}
    increment_magnitude = header_size_increment;
 8004dcc:	b28a      	uxth	r2, r1
  type = p->type;
 8004dce:	7b04      	ldrb	r4, [r0, #12]
  payload = p->payload;
 8004dd0:	6843      	ldr	r3, [r0, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004dd2:	b10c      	cbz	r4, 8004dd8 <pbuf_header+0x24>
 8004dd4:	2c03      	cmp	r4, #3
 8004dd6:	d10e      	bne.n	8004df6 <pbuf_header+0x42>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004dd8:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004dda:	f100 0210 	add.w	r2, r0, #16
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d3f2      	bcc.n	8004dc8 <pbuf_header+0x14>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004de2:	6043      	str	r3, [r0, #4]
  p->len += header_size_increment;
 8004de4:	8943      	ldrh	r3, [r0, #10]
 8004de6:	b289      	uxth	r1, r1
 8004de8:	440b      	add	r3, r1
 8004dea:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 8004dec:	8903      	ldrh	r3, [r0, #8]
 8004dee:	4419      	add	r1, r3
 8004df0:	8101      	strh	r1, [r0, #8]
  return 0;
 8004df2:	2000      	movs	r0, #0
 8004df4:	bd10      	pop	{r4, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004df6:	3c01      	subs	r4, #1
 8004df8:	2c01      	cmp	r4, #1
 8004dfa:	d8e5      	bhi.n	8004dc8 <pbuf_header+0x14>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	dae3      	bge.n	8004dc8 <pbuf_header+0x14>
 8004e00:	8944      	ldrh	r4, [r0, #10]
 8004e02:	4294      	cmp	r4, r2
 8004e04:	d3e0      	bcc.n	8004dc8 <pbuf_header+0x14>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004e06:	1a5b      	subs	r3, r3, r1
 8004e08:	e7eb      	b.n	8004de2 <pbuf_header+0x2e>

08004e0a <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e0a:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e0c:	4601      	mov	r1, r0
 8004e0e:	b310      	cbz	r0, 8004e56 <pbuf_free+0x4c>
 8004e10:	2400      	movs	r4, #0
 8004e12:	b2e0      	uxtb	r0, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004e14:	b901      	cbnz	r1, 8004e18 <pbuf_free+0xe>
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004e18:	89cb      	ldrh	r3, [r1, #14]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004e20:	b9cb      	cbnz	r3, 8004e56 <pbuf_free+0x4c>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004e22:	7b4b      	ldrb	r3, [r1, #13]
      q = p->next;
 8004e24:	680d      	ldr	r5, [r1, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004e26:	079b      	lsls	r3, r3, #30
 8004e28:	d505      	bpl.n	8004e36 <pbuf_free+0x2c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4798      	blx	r3
 8004e30:	3401      	adds	r4, #1
          mem_free(p);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 8004e32:	4629      	mov	r1, r5
 8004e34:	e7ed      	b.n	8004e12 <pbuf_free+0x8>
      type = p->type;
 8004e36:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d103      	bne.n	8004e44 <pbuf_free+0x3a>
          memp_free(MEMP_PBUF_POOL, p);
 8004e3c:	2009      	movs	r0, #9
          memp_free(MEMP_PBUF, p);
 8004e3e:	f7ff ff15 	bl	8004c6c <memp_free>
 8004e42:	e7f5      	b.n	8004e30 <pbuf_free+0x26>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004e44:	3b01      	subs	r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d801      	bhi.n	8004e4e <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 8004e4a:	2008      	movs	r0, #8
 8004e4c:	e7f7      	b.n	8004e3e <pbuf_free+0x34>
          mem_free(p);
 8004e4e:	4608      	mov	r0, r1
 8004e50:	f7ff fd54 	bl	80048fc <mem_free>
 8004e54:	e7ec      	b.n	8004e30 <pbuf_free+0x26>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8004e56:	bd38      	pop	{r3, r4, r5, pc}

08004e58 <pbuf_alloc>:
{
 8004e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e5c:	460e      	mov	r6, r1
 8004e5e:	4617      	mov	r7, r2
  switch (layer) {
 8004e60:	2803      	cmp	r0, #3
 8004e62:	d845      	bhi.n	8004ef0 <pbuf_alloc+0x98>
 8004e64:	e8df f000 	tbb	[pc, r0]
 8004e68:	0b09020d 	.word	0x0b09020d
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004e6c:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8004e6e:	2f03      	cmp	r7, #3
 8004e70:	d83e      	bhi.n	8004ef0 <pbuf_alloc+0x98>
 8004e72:	e8df f007 	tbb	[pc, r7]
 8004e76:	6e55      	.short	0x6e55
 8004e78:	086e      	.short	0x086e
    offset = PBUF_LINK_HLEN;
 8004e7a:	250e      	movs	r5, #14
    break;
 8004e7c:	e7f7      	b.n	8004e6e <pbuf_alloc+0x16>
    offset = 0;
 8004e7e:	2500      	movs	r5, #0
    break;
 8004e80:	e7f5      	b.n	8004e6e <pbuf_alloc+0x16>
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004e82:	2536      	movs	r5, #54	; 0x36
 8004e84:	e7f3      	b.n	8004e6e <pbuf_alloc+0x16>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004e86:	2009      	movs	r0, #9
 8004e88:	f7ff fec6 	bl	8004c18 <memp_malloc>
    if (p == NULL) {
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	b928      	cbnz	r0, 8004e9c <pbuf_alloc+0x44>
  pbuf_free_ooseq_pending = 1;
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <pbuf_alloc+0x114>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
}
 8004e96:	4620      	mov	r0, r4
 8004e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->type = type;
 8004e9c:	2203      	movs	r2, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004e9e:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004ea0:	4415      	add	r5, r2
 8004ea2:	f025 0503 	bic.w	r5, r5, #3
 8004ea6:	f5c5 65bd 	rsb	r5, r5, #1512	; 0x5e8
 8004eaa:	3504      	adds	r5, #4
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004eac:	3313      	adds	r3, #19
 8004eae:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004eb2:	42b5      	cmp	r5, r6
 8004eb4:	bfa8      	it	ge
 8004eb6:	4635      	movge	r5, r6
    p->next = NULL;
 8004eb8:	2700      	movs	r7, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004eba:	6043      	str	r3, [r0, #4]
    p->ref = 1;
 8004ebc:	2301      	movs	r3, #1
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004ebe:	8145      	strh	r5, [r0, #10]
    p->type = type;
 8004ec0:	7302      	strb	r2, [r0, #12]
    p->next = NULL;
 8004ec2:	6007      	str	r7, [r0, #0]
    p->tot_len = length;
 8004ec4:	8106      	strh	r6, [r0, #8]
    p->ref = 1;
 8004ec6:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
 8004ec8:	1b75      	subs	r5, r6, r5
    while (rem_len > 0) {
 8004eca:	4680      	mov	r8, r0
      q->type = type;
 8004ecc:	4691      	mov	r9, r2
    while (rem_len > 0) {
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	dc04      	bgt.n	8004edc <pbuf_alloc+0x84>
  p->ref = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	7363      	strb	r3, [r4, #13]
  return p;
 8004eda:	e7dc      	b.n	8004e96 <pbuf_alloc+0x3e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004edc:	2009      	movs	r0, #9
 8004ede:	f7ff fe9b 	bl	8004c18 <memp_malloc>
      if (q == NULL) {
 8004ee2:	b938      	cbnz	r0, 8004ef4 <pbuf_alloc+0x9c>
  pbuf_free_ooseq_pending = 1;
 8004ee4:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <pbuf_alloc+0x114>)
 8004ee6:	2201      	movs	r2, #1
        pbuf_free(p);
 8004ee8:	4620      	mov	r0, r4
  pbuf_free_ooseq_pending = 1;
 8004eea:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8004eec:	f7ff ff8d 	bl	8004e0a <pbuf_free>
    return NULL;
 8004ef0:	2400      	movs	r4, #0
 8004ef2:	e7d0      	b.n	8004e96 <pbuf_alloc+0x3e>
      q->tot_len = (u16_t)rem_len;
 8004ef4:	b2ab      	uxth	r3, r5
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004ef6:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8004efa:	4293      	cmp	r3, r2
      q->type = type;
 8004efc:	f880 900c 	strb.w	r9, [r0, #12]
      q->flags = 0;
 8004f00:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 8004f02:	6007      	str	r7, [r0, #0]
      r->next = q;
 8004f04:	f8c8 0000 	str.w	r0, [r8]
      q->tot_len = (u16_t)rem_len;
 8004f08:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004f0a:	bf28      	it	cs
 8004f0c:	4613      	movcs	r3, r2
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004f0e:	f100 0210 	add.w	r2, r0, #16
 8004f12:	6042      	str	r2, [r0, #4]
      q->ref = 1;
 8004f14:	2201      	movs	r2, #1
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004f16:	8143      	strh	r3, [r0, #10]
      q->ref = 1;
 8004f18:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
 8004f1a:	1aed      	subs	r5, r5, r3
 8004f1c:	4680      	mov	r8, r0
 8004f1e:	e7d6      	b.n	8004ece <pbuf_alloc+0x76>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004f20:	f105 0013 	add.w	r0, r5, #19
 8004f24:	1cf3      	adds	r3, r6, #3
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	f020 0003 	bic.w	r0, r0, #3
 8004f2e:	4418      	add	r0, r3
 8004f30:	b280      	uxth	r0, r0
 8004f32:	f7ff fda5 	bl	8004a80 <mem_malloc>
    if (p == NULL) {
 8004f36:	4604      	mov	r4, r0
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d0d9      	beq.n	8004ef0 <pbuf_alloc+0x98>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004f3c:	1943      	adds	r3, r0, r5
 8004f3e:	3313      	adds	r3, #19
 8004f40:	f023 0303 	bic.w	r3, r3, #3
 8004f44:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8004f46:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8004f48:	8106      	strh	r6, [r0, #8]
 8004f4a:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8004f4c:	6003      	str	r3, [r0, #0]
    p->type = type;
 8004f4e:	7303      	strb	r3, [r0, #12]
 8004f50:	e7bf      	b.n	8004ed2 <pbuf_alloc+0x7a>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004f52:	2008      	movs	r0, #8
 8004f54:	f7ff fe60 	bl	8004c18 <memp_malloc>
    if (p == NULL) {
 8004f58:	4604      	mov	r4, r0
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0c8      	beq.n	8004ef0 <pbuf_alloc+0x98>
    p->payload = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8004f62:	8106      	strh	r6, [r0, #8]
 8004f64:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8004f66:	6003      	str	r3, [r0, #0]
    p->type = type;
 8004f68:	7307      	strb	r7, [r0, #12]
    break;
 8004f6a:	e7b2      	b.n	8004ed2 <pbuf_alloc+0x7a>
 8004f6c:	2000b0fc 	.word	0x2000b0fc

08004f70 <pbuf_realloc>:
{
 8004f70:	b538      	push	{r3, r4, r5, lr}
  if (new_len >= p->tot_len) {
 8004f72:	8903      	ldrh	r3, [r0, #8]
 8004f74:	428b      	cmp	r3, r1
{
 8004f76:	4604      	mov	r4, r0
  if (new_len >= p->tot_len) {
 8004f78:	d918      	bls.n	8004fac <pbuf_realloc+0x3c>
 8004f7a:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
 8004f7c:	1acb      	subs	r3, r1, r3
  while (rem_len > q->len) {
 8004f7e:	8961      	ldrh	r1, [r4, #10]
 8004f80:	428d      	cmp	r5, r1
 8004f82:	d814      	bhi.n	8004fae <pbuf_realloc+0x3e>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 8004f84:	7b23      	ldrb	r3, [r4, #12]
 8004f86:	b94b      	cbnz	r3, 8004f9c <pbuf_realloc+0x2c>
 8004f88:	428d      	cmp	r5, r1
 8004f8a:	d007      	beq.n	8004f9c <pbuf_realloc+0x2c>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004f8c:	6861      	ldr	r1, [r4, #4]
 8004f8e:	1b09      	subs	r1, r1, r4
 8004f90:	4429      	add	r1, r5
 8004f92:	4620      	mov	r0, r4
 8004f94:	b289      	uxth	r1, r1
 8004f96:	f7ff fd05 	bl	80049a4 <mem_trim>
 8004f9a:	4604      	mov	r4, r0
  if (q->next != NULL) {
 8004f9c:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8004f9e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8004fa0:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8004fa2:	b108      	cbz	r0, 8004fa8 <pbuf_realloc+0x38>
    pbuf_free(q->next);
 8004fa4:	f7ff ff31 	bl	8004e0a <pbuf_free>
  q->next = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	bd38      	pop	{r3, r4, r5, pc}
    q->tot_len += (u16_t)grow;
 8004fae:	8922      	ldrh	r2, [r4, #8]
    rem_len -= q->len;
 8004fb0:	1a6d      	subs	r5, r5, r1
    q->tot_len += (u16_t)grow;
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8122      	strh	r2, [r4, #8]
    rem_len -= q->len;
 8004fb6:	b2ad      	uxth	r5, r5
    q = q->next;
 8004fb8:	6824      	ldr	r4, [r4, #0]
 8004fba:	e7e0      	b.n	8004f7e <pbuf_realloc+0xe>

08004fbc <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 8004fbc:	4603      	mov	r3, r0
  u8_t len;

  len = 0;
  while (p != NULL) {
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	b2d0      	uxtb	r0, r2
 8004fc2:	3201      	adds	r2, #1
 8004fc4:	b903      	cbnz	r3, 8004fc8 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8004fc6:	4770      	bx	lr
    p = p->next;
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	e7f9      	b.n	8004fc0 <pbuf_clen+0x4>

08004fcc <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 8004fcc:	b110      	cbz	r0, 8004fd4 <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 8004fce:	89c3      	ldrh	r3, [r0, #14]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	81c3      	strh	r3, [r0, #14]
 8004fd4:	4770      	bx	lr

08004fd6 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004fd6:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004fd8:	b150      	cbz	r0, 8004ff0 <pbuf_cat+0x1a>
 8004fda:	b909      	cbnz	r1, 8004fe0 <pbuf_cat+0xa>
 8004fdc:	bd10      	pop	{r4, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004fde:	4620      	mov	r0, r4
 8004fe0:	8903      	ldrh	r3, [r0, #8]
 8004fe2:	890a      	ldrh	r2, [r1, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004fe4:	6804      	ldr	r4, [r0, #0]
    p->tot_len += t->tot_len;
 8004fe6:	4413      	add	r3, r2
 8004fe8:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004fea:	2c00      	cmp	r4, #0
 8004fec:	d1f7      	bne.n	8004fde <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004fee:	6001      	str	r1, [r0, #0]
 8004ff0:	bd10      	pop	{r4, pc}

08004ff2 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004ff2:	b510      	push	{r4, lr}
  pbuf_cat(h, t);
 8004ff4:	f7ff ffef 	bl	8004fd6 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	f7ff bfe5 	b.w	8004fcc <pbuf_ref>

08005002 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 8005002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005006:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005008:	4605      	mov	r5, r0
 800500a:	b918      	cbnz	r0, 8005014 <pbuf_copy+0x12>
 800500c:	f06f 000d 	mvn.w	r0, #13
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	2900      	cmp	r1, #0
 8005016:	d0f9      	beq.n	800500c <pbuf_copy+0xa>
 8005018:	8902      	ldrh	r2, [r0, #8]
 800501a:	890b      	ldrh	r3, [r1, #8]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3f5      	bcc.n	800500c <pbuf_copy+0xa>
 8005020:	f04f 0800 	mov.w	r8, #0
 8005024:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005026:	8963      	ldrh	r3, [r4, #10]
 8005028:	896e      	ldrh	r6, [r5, #10]
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800502a:	6861      	ldr	r1, [r4, #4]
 800502c:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800502e:	1bf6      	subs	r6, r6, r7
 8005030:	eba3 0308 	sub.w	r3, r3, r8
 8005034:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8005036:	bfac      	ite	ge
 8005038:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800503a:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800503c:	4632      	mov	r2, r6
 800503e:	4441      	add	r1, r8
 8005040:	4438      	add	r0, r7
 8005042:	f002 ffa6 	bl	8007f92 <memcpy>
    offset_to += len;
 8005046:	4437      	add	r7, r6
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8005048:	8962      	ldrh	r2, [r4, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800504a:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800504c:	4446      	add	r6, r8
 800504e:	fa1f f886 	uxth.w	r8, r6
    if (offset_from >= p_from->len) {
 8005052:	4542      	cmp	r2, r8
    offset_to += len;
 8005054:	b2bf      	uxth	r7, r7
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8005056:	bf9c      	itt	ls
 8005058:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800505a:	f04f 0800 	movls.w	r8, #0
    }
    if (offset_to == p_to->len) {
 800505e:	429f      	cmp	r7, r3
 8005060:	d10b      	bne.n	800507a <pbuf_copy+0x78>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 8005062:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005064:	b945      	cbnz	r5, 8005078 <pbuf_copy+0x76>
 8005066:	2c00      	cmp	r4, #0
 8005068:	d1d0      	bne.n	800500c <pbuf_copy+0xa>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800506a:	4620      	mov	r0, r4
 800506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 8005070:	f06f 0005 	mvn.w	r0, #5
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset_to = 0;
 8005078:	2700      	movs	r7, #0
    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800507a:	b134      	cbz	r4, 800508a <pbuf_copy+0x88>
 800507c:	8962      	ldrh	r2, [r4, #10]
 800507e:	8923      	ldrh	r3, [r4, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d102      	bne.n	800508a <pbuf_copy+0x88>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f2      	bne.n	8005070 <pbuf_copy+0x6e>
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800508a:	896a      	ldrh	r2, [r5, #10]
 800508c:	892b      	ldrh	r3, [r5, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d102      	bne.n	8005098 <pbuf_copy+0x96>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 8005092:	682b      	ldr	r3, [r5, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1eb      	bne.n	8005070 <pbuf_copy+0x6e>
  } while (p_from);
 8005098:	2c00      	cmp	r4, #0
 800509a:	d1c4      	bne.n	8005026 <pbuf_copy+0x24>
 800509c:	e7e5      	b.n	800506a <pbuf_copy+0x68>

0800509e <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a2:	460f      	mov	r7, r1
 80050a4:	4690      	mov	r8, r2
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80050a6:	4606      	mov	r6, r0
 80050a8:	b320      	cbz	r0, 80050f4 <pbuf_copy_partial+0x56>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80050aa:	b329      	cbz	r1, 80050f8 <pbuf_copy_partial+0x5a>
 80050ac:	2500      	movs	r5, #0
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 80050ae:	f1b8 0f00 	cmp.w	r8, #0
 80050b2:	d000      	beq.n	80050b6 <pbuf_copy_partial+0x18>
 80050b4:	b916      	cbnz	r6, 80050bc <pbuf_copy_partial+0x1e>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80050b6:	4628      	mov	r0, r5
 80050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((offset != 0) && (offset >= p->len)) {
 80050bc:	b133      	cbz	r3, 80050cc <pbuf_copy_partial+0x2e>
 80050be:	8971      	ldrh	r1, [r6, #10]
 80050c0:	428b      	cmp	r3, r1
 80050c2:	d303      	bcc.n	80050cc <pbuf_copy_partial+0x2e>
      offset -= p->len;
 80050c4:	1a5b      	subs	r3, r3, r1
 80050c6:	b29b      	uxth	r3, r3
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 80050c8:	6836      	ldr	r6, [r6, #0]
 80050ca:	e7f0      	b.n	80050ae <pbuf_copy_partial+0x10>
      buf_copy_len = p->len - offset;
 80050cc:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80050ce:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 80050d0:	1ae4      	subs	r4, r4, r3
 80050d2:	b2a4      	uxth	r4, r4
 80050d4:	4544      	cmp	r4, r8
 80050d6:	bf28      	it	cs
 80050d8:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80050da:	4622      	mov	r2, r4
 80050dc:	4419      	add	r1, r3
 80050de:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 80050e0:	4425      	add	r5, r4
      len -= buf_copy_len;
 80050e2:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80050e6:	f002 ff54 	bl	8007f92 <memcpy>
      copied_total += buf_copy_len;
 80050ea:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 80050ec:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e7e9      	b.n	80050c8 <pbuf_copy_partial+0x2a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80050f4:	4605      	mov	r5, r0
 80050f6:	e7de      	b.n	80050b6 <pbuf_copy_partial+0x18>
 80050f8:	460d      	mov	r5, r1
 80050fa:	e7dc      	b.n	80050b6 <pbuf_copy_partial+0x18>

080050fc <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80050fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t eaten = 0;

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);
 8005100:	6843      	ldr	r3, [r0, #4]

  prev = NULL;
  pcb = raw_pcbs;
 8005102:	4d1a      	ldr	r5, [pc, #104]	; (800516c <raw_input+0x70>)
  proto = IPH_PROTO(iphdr);
 8005104:	f893 8009 	ldrb.w	r8, [r3, #9]
  pcb = raw_pcbs;
 8005108:	682c      	ldr	r4, [r5, #0]
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 800510a:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8005170 <raw_input+0x74>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 800510e:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005174 <raw_input+0x78>
{
 8005112:	4607      	mov	r7, r0
  prev = NULL;
 8005114:	2600      	movs	r6, #0
  while ((eaten == 0) && (pcb != NULL)) {
 8005116:	b914      	cbnz	r4, 800511e <raw_input+0x22>
 8005118:	4620      	mov	r0, r4
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
}
 800511a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pcb->protocol == proto) &&
 800511e:	7c23      	ldrb	r3, [r4, #16]
 8005120:	4543      	cmp	r3, r8
 8005122:	d11e      	bne.n	8005162 <raw_input+0x66>
        (ip_addr_isany(&pcb->local_ip) ||
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	b11b      	cbz	r3, 8005130 <raw_input+0x34>
 8005128:	f8da 2000 	ldr.w	r2, [sl]
 800512c:	4293      	cmp	r3, r2
 800512e:	d118      	bne.n	8005162 <raw_input+0x66>
        if (pcb->recv != NULL) {
 8005130:	f8d4 b014 	ldr.w	fp, [r4, #20]
 8005134:	f1bb 0f00 	cmp.w	fp, #0
 8005138:	d013      	beq.n	8005162 <raw_input+0x66>
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 800513a:	464b      	mov	r3, r9
 800513c:	463a      	mov	r2, r7
 800513e:	4621      	mov	r1, r4
 8005140:	69a0      	ldr	r0, [r4, #24]
 8005142:	47d8      	blx	fp
 8005144:	b138      	cbz	r0, 8005156 <raw_input+0x5a>
            if (prev != NULL) {
 8005146:	b176      	cbz	r6, 8005166 <raw_input+0x6a>
              prev->next = pcb->next;
 8005148:	68e3      	ldr	r3, [r4, #12]
 800514a:	60f3      	str	r3, [r6, #12]
              pcb->next = raw_pcbs;
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	60e3      	str	r3, [r4, #12]
              raw_pcbs = pcb;
 8005150:	602c      	str	r4, [r5, #0]
            eaten = 1;
 8005152:	2001      	movs	r0, #1
            p = NULL;
 8005154:	2700      	movs	r7, #0
    pcb = pcb->next;
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	4626      	mov	r6, r4
  while ((eaten == 0) && (pcb != NULL)) {
 800515a:	2800      	cmp	r0, #0
 800515c:	d1dd      	bne.n	800511a <raw_input+0x1e>
    pcb = pcb->next;
 800515e:	461c      	mov	r4, r3
 8005160:	e7d9      	b.n	8005116 <raw_input+0x1a>
 8005162:	2000      	movs	r0, #0
 8005164:	e7f7      	b.n	8005156 <raw_input+0x5a>
            eaten = 1;
 8005166:	2001      	movs	r0, #1
            p = NULL;
 8005168:	4637      	mov	r7, r6
 800516a:	e7f4      	b.n	8005156 <raw_input+0x5a>
 800516c:	20007778 	.word	0x20007778
 8005170:	200089c0 	.word	0x200089c0
 8005174:	200089c8 	.word	0x200089c8

08005178 <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
 8005178:	4770      	bx	lr

0800517a <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800517a:	4770      	bx	lr

0800517c <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800517c:	b570      	push	{r4, r5, r6, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800517e:	6b01      	ldr	r1, [r0, #48]	; 0x30
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005180:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
 8005182:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8005184:	4602      	mov	r2, r0
 8005186:	1a6b      	subs	r3, r5, r1
 8005188:	1918      	adds	r0, r3, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800518a:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
 800518c:	f640 3668 	movw	r6, #2920	; 0xb68
 8005190:	42b3      	cmp	r3, r6
 8005192:	bf94      	ite	ls
 8005194:	1ac3      	subls	r3, r0, r3
 8005196:	1b83      	subhi	r3, r0, r6
 8005198:	2b00      	cmp	r3, #0
 800519a:	db01      	blt.n	80051a0 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800519c:	85d5      	strh	r5, [r2, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 800519e:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80051a0:	1a63      	subs	r3, r4, r1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f04f 0000 	mov.w	r0, #0
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80051a8:	bfd6      	itet	le
 80051aa:	1b09      	suble	r1, r1, r4
      pcb->rcv_ann_wnd = 0;
 80051ac:	85d0      	strhgt	r0, [r2, #46]	; 0x2e
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 80051ae:	85d1      	strhle	r1, [r2, #46]	; 0x2e
    }
    return 0;
  }
}
 80051b0:	bd70      	pop	{r4, r5, r6, pc}

080051b2 <tcp_recved>:
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 80051b2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80051b4:	4419      	add	r1, r3
 80051b6:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND) {
 80051b8:	f241 63d0 	movw	r3, #5840	; 0x16d0
 80051bc:	4299      	cmp	r1, r3
{
 80051be:	b510      	push	{r4, lr}
    pcb->rcv_wnd = TCP_WND;
 80051c0:	bf8c      	ite	hi
 80051c2:	8583      	strhhi	r3, [r0, #44]	; 0x2c
  pcb->rcv_wnd += len;
 80051c4:	8581      	strhls	r1, [r0, #44]	; 0x2c
{
 80051c6:	4604      	mov	r4, r0
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80051c8:	f7ff ffd8 	bl	800517c <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80051cc:	f240 53b3 	movw	r3, #1459	; 0x5b3
 80051d0:	4298      	cmp	r0, r3
 80051d2:	dd08      	ble.n	80051e6 <tcp_recved+0x34>
    tcp_ack_now(pcb);
 80051d4:	7fa3      	ldrb	r3, [r4, #30]
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 80051dc:	4620      	mov	r0, r4
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 80051de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_output(pcb);
 80051e2:	f001 be25 	b.w	8006e30 <tcp_output>
 80051e6:	bd10      	pop	{r4, pc}

080051e8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80051e8:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80051ea:	4604      	mov	r4, r0
 80051ec:	b148      	cbz	r0, 8005202 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80051ee:	6840      	ldr	r0, [r0, #4]
 80051f0:	b108      	cbz	r0, 80051f6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80051f2:	f7ff fe0a 	bl	8004e0a <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80051f6:	4621      	mov	r1, r4
 80051f8:	2004      	movs	r0, #4
  }
}
 80051fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80051fe:	f7ff bd35 	b.w	8004c6c <memp_free>
 8005202:	bd10      	pop	{r4, pc}

08005204 <tcp_segs_free>:
{
 8005204:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8005206:	b900      	cbnz	r0, 800520a <tcp_segs_free+0x6>
}
 8005208:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800520a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800520c:	f7ff ffec 	bl	80051e8 <tcp_seg_free>
    seg = next;
 8005210:	4620      	mov	r0, r4
 8005212:	e7f8      	b.n	8005206 <tcp_segs_free+0x2>

08005214 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005218:	2004      	movs	r0, #4
 800521a:	f7ff fcfd 	bl	8004c18 <memp_malloc>
  if (cseg == NULL) {
 800521e:	4605      	mov	r5, r0
 8005220:	b160      	cbz	r0, 800523c <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
 8005222:	4620      	mov	r0, r4
 8005224:	462b      	mov	r3, r5
 8005226:	f104 0210 	add.w	r2, r4, #16
 800522a:	f850 1b04 	ldr.w	r1, [r0], #4
 800522e:	f843 1b04 	str.w	r1, [r3], #4
 8005232:	4290      	cmp	r0, r2
 8005234:	d1f9      	bne.n	800522a <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8005236:	6868      	ldr	r0, [r5, #4]
 8005238:	f7ff fec8 	bl	8004fcc <pbuf_ref>
  return cseg;
}
 800523c:	4628      	mov	r0, r5
 800523e:	bd38      	pop	{r3, r4, r5, pc}

08005240 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005240:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8005242:	7e03      	ldrb	r3, [r0, #24]
 8005244:	2b01      	cmp	r3, #1
{
 8005246:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8005248:	d919      	bls.n	800527e <tcp_pcb_purge+0x3e>
 800524a:	2b0a      	cmp	r3, #10
 800524c:	d017      	beq.n	800527e <tcp_pcb_purge+0x3e>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 800524e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005250:	b118      	cbz	r0, 800525a <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005252:	f7ff fdda 	bl	8004e0a <pbuf_free>
      pcb->refused_data = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	67a3      	str	r3, [r4, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800525a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800525c:	f7ff ffd2 	bl	8005204 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005260:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005266:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 8005268:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->ooseq = NULL;
 800526a:	6765      	str	r5, [r4, #116]	; 0x74
    tcp_segs_free(pcb->unsent);
 800526c:	f7ff ffca 	bl	8005204 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005270:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005272:	f7ff ffc7 	bl	8005204 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005276:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005278:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800527a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
 800527e:	bd38      	pop	{r3, r4, r5, pc}

08005280 <tcp_slowtmr>:
{
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8005284:	4dac      	ldr	r5, [pc, #688]	; (8005538 <tcp_slowtmr+0x2b8>)
  ++tcp_timer_ctr;
 8005286:	4fad      	ldr	r7, [pc, #692]	; (800553c <tcp_slowtmr+0x2bc>)
  ++tcp_ticks;
 8005288:	682b      	ldr	r3, [r5, #0]
      tcp_active_pcbs_changed = 0;
 800528a:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8005550 <tcp_slowtmr+0x2d0>
  ++tcp_ticks;
 800528e:	3301      	adds	r3, #1
 8005290:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8005292:	783b      	ldrb	r3, [r7, #0]
{
 8005294:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8005296:	3301      	adds	r3, #1
 8005298:	703b      	strb	r3, [r7, #0]
 800529a:	9702      	str	r7, [sp, #8]
  pcb = tcp_active_pcbs;
 800529c:	4ba8      	ldr	r3, [pc, #672]	; (8005540 <tcp_slowtmr+0x2c0>)
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800529e:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8005554 <tcp_slowtmr+0x2d4>
  pcb = tcp_active_pcbs;
 80052a2:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 80052a4:	2600      	movs	r6, #0
 80052a6:	4698      	mov	r8, r3
  while (pcb != NULL) {
 80052a8:	b93c      	cbnz	r4, 80052ba <tcp_slowtmr+0x3a>
  pcb = tcp_tw_pcbs;
 80052aa:	4fa6      	ldr	r7, [pc, #664]	; (8005544 <tcp_slowtmr+0x2c4>)
 80052ac:	683e      	ldr	r6, [r7, #0]
  while (pcb != NULL) {
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	f040 8129 	bne.w	8005506 <tcp_slowtmr+0x286>
}
 80052b4:	b005      	add	sp, #20
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->last_timer == tcp_timer_ctr) {
 80052ba:	9b02      	ldr	r3, [sp, #8]
 80052bc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d105      	bne.n	80052d2 <tcp_slowtmr+0x52>
      pcb = pcb->next;
 80052c6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80052ca:	4634      	mov	r4, r6
      continue;
 80052cc:	4626      	mov	r6, r4
 80052ce:	4654      	mov	r4, sl
 80052d0:	e7ea      	b.n	80052a8 <tcp_slowtmr+0x28>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80052d2:	7e20      	ldrb	r0, [r4, #24]
    pcb->last_timer = tcp_timer_ctr;
 80052d4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 80052d8:	2802      	cmp	r0, #2
 80052da:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 80052de:	d102      	bne.n	80052e6 <tcp_slowtmr+0x66>
 80052e0:	2906      	cmp	r1, #6
 80052e2:	f000 80ce 	beq.w	8005482 <tcp_slowtmr+0x202>
    else if (pcb->nrtx == TCP_MAXRTX) {
 80052e6:	290c      	cmp	r1, #12
 80052e8:	f000 80cb 	beq.w	8005482 <tcp_slowtmr+0x202>
      if (pcb->persist_backoff > 0) {
 80052ec:	f894 7095 	ldrb.w	r7, [r4, #149]	; 0x95
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	f000 8090 	beq.w	8005416 <tcp_slowtmr+0x196>
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 80052f6:	4994      	ldr	r1, [pc, #592]	; (8005548 <tcp_slowtmr+0x2c8>)
        pcb->persist_cnt++;
 80052f8:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 80052fc:	4439      	add	r1, r7
        pcb->persist_cnt++;
 80052fe:	3201      	adds	r2, #1
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 8005300:	f811 1c01 	ldrb.w	r1, [r1, #-1]
        pcb->persist_cnt++;
 8005304:	b2d2      	uxtb	r2, r2
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 8005306:	4291      	cmp	r1, r2
        pcb->persist_cnt++;
 8005308:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 800530c:	d975      	bls.n	80053fa <tcp_slowtmr+0x17a>
    pcb_remove = 0;
 800530e:	2700      	movs	r7, #0
    if (pcb->state == FIN_WAIT_2) {
 8005310:	7e22      	ldrb	r2, [r4, #24]
 8005312:	2a06      	cmp	r2, #6
 8005314:	d109      	bne.n	800532a <tcp_slowtmr+0xaa>
      if (pcb->flags & TF_RXCLOSED) {
 8005316:	7fa1      	ldrb	r1, [r4, #30]
 8005318:	06cb      	lsls	r3, r1, #27
 800531a:	d506      	bpl.n	800532a <tcp_slowtmr+0xaa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800531c:	6829      	ldr	r1, [r5, #0]
 800531e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005320:	1a09      	subs	r1, r1, r0
 8005322:	2928      	cmp	r1, #40	; 0x28
          ++pcb_remove;
 8005324:	bf84      	itt	hi
 8005326:	1c7b      	addhi	r3, r7, #1
 8005328:	b2df      	uxtbhi	r7, r3
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 800532a:	f894 a008 	ldrb.w	sl, [r4, #8]
 800532e:	f01a 0a08 	ands.w	sl, sl, #8
 8005332:	d018      	beq.n	8005366 <tcp_slowtmr+0xe6>
 8005334:	2a04      	cmp	r2, #4
 8005336:	d002      	beq.n	800533e <tcp_slowtmr+0xbe>
       ((pcb->state == ESTABLISHED) ||
 8005338:	2a07      	cmp	r2, #7
 800533a:	f040 80b4 	bne.w	80054a6 <tcp_slowtmr+0x226>
      if((u32_t)(tcp_ticks - pcb->tmr) >
 800533e:	6828      	ldr	r0, [r5, #0]
 8005340:	6a62      	ldr	r2, [r4, #36]	; 0x24
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005342:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if((u32_t)(tcp_ticks - pcb->tmr) >
 8005346:	1a80      	subs	r0, r0, r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005348:	f503 2124 	add.w	r1, r3, #671744	; 0xa4000
 800534c:	f601 41b8 	addw	r1, r1, #3256	; 0xcb8
 8005350:	f44f 7efa 	mov.w	lr, #500	; 0x1f4
 8005354:	fbb1 f1fe 	udiv	r1, r1, lr
      if((u32_t)(tcp_ticks - pcb->tmr) >
 8005358:	4288      	cmp	r0, r1
 800535a:	f240 8094 	bls.w	8005486 <tcp_slowtmr+0x206>
        ++pcb_remove;
 800535e:	1c7b      	adds	r3, r7, #1
 8005360:	b2df      	uxtb	r7, r3
        ++pcb_reset;
 8005362:	f04f 0a01 	mov.w	sl, #1
    if (pcb->ooseq != NULL &&
 8005366:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005368:	b168      	cbz	r0, 8005386 <tcp_slowtmr+0x106>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800536a:	682a      	ldr	r2, [r5, #0]
 800536c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800536e:	1a51      	subs	r1, r2, r1
 8005370:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
 8005374:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (pcb->ooseq != NULL &&
 8005378:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 800537c:	d303      	bcc.n	8005386 <tcp_slowtmr+0x106>
      tcp_segs_free(pcb->ooseq);
 800537e:	f7ff ff41 	bl	8005204 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005382:	2200      	movs	r2, #0
 8005384:	6762      	str	r2, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 8005386:	7e22      	ldrb	r2, [r4, #24]
 8005388:	2a03      	cmp	r2, #3
 800538a:	f040 808f 	bne.w	80054ac <tcp_slowtmr+0x22c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800538e:	682a      	ldr	r2, [r5, #0]
 8005390:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005392:	1a52      	subs	r2, r2, r1
 8005394:	2a28      	cmp	r2, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005396:	d802      	bhi.n	800539e <tcp_slowtmr+0x11e>
    if (pcb_remove) {
 8005398:	2f00      	cmp	r7, #0
 800539a:	f000 8092 	beq.w	80054c2 <tcp_slowtmr+0x242>
      tcp_pcb_purge(pcb);
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff ff4e 	bl	8005240 <tcp_pcb_purge>
 80053a4:	68e3      	ldr	r3, [r4, #12]
      if (prev != NULL) {
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	f000 8088 	beq.w	80054bc <tcp_slowtmr+0x23c>
        prev->next = pcb->next;
 80053ac:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 80053ae:	f1ba 0f00 	cmp.w	sl, #0
 80053b2:	d009      	beq.n	80053c8 <tcp_slowtmr+0x148>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80053b4:	8ba3      	ldrh	r3, [r4, #28]
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	8b63      	ldrh	r3, [r4, #26]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	4622      	mov	r2, r4
 80053be:	1d23      	adds	r3, r4, #4
 80053c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80053c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80053c4:	f001 fe7a 	bl	80070bc <tcp_rst>
      err_arg = pcb->callback_arg;
 80053c8:	6922      	ldr	r2, [r4, #16]
      err_fn = pcb->errf;
 80053ca:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
 80053ce:	9203      	str	r2, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80053d0:	4621      	mov	r1, r4
 80053d2:	2002      	movs	r0, #2
      pcb = pcb->next;
 80053d4:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80053d8:	f7ff fc48 	bl	8004c6c <memp_free>
      tcp_active_pcbs_changed = 0;
 80053dc:	2100      	movs	r1, #0
 80053de:	f889 1000 	strb.w	r1, [r9]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 80053e2:	b127      	cbz	r7, 80053ee <tcp_slowtmr+0x16e>
 80053e4:	9a03      	ldr	r2, [sp, #12]
 80053e6:	f06f 0109 	mvn.w	r1, #9
 80053ea:	4610      	mov	r0, r2
 80053ec:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 80053ee:	f899 3000 	ldrb.w	r3, [r9]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f43f af69 	beq.w	80052ca <tcp_slowtmr+0x4a>
 80053f8:	e750      	b.n	800529c <tcp_slowtmr+0x1c>
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80053fa:	2f06      	cmp	r7, #6
          pcb->persist_cnt = 0;
 80053fc:	f04f 0200 	mov.w	r2, #0
            pcb->persist_backoff++;
 8005400:	bf98      	it	ls
 8005402:	1c7b      	addls	r3, r7, #1
          pcb->persist_cnt = 0;
 8005404:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
            pcb->persist_backoff++;
 8005408:	bf98      	it	ls
 800540a:	f884 3095 	strbls.w	r3, [r4, #149]	; 0x95
          tcp_zero_window_probe(pcb);
 800540e:	4620      	mov	r0, r4
 8005410:	f001 ff44 	bl	800729c <tcp_zero_window_probe>
 8005414:	e77b      	b.n	800530e <tcp_slowtmr+0x8e>
        if(pcb->rtime >= 0) {
 8005416:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800541a:	2a00      	cmp	r2, #0
          ++pcb->rtime;
 800541c:	bfa4      	itt	ge
 800541e:	3201      	addge	r2, #1
 8005420:	86a2      	strhge	r2, [r4, #52]	; 0x34
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005422:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005424:	2a00      	cmp	r2, #0
 8005426:	f43f af72 	beq.w	800530e <tcp_slowtmr+0x8e>
 800542a:	f9b4 e034 	ldrsh.w	lr, [r4, #52]	; 0x34
 800542e:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
 8005432:	4596      	cmp	lr, r2
 8005434:	f6ff af6b 	blt.w	800530e <tcp_slowtmr+0x8e>
          if (pcb->state != SYN_SENT) {
 8005438:	2802      	cmp	r0, #2
 800543a:	d00a      	beq.n	8005452 <tcp_slowtmr+0x1d2>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 800543c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8005440:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8005444:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8005448:	4840      	ldr	r0, [pc, #256]	; (800554c <tcp_slowtmr+0x2cc>)
 800544a:	5c41      	ldrb	r1, [r0, r1]
 800544c:	408a      	lsls	r2, r1
 800544e:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
          pcb->rtime = 0;
 8005452:	2200      	movs	r2, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005454:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
          pcb->rtime = 0;
 8005458:	86a2      	strh	r2, [r4, #52]	; 0x34
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800545a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
          pcb->ssthresh = eff_wnd >> 1;
 800545e:	428a      	cmp	r2, r1
 8005460:	bf28      	it	cs
 8005462:	460a      	movcs	r2, r1
          if (pcb->ssthresh < (pcb->mss << 1)) {
 8005464:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
          pcb->cwnd = pcb->mss;
 8005466:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
          if (pcb->ssthresh < (pcb->mss << 1)) {
 800546a:	0048      	lsls	r0, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 800546c:	0852      	lsrs	r2, r2, #1
          if (pcb->ssthresh < (pcb->mss << 1)) {
 800546e:	4282      	cmp	r2, r0
          pcb->ssthresh = eff_wnd >> 1;
 8005470:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
            pcb->ssthresh = (pcb->mss << 1);
 8005474:	bfb8      	it	lt
 8005476:	f8a4 004e 	strhlt.w	r0, [r4, #78]	; 0x4e
          tcp_rexmit_rto(pcb);
 800547a:	4620      	mov	r0, r4
 800547c:	f001 fe74 	bl	8007168 <tcp_rexmit_rto>
 8005480:	e746      	b.n	8005310 <tcp_slowtmr+0x90>
      ++pcb_remove;
 8005482:	2701      	movs	r7, #1
 8005484:	e744      	b.n	8005310 <tcp_slowtmr+0x90>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005486:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
 800548a:	fb0b 3202 	mla	r2, fp, r2, r3
              / TCP_SLOW_INTERVAL)
 800548e:	fbb2 f2fe 	udiv	r2, r2, lr
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 8005492:	4290      	cmp	r0, r2
 8005494:	d907      	bls.n	80054a6 <tcp_slowtmr+0x226>
        tcp_keepalive(pcb);
 8005496:	4620      	mov	r0, r4
 8005498:	f001 fece 	bl	8007238 <tcp_keepalive>
        pcb->keep_cnt_sent++;
 800549c:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
 80054a0:	3201      	adds	r2, #1
 80054a2:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
    pcb_reset = 0;
 80054a6:	f04f 0a00 	mov.w	sl, #0
 80054aa:	e75c      	b.n	8005366 <tcp_slowtmr+0xe6>
    if (pcb->state == LAST_ACK) {
 80054ac:	2a09      	cmp	r2, #9
 80054ae:	f47f af73 	bne.w	8005398 <tcp_slowtmr+0x118>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80054b2:	682a      	ldr	r2, [r5, #0]
 80054b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054b6:	1a52      	subs	r2, r2, r1
 80054b8:	2af0      	cmp	r2, #240	; 0xf0
 80054ba:	e76c      	b.n	8005396 <tcp_slowtmr+0x116>
        tcp_active_pcbs = pcb->next;
 80054bc:	f8c8 3000 	str.w	r3, [r8]
 80054c0:	e775      	b.n	80053ae <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 80054c2:	7fe2      	ldrb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 80054c4:	f894 1020 	ldrb.w	r1, [r4, #32]
      pcb = pcb->next;
 80054c8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 80054cc:	3201      	adds	r2, #1
 80054ce:	b2d2      	uxtb	r2, r2
      if (prev->polltmr >= prev->pollinterval) {
 80054d0:	4291      	cmp	r1, r2
      ++prev->polltmr;
 80054d2:	77e2      	strb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 80054d4:	f63f aefa 	bhi.w	80052cc <tcp_slowtmr+0x4c>
        TCP_EVENT_POLL(prev, err);
 80054d8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80054dc:	77e7      	strb	r7, [r4, #31]
        tcp_active_pcbs_changed = 0;
 80054de:	f889 7000 	strb.w	r7, [r9]
        TCP_EVENT_POLL(prev, err);
 80054e2:	b172      	cbz	r2, 8005502 <tcp_slowtmr+0x282>
 80054e4:	4621      	mov	r1, r4
 80054e6:	6920      	ldr	r0, [r4, #16]
 80054e8:	4790      	blx	r2
        if (tcp_active_pcbs_changed) {
 80054ea:	f899 3000 	ldrb.w	r3, [r9]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f47f aed4 	bne.w	800529c <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f47f aee9 	bne.w	80052cc <tcp_slowtmr+0x4c>
          tcp_output(prev);
 80054fa:	4620      	mov	r0, r4
 80054fc:	f001 fc98 	bl	8006e30 <tcp_output>
 8005500:	e6e4      	b.n	80052cc <tcp_slowtmr+0x4c>
        TCP_EVENT_POLL(prev, err);
 8005502:	4638      	mov	r0, r7
 8005504:	e7f1      	b.n	80054ea <tcp_slowtmr+0x26a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005506:	682b      	ldr	r3, [r5, #0]
 8005508:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	2bf0      	cmp	r3, #240	; 0xf0
 800550e:	d80b      	bhi.n	8005528 <tcp_slowtmr+0x2a8>
      pcb = pcb->next;
 8005510:	4634      	mov	r4, r6
 8005512:	68f6      	ldr	r6, [r6, #12]
 8005514:	e6cb      	b.n	80052ae <tcp_slowtmr+0x2e>
        prev->next = pcb->next;
 8005516:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8005518:	f8d6 800c 	ldr.w	r8, [r6, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800551c:	4631      	mov	r1, r6
 800551e:	2002      	movs	r0, #2
 8005520:	f7ff fba4 	bl	8004c6c <memp_free>
      pcb = pcb->next;
 8005524:	4646      	mov	r6, r8
 8005526:	e6c2      	b.n	80052ae <tcp_slowtmr+0x2e>
      tcp_pcb_purge(pcb);
 8005528:	4630      	mov	r0, r6
 800552a:	f7ff fe89 	bl	8005240 <tcp_pcb_purge>
 800552e:	68f3      	ldr	r3, [r6, #12]
      if (prev != NULL) {
 8005530:	2c00      	cmp	r4, #0
 8005532:	d1f0      	bne.n	8005516 <tcp_slowtmr+0x296>
        tcp_tw_pcbs = pcb->next;
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	e7ef      	b.n	8005518 <tcp_slowtmr+0x298>
 8005538:	2000b21c 	.word	0x2000b21c
 800553c:	2000777d 	.word	0x2000777d
 8005540:	2000b218 	.word	0x2000b218
 8005544:	2000b22c 	.word	0x2000b22c
 8005548:	08008119 	.word	0x08008119
 800554c:	0800810c 	.word	0x0800810c
 8005550:	2000b214 	.word	0x2000b214
 8005554:	000124f8 	.word	0x000124f8

08005558 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8005558:	6803      	ldr	r3, [r0, #0]
 800555a:	428b      	cmp	r3, r1
{
 800555c:	b510      	push	{r4, lr}
 800555e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8005560:	d117      	bne.n	8005592 <tcp_pcb_remove+0x3a>
 8005562:	68cb      	ldr	r3, [r1, #12]
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff fe68 	bl	8005240 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005570:	7e23      	ldrb	r3, [r4, #24]
 8005572:	2b0a      	cmp	r3, #10
 8005574:	d00a      	beq.n	800558c <tcp_pcb_remove+0x34>
 8005576:	2b01      	cmp	r3, #1
 8005578:	d008      	beq.n	800558c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800557a:	7fa3      	ldrb	r3, [r4, #30]
     pcb->state != LISTEN &&
 800557c:	07da      	lsls	r2, r3, #31
 800557e:	d505      	bpl.n	800558c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 8005586:	4620      	mov	r0, r4
 8005588:	f001 fc52 	bl	8006e30 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800558c:	2300      	movs	r3, #0
 800558e:	7623      	strb	r3, [r4, #24]
 8005590:	bd10      	pop	{r4, pc}
  TCP_RMV(pcblist, pcb);
 8005592:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <tcp_pcb_remove+0x60>)
 8005594:	2100      	movs	r1, #0
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	b91b      	cbnz	r3, 80055a2 <tcp_pcb_remove+0x4a>
 800559a:	2900      	cmp	r1, #0
 800559c:	d0e3      	beq.n	8005566 <tcp_pcb_remove+0xe>
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e7e1      	b.n	8005566 <tcp_pcb_remove+0xe>
 80055a2:	68d8      	ldr	r0, [r3, #12]
 80055a4:	4284      	cmp	r4, r0
 80055a6:	d104      	bne.n	80055b2 <tcp_pcb_remove+0x5a>
 80055a8:	b101      	cbz	r1, 80055ac <tcp_pcb_remove+0x54>
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	68e2      	ldr	r2, [r4, #12]
 80055ae:	60da      	str	r2, [r3, #12]
 80055b0:	e7d9      	b.n	8005566 <tcp_pcb_remove+0xe>
 80055b2:	2101      	movs	r1, #1
 80055b4:	4603      	mov	r3, r0
 80055b6:	e7ef      	b.n	8005598 <tcp_pcb_remove+0x40>
 80055b8:	2000b224 	.word	0x2000b224

080055bc <tcp_close_shutdown>:
{
 80055bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055be:	7e03      	ldrb	r3, [r0, #24]
 80055c0:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d041      	beq.n	800564a <tcp_close_shutdown+0x8e>
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d001      	beq.n	80055ce <tcp_close_shutdown+0x12>
 80055ca:	2b07      	cmp	r3, #7
 80055cc:	d13d      	bne.n	800564a <tcp_close_shutdown+0x8e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 80055ce:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80055d0:	b922      	cbnz	r2, 80055dc <tcp_close_shutdown+0x20>
 80055d2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80055d4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80055d8:	4291      	cmp	r1, r2
 80055da:	d036      	beq.n	800564a <tcp_close_shutdown+0x8e>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80055dc:	8ba3      	ldrh	r3, [r4, #28]
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	8b63      	ldrh	r3, [r4, #26]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	4622      	mov	r2, r4
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80055ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80055ec:	f001 fd66 	bl	80070bc <tcp_rst>
      tcp_pcb_purge(pcb);
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7ff fe25 	bl	8005240 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80055f6:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <tcp_close_shutdown+0x13c>)
 80055f8:	6813      	ldr	r3, [r2, #0]
 80055fa:	429c      	cmp	r4, r3
 80055fc:	d102      	bne.n	8005604 <tcp_close_shutdown+0x48>
 80055fe:	68e3      	ldr	r3, [r4, #12]
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e00c      	b.n	800561e <tcp_close_shutdown+0x62>
 8005604:	4a3d      	ldr	r2, [pc, #244]	; (80056fc <tcp_close_shutdown+0x140>)
 8005606:	2100      	movs	r1, #0
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	b90b      	cbnz	r3, 8005610 <tcp_close_shutdown+0x54>
 800560c:	b139      	cbz	r1, 800561e <tcp_close_shutdown+0x62>
 800560e:	e7f7      	b.n	8005600 <tcp_close_shutdown+0x44>
 8005610:	68d8      	ldr	r0, [r3, #12]
 8005612:	4284      	cmp	r4, r0
 8005614:	d116      	bne.n	8005644 <tcp_close_shutdown+0x88>
 8005616:	b101      	cbz	r1, 800561a <tcp_close_shutdown+0x5e>
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	68e2      	ldr	r2, [r4, #12]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	4b38      	ldr	r3, [pc, #224]	; (8005700 <tcp_close_shutdown+0x144>)
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005624:	7e23      	ldrb	r3, [r4, #24]
      TCP_RMV_ACTIVE(pcb);
 8005626:	2500      	movs	r5, #0
      if (pcb->state == ESTABLISHED) {
 8005628:	2b04      	cmp	r3, #4
      TCP_RMV_ACTIVE(pcb);
 800562a:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 800562c:	d13a      	bne.n	80056a4 <tcp_close_shutdown+0xe8>
        pcb->state = TIME_WAIT;
 800562e:	230a      	movs	r3, #10
 8005630:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005632:	4b34      	ldr	r3, [pc, #208]	; (8005704 <tcp_close_shutdown+0x148>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	60e2      	str	r2, [r4, #12]
 8005638:	601c      	str	r4, [r3, #0]
 800563a:	f001 feb9 	bl	80073b0 <tcp_timer_needed>
    tcp_output(pcb);
 800563e:	2000      	movs	r0, #0
}
 8005640:	b003      	add	sp, #12
 8005642:	bd30      	pop	{r4, r5, pc}
 8005644:	2101      	movs	r1, #1
 8005646:	4603      	mov	r3, r0
 8005648:	e7df      	b.n	800560a <tcp_close_shutdown+0x4e>
  switch (pcb->state) {
 800564a:	2b07      	cmp	r3, #7
 800564c:	d8f7      	bhi.n	800563e <tcp_close_shutdown+0x82>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <tcp_close_shutdown+0x98>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005675 	.word	0x08005675
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056c3 	.word	0x080056c3
 8005660:	080056d3 	.word	0x080056d3
 8005664:	080056d3 	.word	0x080056d3
 8005668:	0800563f 	.word	0x0800563f
 800566c:	0800563f 	.word	0x0800563f
 8005670:	080056e9 	.word	0x080056e9
    if (pcb->local_port != 0) {
 8005674:	8b63      	ldrh	r3, [r4, #26]
 8005676:	b1ab      	cbz	r3, 80056a4 <tcp_close_shutdown+0xe8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005678:	4a23      	ldr	r2, [pc, #140]	; (8005708 <tcp_close_shutdown+0x14c>)
 800567a:	6813      	ldr	r3, [r2, #0]
 800567c:	429c      	cmp	r4, r3
 800567e:	d102      	bne.n	8005686 <tcp_close_shutdown+0xca>
 8005680:	68e3      	ldr	r3, [r4, #12]
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e00c      	b.n	80056a0 <tcp_close_shutdown+0xe4>
 8005686:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <tcp_close_shutdown+0x140>)
 8005688:	2100      	movs	r1, #0
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	b90b      	cbnz	r3, 8005692 <tcp_close_shutdown+0xd6>
 800568e:	b139      	cbz	r1, 80056a0 <tcp_close_shutdown+0xe4>
 8005690:	e7f7      	b.n	8005682 <tcp_close_shutdown+0xc6>
 8005692:	68d8      	ldr	r0, [r3, #12]
 8005694:	4284      	cmp	r4, r0
 8005696:	d108      	bne.n	80056aa <tcp_close_shutdown+0xee>
 8005698:	b101      	cbz	r1, 800569c <tcp_close_shutdown+0xe0>
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	68e2      	ldr	r2, [r4, #12]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	2300      	movs	r3, #0
 80056a2:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 80056a4:	4621      	mov	r1, r4
 80056a6:	2002      	movs	r0, #2
 80056a8:	e008      	b.n	80056bc <tcp_close_shutdown+0x100>
 80056aa:	2101      	movs	r1, #1
 80056ac:	4603      	mov	r3, r0
 80056ae:	e7ed      	b.n	800568c <tcp_close_shutdown+0xd0>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80056b0:	4621      	mov	r1, r4
 80056b2:	4816      	ldr	r0, [pc, #88]	; (800570c <tcp_close_shutdown+0x150>)
 80056b4:	f7ff ff50 	bl	8005558 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80056b8:	4621      	mov	r1, r4
 80056ba:	2003      	movs	r0, #3
    memp_free(MEMP_TCP_PCB, pcb);
 80056bc:	f7ff fad6 	bl	8004c6c <memp_free>
 80056c0:	e7bd      	b.n	800563e <tcp_close_shutdown+0x82>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80056c2:	4621      	mov	r1, r4
 80056c4:	480c      	ldr	r0, [pc, #48]	; (80056f8 <tcp_close_shutdown+0x13c>)
 80056c6:	f7ff ff47 	bl	8005558 <tcp_pcb_remove>
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <tcp_close_shutdown+0x144>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e7e8      	b.n	80056a4 <tcp_close_shutdown+0xe8>
    err = tcp_send_fin(pcb);
 80056d2:	4620      	mov	r0, r4
 80056d4:	f001 fb5c 	bl	8006d90 <tcp_send_fin>
    if (err == ERR_OK) {
 80056d8:	2800      	cmp	r0, #0
 80056da:	d1b1      	bne.n	8005640 <tcp_close_shutdown+0x84>
      pcb->state = FIN_WAIT_1;
 80056dc:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80056de:	7623      	strb	r3, [r4, #24]
    tcp_output(pcb);
 80056e0:	4620      	mov	r0, r4
 80056e2:	f001 fba5 	bl	8006e30 <tcp_output>
 80056e6:	e7aa      	b.n	800563e <tcp_close_shutdown+0x82>
    err = tcp_send_fin(pcb);
 80056e8:	4620      	mov	r0, r4
 80056ea:	f001 fb51 	bl	8006d90 <tcp_send_fin>
    if (err == ERR_OK) {
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d1a6      	bne.n	8005640 <tcp_close_shutdown+0x84>
      pcb->state = LAST_ACK;
 80056f2:	2309      	movs	r3, #9
 80056f4:	e7f3      	b.n	80056de <tcp_close_shutdown+0x122>
 80056f6:	bf00      	nop
 80056f8:	2000b218 	.word	0x2000b218
 80056fc:	2000b224 	.word	0x2000b224
 8005700:	2000b214 	.word	0x2000b214
 8005704:	2000b22c 	.word	0x2000b22c
 8005708:	2000b228 	.word	0x2000b228
 800570c:	2000b220 	.word	0x2000b220

08005710 <tcp_close>:
  if (pcb->state != LISTEN) {
 8005710:	7e03      	ldrb	r3, [r0, #24]
 8005712:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8005714:	bf1e      	ittt	ne
 8005716:	7f83      	ldrbne	r3, [r0, #30]
 8005718:	f043 0310 	orrne.w	r3, r3, #16
 800571c:	7783      	strbne	r3, [r0, #30]
  return tcp_close_shutdown(pcb, 1);
 800571e:	2101      	movs	r1, #1
 8005720:	f7ff bf4c 	b.w	80055bc <tcp_close_shutdown>

08005724 <tcp_recv_null>:
{
 8005724:	b510      	push	{r4, lr}
 8005726:	4608      	mov	r0, r1
  if (p != NULL) {
 8005728:	4614      	mov	r4, r2
 800572a:	b13a      	cbz	r2, 800573c <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 800572c:	8911      	ldrh	r1, [r2, #8]
 800572e:	f7ff fd40 	bl	80051b2 <tcp_recved>
    pbuf_free(p);
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff fb69 	bl	8004e0a <pbuf_free>
}
 8005738:	2000      	movs	r0, #0
 800573a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1fb      	bne.n	8005738 <tcp_recv_null+0x14>
}
 8005740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8005744:	f7ff bfe4 	b.w	8005710 <tcp_close>

08005748 <tcp_process_refused_data>:
{
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u8_t refused_flags = pcb->refused_data->flags;
 800574a:	6f86      	ldr	r6, [r0, #120]	; 0x78
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800574c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
  u8_t refused_flags = pcb->refused_data->flags;
 8005750:	7b77      	ldrb	r7, [r6, #13]
  pcb->refused_data = NULL;
 8005752:	2300      	movs	r3, #0
{
 8005754:	4604      	mov	r4, r0
  pcb->refused_data = NULL;
 8005756:	6783      	str	r3, [r0, #120]	; 0x78
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005758:	b1e5      	cbz	r5, 8005794 <tcp_process_refused_data+0x4c>
 800575a:	4601      	mov	r1, r0
 800575c:	4632      	mov	r2, r6
 800575e:	6900      	ldr	r0, [r0, #16]
 8005760:	47a8      	blx	r5
 8005762:	4605      	mov	r5, r0
  if (err == ERR_OK) {
 8005764:	b9e8      	cbnz	r0, 80057a2 <tcp_process_refused_data+0x5a>
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 8005766:	06bb      	lsls	r3, r7, #26
 8005768:	d512      	bpl.n	8005790 <tcp_process_refused_data+0x48>
      if (pcb->rcv_wnd != TCP_WND) {
 800576a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
      TCP_EVENT_CLOSED(pcb, err);
 800576c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
      if (pcb->rcv_wnd != TCP_WND) {
 8005770:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8005774:	4293      	cmp	r3, r2
        pcb->rcv_wnd++;
 8005776:	bf1c      	itt	ne
 8005778:	3301      	addne	r3, #1
 800577a:	85a3      	strhne	r3, [r4, #44]	; 0x2c
      TCP_EVENT_CLOSED(pcb, err);
 800577c:	b146      	cbz	r6, 8005790 <tcp_process_refused_data+0x48>
 800577e:	2300      	movs	r3, #0
 8005780:	461a      	mov	r2, r3
 8005782:	4621      	mov	r1, r4
 8005784:	6920      	ldr	r0, [r4, #16]
 8005786:	47b0      	blx	r6
      if (err == ERR_ABRT) {
 8005788:	300a      	adds	r0, #10
 800578a:	d101      	bne.n	8005790 <tcp_process_refused_data+0x48>
        return ERR_ABRT;
 800578c:	f06f 0509 	mvn.w	r5, #9
}
 8005790:	4628      	mov	r0, r5
 8005792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005794:	4601      	mov	r1, r0
 8005796:	462b      	mov	r3, r5
 8005798:	4632      	mov	r2, r6
 800579a:	4628      	mov	r0, r5
 800579c:	f7ff ffc2 	bl	8005724 <tcp_recv_null>
 80057a0:	e7df      	b.n	8005762 <tcp_process_refused_data+0x1a>
  } else if (err == ERR_ABRT) {
 80057a2:	f110 050a 	adds.w	r5, r0, #10
 80057a6:	d0f1      	beq.n	800578c <tcp_process_refused_data+0x44>
    pcb->refused_data = refused_data;
 80057a8:	67a6      	str	r6, [r4, #120]	; 0x78
  return ERR_OK;
 80057aa:	2500      	movs	r5, #0
 80057ac:	e7f0      	b.n	8005790 <tcp_process_refused_data+0x48>
	...

080057b0 <tcp_fasttmr>:
{
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80057b4:	4d17      	ldr	r5, [pc, #92]	; (8005814 <tcp_fasttmr+0x64>)
  pcb = tcp_active_pcbs;
 80057b6:	4f18      	ldr	r7, [pc, #96]	; (8005818 <tcp_fasttmr+0x68>)
  ++tcp_timer_ctr;
 80057b8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80057ba:	4e18      	ldr	r6, [pc, #96]	; (800581c <tcp_fasttmr+0x6c>)
  ++tcp_timer_ctr;
 80057bc:	3301      	adds	r3, #1
 80057be:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80057c0:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80057c2:	f04f 0800 	mov.w	r8, #0
    if (pcb->last_timer != tcp_timer_ctr) {
 80057c6:	782b      	ldrb	r3, [r5, #0]
  while(pcb != NULL) {
 80057c8:	b90c      	cbnz	r4, 80057ce <tcp_fasttmr+0x1e>
}
 80057ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 80057ce:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d0f8      	beq.n	80057c8 <tcp_fasttmr+0x18>
      pcb->last_timer = tcp_timer_ctr;
 80057d6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if (pcb->flags & TF_ACK_DELAY) {
 80057da:	7fa3      	ldrb	r3, [r4, #30]
 80057dc:	07da      	lsls	r2, r3, #31
 80057de:	d509      	bpl.n	80057f4 <tcp_fasttmr+0x44>
        tcp_ack_now(pcb);
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
 80057e6:	4620      	mov	r0, r4
 80057e8:	f001 fb22 	bl	8006e30 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80057ec:	7fa3      	ldrb	r3, [r4, #30]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	77a3      	strb	r3, [r4, #30]
      if (pcb->refused_data != NULL) {
 80057f4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 80057f6:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80057fa:	b90b      	cbnz	r3, 8005800 <tcp_fasttmr+0x50>
{
 80057fc:	464c      	mov	r4, r9
 80057fe:	e7e2      	b.n	80057c6 <tcp_fasttmr+0x16>
        tcp_process_refused_data(pcb);
 8005800:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8005802:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8005806:	f7ff ff9f 	bl	8005748 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800580a:	7833      	ldrb	r3, [r6, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f5      	beq.n	80057fc <tcp_fasttmr+0x4c>
 8005810:	e7d6      	b.n	80057c0 <tcp_fasttmr+0x10>
 8005812:	bf00      	nop
 8005814:	2000777d 	.word	0x2000777d
 8005818:	2000b218 	.word	0x2000b218
 800581c:	2000b214 	.word	0x2000b214

08005820 <tcp_tmr>:
{
 8005820:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8005822:	f7ff ffc5 	bl	80057b0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8005826:	4a06      	ldr	r2, [pc, #24]	; (8005840 <tcp_tmr+0x20>)
 8005828:	7813      	ldrb	r3, [r2, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	7013      	strb	r3, [r2, #0]
 8005830:	07db      	lsls	r3, r3, #31
 8005832:	d503      	bpl.n	800583c <tcp_tmr+0x1c>
}
 8005834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8005838:	f7ff bd22 	b.w	8005280 <tcp_slowtmr>
 800583c:	bd08      	pop	{r3, pc}
 800583e:	bf00      	nop
 8005840:	2000777c 	.word	0x2000777c

08005844 <tcp_abandon>:
  if (pcb->state == TIME_WAIT) {
 8005844:	7e03      	ldrb	r3, [r0, #24]
 8005846:	2b0a      	cmp	r3, #10
{
 8005848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	4689      	mov	r9, r1
  if (pcb->state == TIME_WAIT) {
 8005850:	d10a      	bne.n	8005868 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005852:	4601      	mov	r1, r0
 8005854:	481f      	ldr	r0, [pc, #124]	; (80058d4 <tcp_abandon+0x90>)
 8005856:	f7ff fe7f 	bl	8005558 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800585a:	4621      	mov	r1, r4
 800585c:	2002      	movs	r0, #2
}
 800585e:	b003      	add	sp, #12
 8005860:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8005864:	f7ff ba02 	b.w	8004c6c <memp_free>
    seqno = pcb->snd_nxt;
 8005868:	6d07      	ldr	r7, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800586a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    errf = pcb->errf;
 800586e:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8005872:	6906      	ldr	r6, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005874:	4601      	mov	r1, r0
 8005876:	4818      	ldr	r0, [pc, #96]	; (80058d8 <tcp_abandon+0x94>)
 8005878:	f7ff fe6e 	bl	8005558 <tcp_pcb_remove>
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <tcp_abandon+0x98>)
    if (pcb->unacked != NULL) {
 800587e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005884:	b108      	cbz	r0, 800588a <tcp_abandon+0x46>
      tcp_segs_free(pcb->unacked);
 8005886:	f7ff fcbd 	bl	8005204 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800588a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800588c:	b108      	cbz	r0, 8005892 <tcp_abandon+0x4e>
      tcp_segs_free(pcb->unsent);
 800588e:	f7ff fcb9 	bl	8005204 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005892:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005894:	b108      	cbz	r0, 800589a <tcp_abandon+0x56>
      tcp_segs_free(pcb->ooseq);
 8005896:	f7ff fcb5 	bl	8005204 <tcp_segs_free>
    if (reset) {
 800589a:	f1b9 0f00 	cmp.w	r9, #0
 800589e:	d009      	beq.n	80058b4 <tcp_abandon+0x70>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 80058a0:	8ba3      	ldrh	r3, [r4, #28]
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	8b63      	ldrh	r3, [r4, #26]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	4622      	mov	r2, r4
 80058aa:	1d23      	adds	r3, r4, #4
 80058ac:	4641      	mov	r1, r8
 80058ae:	4638      	mov	r0, r7
 80058b0:	f001 fc04 	bl	80070bc <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 80058b4:	4621      	mov	r1, r4
 80058b6:	2002      	movs	r0, #2
 80058b8:	f7ff f9d8 	bl	8004c6c <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 80058bc:	b13d      	cbz	r5, 80058ce <tcp_abandon+0x8a>
 80058be:	f06f 0109 	mvn.w	r1, #9
 80058c2:	4630      	mov	r0, r6
 80058c4:	462b      	mov	r3, r5
}
 80058c6:	b003      	add	sp, #12
 80058c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 80058cc:	4718      	bx	r3
}
 80058ce:	b003      	add	sp, #12
 80058d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058d4:	2000b22c 	.word	0x2000b22c
 80058d8:	2000b218 	.word	0x2000b218
 80058dc:	2000b214 	.word	0x2000b214

080058e0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80058e0:	2101      	movs	r1, #1
 80058e2:	f7ff bfaf 	b.w	8005844 <tcp_abandon>
	...

080058e8 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <tcp_next_iss+0x10>)
 80058ea:	4a04      	ldr	r2, [pc, #16]	; (80058fc <tcp_next_iss+0x14>)
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	4410      	add	r0, r2
 80058f2:	6018      	str	r0, [r3, #0]
  return iss;
}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	2000014c 	.word	0x2000014c
 80058fc:	2000b21c 	.word	0x2000b21c

08005900 <tcp_alloc>:
{
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005904:	2002      	movs	r0, #2
 8005906:	f7ff f987 	bl	8004c18 <memp_malloc>
 800590a:	4d41      	ldr	r5, [pc, #260]	; (8005a10 <tcp_alloc+0x110>)
  if (pcb == NULL) {
 800590c:	4604      	mov	r4, r0
 800590e:	bb60      	cbnz	r0, 800596a <tcp_alloc+0x6a>
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005910:	4b40      	ldr	r3, [pc, #256]	; (8005a14 <tcp_alloc+0x114>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005912:	6828      	ldr	r0, [r5, #0]
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005914:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8005916:	4621      	mov	r1, r4
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005918:	2b00      	cmp	r3, #0
 800591a:	d161      	bne.n	80059e0 <tcp_alloc+0xe0>
  if (inactive != NULL) {
 800591c:	b114      	cbz	r4, 8005924 <tcp_alloc+0x24>
    tcp_abort(inactive);
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff ffde 	bl	80058e0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005924:	2002      	movs	r0, #2
 8005926:	f7ff f977 	bl	8004c18 <memp_malloc>
    if (pcb == NULL) {
 800592a:	4604      	mov	r4, r0
 800592c:	b9b8      	cbnz	r0, 800595e <tcp_alloc+0x5e>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800592e:	4b3a      	ldr	r3, [pc, #232]	; (8005a18 <tcp_alloc+0x118>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005930:	f8d5 e000 	ldr.w	lr, [r5]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005934:	681b      	ldr	r3, [r3, #0]
  mprio = TCP_PRIO_MAX;
 8005936:	207f      	movs	r0, #127	; 0x7f
  inactivity = 0;
 8005938:	4627      	mov	r7, r4
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800593a:	2b00      	cmp	r3, #0
 800593c:	d158      	bne.n	80059f0 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 800593e:	b114      	cbz	r4, 8005946 <tcp_alloc+0x46>
    tcp_abort(inactive);
 8005940:	4620      	mov	r0, r4
 8005942:	f7ff ffcd 	bl	80058e0 <tcp_abort>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005946:	2002      	movs	r0, #2
 8005948:	f7ff f966 	bl	8004c18 <memp_malloc>
      if (pcb != NULL) {
 800594c:	4604      	mov	r4, r0
 800594e:	2800      	cmp	r0, #0
 8005950:	d044      	beq.n	80059dc <tcp_alloc+0xdc>
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8005952:	4a32      	ldr	r2, [pc, #200]	; (8005a1c <tcp_alloc+0x11c>)
 8005954:	f8b2 30cc 	ldrh.w	r3, [r2, #204]	; 0xcc
 8005958:	3b01      	subs	r3, #1
 800595a:	f8a2 30cc 	strh.w	r3, [r2, #204]	; 0xcc
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <tcp_alloc+0x11c>)
 8005960:	f8b2 30cc 	ldrh.w	r3, [r2, #204]	; 0xcc
 8005964:	3b01      	subs	r3, #1
 8005966:	f8a2 30cc 	strh.w	r3, [r2, #204]	; 0xcc
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800596a:	2298      	movs	r2, #152	; 0x98
 800596c:	2100      	movs	r1, #0
 800596e:	4620      	mov	r0, r4
 8005970:	f002 fb1a 	bl	8007fa8 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8005974:	f640 3368 	movw	r3, #2920	; 0xb68
 8005978:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->rcv_wnd = TCP_WND;
 800597c:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8005980:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
 8005982:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->ttl = TCP_TTL;
 8005984:	23ff      	movs	r3, #255	; 0xff
 8005986:	72a3      	strb	r3, [r4, #10]
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 8005988:	f44f 7306 	mov.w	r3, #536	; 0x218
 800598c:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800598e:	2306      	movs	r3, #6
 8005990:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005994:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
 8005998:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pcb->snd_queuelen = 0;
 800599c:	2100      	movs	r1, #0
    pcb->rtime = -1;
 800599e:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->prio = prio;
 80059a6:	7666      	strb	r6, [r4, #25]
    pcb->snd_queuelen = 0;
 80059a8:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
    pcb->tos = 0;
 80059ac:	7261      	strb	r1, [r4, #9]
    pcb->sa = 0;
 80059ae:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
    iss = tcp_next_iss();
 80059b2:	f7ff ff99 	bl	80058e8 <tcp_next_iss>
    pcb->tmr = tcp_ticks;
 80059b6:	682b      	ldr	r3, [r5, #0]
 80059b8:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 80059ba:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <tcp_alloc+0x120>)
    pcb->snd_wl2 = iss;
 80059bc:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->last_timer = tcp_timer_ctr;
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    pcb->recv = tcp_recv_null;
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <tcp_alloc+0x124>)
 80059c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80059ca:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <tcp_alloc+0x128>)
    pcb->snd_nxt = iss;
 80059cc:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
 80059ce:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
 80059d0:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->polltmr = 0;
 80059d2:	77e1      	strb	r1, [r4, #31]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80059d4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->keep_cnt_sent = 0;
 80059d8:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
}
 80059dc:	4620      	mov	r0, r4
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80059e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e2:	1a82      	subs	r2, r0, r2
 80059e4:	428a      	cmp	r2, r1
 80059e6:	bf24      	itt	cs
 80059e8:	461c      	movcs	r4, r3
 80059ea:	4611      	movcs	r1, r2
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	e793      	b.n	8005918 <tcp_alloc+0x18>
    if (pcb->prio <= prio &&
 80059f0:	7e59      	ldrb	r1, [r3, #25]
 80059f2:	428e      	cmp	r6, r1
 80059f4:	d309      	bcc.n	8005a0a <tcp_alloc+0x10a>
 80059f6:	4281      	cmp	r1, r0
 80059f8:	d807      	bhi.n	8005a0a <tcp_alloc+0x10a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80059fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059fc:	ebae 0202 	sub.w	r2, lr, r2
       pcb->prio <= mprio &&
 8005a00:	42ba      	cmp	r2, r7
 8005a02:	bf22      	ittt	cs
 8005a04:	4608      	movcs	r0, r1
 8005a06:	4617      	movcs	r7, r2
 8005a08:	461c      	movcs	r4, r3
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	e795      	b.n	800593a <tcp_alloc+0x3a>
 8005a0e:	bf00      	nop
 8005a10:	2000b21c 	.word	0x2000b21c
 8005a14:	2000b22c 	.word	0x2000b22c
 8005a18:	2000b218 	.word	0x2000b218
 8005a1c:	2000b0fe 	.word	0x2000b0fe
 8005a20:	2000777d 	.word	0x2000777d
 8005a24:	08005725 	.word	0x08005725
 8005a28:	006ddd00 	.word	0x006ddd00

08005a2c <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
 8005a30:	4608      	mov	r0, r1
 8005a32:	f7fe fa7d 	bl	8003f30 <ip_route>
  if ((outif != NULL) && (outif->mtu != 0)) {
 8005a36:	b130      	cbz	r0, 8005a46 <tcp_eff_send_mss+0x1a>
 8005a38:	8c03      	ldrh	r3, [r0, #32]
 8005a3a:	b123      	cbz	r3, 8005a46 <tcp_eff_send_mss+0x1a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
 8005a3c:	3b28      	subs	r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	429c      	cmp	r4, r3
 8005a42:	bf28      	it	cs
 8005a44:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 8005a46:	4620      	mov	r0, r4
 8005a48:	bd10      	pop	{r4, pc}
	...

08005a4c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005a50:	68c3      	ldr	r3, [r0, #12]
{
 8005a52:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005a54:	8998      	ldrh	r0, [r3, #12]
{
 8005a56:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005a58:	f7fe f88f 	bl	8003b7a <lwip_ntohs>
 8005a5c:	07c2      	lsls	r2, r0, #31
 8005a5e:	d415      	bmi.n	8005a8c <tcp_oos_insert_segment+0x40>
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005a60:	4e18      	ldr	r6, [pc, #96]	; (8005ac4 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8005a62:	b1bc      	cbz	r4, 8005a94 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005a64:	68e7      	ldr	r7, [r4, #12]
 8005a66:	6830      	ldr	r0, [r6, #0]
 8005a68:	892b      	ldrh	r3, [r5, #8]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	8922      	ldrh	r2, [r4, #8]
 8005a6e:	4403      	add	r3, r0
 8005a70:	440a      	add	r2, r1
 8005a72:	1a9a      	subs	r2, r3, r2
    while (next &&
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	da10      	bge.n	8005a9a <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8005a78:	1a5b      	subs	r3, r3, r1
    if (next &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd0a      	ble.n	8005a94 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8005a7e:	1a09      	subs	r1, r1, r0
 8005a80:	b289      	uxth	r1, r1
 8005a82:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8005a84:	6868      	ldr	r0, [r5, #4]
 8005a86:	f7ff fa73 	bl	8004f70 <pbuf_realloc>
 8005a8a:	e003      	b.n	8005a94 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f7ff fbb9 	bl	8005204 <tcp_segs_free>
    next = NULL;
 8005a92:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8005a94:	602c      	str	r4, [r5, #0]
}
 8005a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8005a9a:	89b8      	ldrh	r0, [r7, #12]
 8005a9c:	f7fe f86d 	bl	8003b7a <lwip_ntohs>
 8005aa0:	07c3      	lsls	r3, r0, #31
 8005aa2:	d509      	bpl.n	8005ab8 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8005aa4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8005aae:	f7fe f861 	bl	8003b74 <lwip_htons>
 8005ab2:	4338      	orrs	r0, r7
 8005ab4:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8005ab8:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff fb94 	bl	80051e8 <tcp_seg_free>
      next = next->next;
 8005ac0:	463c      	mov	r4, r7
 8005ac2:	e7ce      	b.n	8005a62 <tcp_oos_insert_segment+0x16>
 8005ac4:	200077a0 	.word	0x200077a0

08005ac8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8005acc:	4ba7      	ldr	r3, [pc, #668]	; (8005d6c <tcp_receive+0x2a4>)
 8005ace:	4ea8      	ldr	r6, [pc, #672]	; (8005d70 <tcp_receive+0x2a8>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f013 0f10 	tst.w	r3, #16
{
 8005ad6:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
 8005ad8:	d070      	beq.n	8005bbc <tcp_receive+0xf4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005ada:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005adc:	6832      	ldr	r2, [r6, #0]
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005ade:	7e00      	ldrb	r0, [r0, #24]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005ae0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8005ae4:	6da7      	ldr	r7, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005ae6:	1a9d      	subs	r5, r3, r2
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	4da2      	ldr	r5, [pc, #648]	; (8005d74 <tcp_receive+0x2ac>)
 8005aec:	db0d      	blt.n	8005b0a <tcp_receive+0x42>
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d103      	bne.n	8005afa <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	1afb      	subs	r3, r7, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db07      	blt.n	8005b0a <tcp_receive+0x42>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	429f      	cmp	r7, r3
 8005afe:	d11f      	bne.n	8005b40 <tcp_receive+0x78>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 8005b00:	4b9d      	ldr	r3, [pc, #628]	; (8005d78 <tcp_receive+0x2b0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	89db      	ldrh	r3, [r3, #14]
 8005b06:	428b      	cmp	r3, r1
 8005b08:	d91a      	bls.n	8005b40 <tcp_receive+0x78>
      pcb->snd_wnd = tcphdr->wnd;
 8005b0a:	4b9b      	ldr	r3, [pc, #620]	; (8005d78 <tcp_receive+0x2b0>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 8005b0c:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = tcphdr->wnd;
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
        pcb->snd_wnd_max = tcphdr->wnd;
      }
      pcb->snd_wl1 = seqno;
 8005b16:	6562      	str	r2, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 8005b18:	45f4      	cmp	ip, lr
      pcb->snd_wl2 = ackno;
 8005b1a:	682a      	ldr	r2, [r5, #0]
 8005b1c:	65a2      	str	r2, [r4, #88]	; 0x58
      pcb->snd_wnd = tcphdr->wnd;
 8005b1e:	4673      	mov	r3, lr
 8005b20:	f8a4 e060 	strh.w	lr, [r4, #96]	; 0x60
        pcb->snd_wnd_max = tcphdr->wnd;
 8005b24:	bf38      	it	cc
 8005b26:	f8a4 e062 	strhcc.w	lr, [r4, #98]	; 0x62
 8005b2a:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 8111 	bne.w	8005d56 <tcp_receive+0x28e>
        if (pcb->persist_backoff == 0) {
 8005b34:	b922      	cbnz	r2, 8005b40 <tcp_receive+0x78>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8005b36:	f884 e094 	strb.w	lr, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8005b3a:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8005b3c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8005b40:	682a      	ldr	r2, [r5, #0]
 8005b42:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8005b46:	eba2 030e 	sub.w	r3, r2, lr
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f300 811a 	bgt.w	8005d84 <tcp_receive+0x2bc>
      pcb->acked = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
 8005b56:	4b89      	ldr	r3, [pc, #548]	; (8005d7c <tcp_receive+0x2b4>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f040 838f 	bne.w	800627e <tcp_receive+0x7b6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 8005b60:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8005b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005b66:	4439      	add	r1, r7
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 8005b68:	4403      	add	r3, r0
 8005b6a:	4299      	cmp	r1, r3
 8005b6c:	f040 8387 	bne.w	800627e <tcp_receive+0x7b6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8005b70:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f2c0 8382 	blt.w	800627e <tcp_receive+0x7b6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8005b7a:	4572      	cmp	r2, lr
 8005b7c:	f040 837f 	bne.w	800627e <tcp_receive+0x7b6>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8005b80:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8005b84:	1c53      	adds	r3, r2, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8005b8a:	bf38      	it	cc
 8005b8c:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
 8005b90:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	f240 80e3 	bls.w	8005d60 <tcp_receive+0x298>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8005b9a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8005b9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d201      	bcs.n	8005bac <tcp_receive+0xe4>
                  pcb->cwnd += pcb->mss;
 8005ba8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8005bac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 8166 	bne.w	8005e80 <tcp_receive+0x3b8>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005bb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005bb6:	2a00      	cmp	r2, #0
 8005bb8:	f040 81a4 	bne.w	8005f04 <tcp_receive+0x43c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8005bbc:	4f6f      	ldr	r7, [pc, #444]	; (8005d7c <tcp_receive+0x2b4>)
 8005bbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005bc0:	8838      	ldrh	r0, [r7, #0]
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f000 834f 	beq.w	8006266 <tcp_receive+0x79e>
 8005bc8:	7e23      	ldrb	r3, [r4, #24]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	f200 834b 	bhi.w	8006266 <tcp_receive+0x79e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	eba2 0e03 	sub.w	lr, r2, r3
 8005bd6:	f1be 0f01 	cmp.w	lr, #1
 8005bda:	f100 81c2 	bmi.w	8005f62 <tcp_receive+0x49a>
 8005bde:	f1c3 0101 	rsb	r1, r3, #1
 8005be2:	1a09      	subs	r1, r1, r0
 8005be4:	4411      	add	r1, r2
 8005be6:	2900      	cmp	r1, #0
 8005be8:	f300 81bb 	bgt.w	8005f62 <tcp_receive+0x49a>
         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
      p = inseg.p;
 8005bec:	4d64      	ldr	r5, [pc, #400]	; (8005d80 <tcp_receive+0x2b8>)
 8005bee:	6868      	ldr	r0, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 8005bf0:	8943      	ldrh	r3, [r0, #10]
 8005bf2:	459e      	cmp	lr, r3
      off = pcb->rcv_nxt - seqno;
 8005bf4:	4671      	mov	r1, lr
      if (inseg.p->len < off) {
 8005bf6:	f340 81b1 	ble.w	8005f5c <tcp_receive+0x494>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8005bfa:	8903      	ldrh	r3, [r0, #8]
 8005bfc:	1a5b      	subs	r3, r3, r1
 8005bfe:	b29b      	uxth	r3, r3
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8005c00:	f04f 0e00 	mov.w	lr, #0
        while (p->len < off) {
 8005c04:	8942      	ldrh	r2, [r0, #10]
 8005c06:	4291      	cmp	r1, r2
 8005c08:	f300 81a2 	bgt.w	8005f50 <tcp_receive+0x488>
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
 8005c0c:	4249      	negs	r1, r1
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 8005c0e:	b209      	sxth	r1, r1
 8005c10:	f7ff f8d0 	bl	8004db4 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8005c14:	8929      	ldrh	r1, [r5, #8]
 8005c16:	6833      	ldr	r3, [r6, #0]
 8005c18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8005c1a:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8005c1c:	440b      	add	r3, r1
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8005c22:	68eb      	ldr	r3, [r5, #12]
 8005c24:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 8005c26:	6831      	ldr	r1, [r6, #0]
 8005c28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c2a:	1a8b      	subs	r3, r1, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f2c0 8315 	blt.w	800625c <tcp_receive+0x794>
 8005c32:	1c4b      	adds	r3, r1, #1
 8005c34:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	1a1b      	subs	r3, r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f300 830e 	bgt.w	800625c <tcp_receive+0x794>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 8005c40:	4291      	cmp	r1, r2
 8005c42:	f040 8242 	bne.w	80060ca <tcp_receive+0x602>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8005c46:	4d4e      	ldr	r5, [pc, #312]	; (8005d80 <tcp_receive+0x2b8>)
 8005c48:	68eb      	ldr	r3, [r5, #12]
 8005c4a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8005c4e:	8998      	ldrh	r0, [r3, #12]
 8005c50:	f7fd ff93 	bl	8003b7a <lwip_ntohs>
 8005c54:	f010 0003 	ands.w	r0, r0, #3
 8005c58:	bf18      	it	ne
 8005c5a:	2001      	movne	r0, #1
 8005c5c:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8005c5e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        tcplen = TCP_TCPLEN(&inseg);
 8005c60:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8005c62:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8005c64:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8005c66:	d234      	bcs.n	8005cd2 <tcp_receive+0x20a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005c68:	68eb      	ldr	r3, [r5, #12]
 8005c6a:	8998      	ldrh	r0, [r3, #12]
 8005c6c:	f7fd ff85 	bl	8003b7a <lwip_ntohs>
 8005c70:	07c2      	lsls	r2, r0, #31
 8005c72:	d510      	bpl.n	8005c96 <tcp_receive+0x1ce>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 8005c74:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8005c78:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	f7fd ff7c 	bl	8003b7a <lwip_ntohs>
 8005c82:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8005c86:	f7fd ff75 	bl	8003b74 <lwip_htons>
 8005c8a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8005c8e:	ea48 0800 	orr.w	r8, r8, r0
 8005c92:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 8005c96:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005c98:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005c9a:	68eb      	ldr	r3, [r5, #12]
 8005c9c:	8998      	ldrh	r0, [r3, #12]
 8005c9e:	f7fd ff6c 	bl	8003b7a <lwip_ntohs>
 8005ca2:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8005ca4:	bf48      	it	mi
 8005ca6:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8005ca8:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8005caa:	bf44      	itt	mi
 8005cac:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005cb0:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8005cb2:	8929      	ldrh	r1, [r5, #8]
 8005cb4:	f7ff f95c 	bl	8004f70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8005cb8:	68eb      	ldr	r3, [r5, #12]
 8005cba:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8005cbe:	8998      	ldrh	r0, [r3, #12]
 8005cc0:	f7fd ff5b 	bl	8003b7a <lwip_ntohs>
 8005cc4:	f010 0003 	ands.w	r0, r0, #3
 8005cc8:	bf18      	it	ne
 8005cca:	2001      	movne	r0, #1
 8005ccc:	4480      	add	r8, r0
 8005cce:	f8a7 8000 	strh.w	r8, [r7]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8005cd2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8153 	beq.w	8005f80 <tcp_receive+0x4b8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005cda:	68eb      	ldr	r3, [r5, #12]
 8005cdc:	8998      	ldrh	r0, [r3, #12]
 8005cde:	f7fd ff4c 	bl	8003b7a <lwip_ntohs>
 8005ce2:	07c0      	lsls	r0, r0, #31
 8005ce4:	f100 8149 	bmi.w	8005f7a <tcp_receive+0x4b2>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8005ce8:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8005cec:	f1b8 0f00 	cmp.w	r8, #0
 8005cf0:	d02e      	beq.n	8005d50 <tcp_receive+0x288>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8005cf2:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8005cf6:	6830      	ldr	r0, [r6, #0]
 8005cf8:	883b      	ldrh	r3, [r7, #0]
 8005cfa:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005cfe:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8005d02:	4403      	add	r3, r0
 8005d04:	4411      	add	r1, r2
 8005d06:	1a59      	subs	r1, r3, r1
            while (next &&
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	f280 8169 	bge.w	8005fe0 <tcp_receive+0x518>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8005d0e:	1a9b      	subs	r3, r3, r2
            if (next &&
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	dd1d      	ble.n	8005d50 <tcp_receive+0x288>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005d14:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8005d16:	1a12      	subs	r2, r2, r0
 8005d18:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005d1a:	8998      	ldrh	r0, [r3, #12]
 8005d1c:	f7fd ff2d 	bl	8003b7a <lwip_ntohs>
 8005d20:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8005d22:	bf48      	it	mi
 8005d24:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8005d26:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8005d28:	bf44      	itt	mi
 8005d2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005d2e:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8005d30:	8929      	ldrh	r1, [r5, #8]
 8005d32:	f7ff f91d 	bl	8004f70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8005d36:	68eb      	ldr	r3, [r5, #12]
 8005d38:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8005d3c:	8998      	ldrh	r0, [r3, #12]
 8005d3e:	f7fd ff1c 	bl	8003b7a <lwip_ntohs>
 8005d42:	f010 0003 	ands.w	r0, r0, #3
 8005d46:	bf18      	it	ne
 8005d48:	2001      	movne	r0, #1
 8005d4a:	4481      	add	r9, r0
 8005d4c:	f8a7 9000 	strh.w	r9, [r7]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8005d50:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
 8005d54:	e114      	b.n	8005f80 <tcp_receive+0x4b8>
      } else if (pcb->persist_backoff > 0) {
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	f43f aef2 	beq.w	8005b40 <tcp_receive+0x78>
          pcb->persist_backoff = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e6ed      	b.n	8005b3c <tcp_receive+0x74>
              } else if (pcb->dupacks == 3) {
 8005d60:	f47f af24 	bne.w	8005bac <tcp_receive+0xe4>
                tcp_rexmit_fast(pcb);
 8005d64:	4620      	mov	r0, r4
 8005d66:	f001 fa3f 	bl	80071e8 <tcp_rexmit_fast>
 8005d6a:	e71f      	b.n	8005bac <tcp_receive+0xe4>
 8005d6c:	20007784 	.word	0x20007784
 8005d70:	200077a0 	.word	0x200077a0
 8005d74:	20007780 	.word	0x20007780
 8005d78:	200077a4 	.word	0x200077a4
 8005d7c:	200077a8 	.word	0x200077a8
 8005d80:	20007788 	.word	0x20007788
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 8005d84:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005d86:	1a51      	subs	r1, r2, r1
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	dc75      	bgt.n	8005e78 <tcp_receive+0x3b0>
      if (pcb->flags & TF_INFR) {
 8005d8c:	7fa1      	ldrb	r1, [r4, #30]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8005d8e:	f9b4 e040 	ldrsh.w	lr, [r4, #64]	; 0x40
      pcb->lastack = ackno;
 8005d92:	64a2      	str	r2, [r4, #72]	; 0x48
      if (pcb->flags & TF_INFR) {
 8005d94:	074f      	lsls	r7, r1, #29
        pcb->flags &= ~TF_INFR;
 8005d96:	bf41      	itttt	mi
 8005d98:	f021 0104 	bicmi.w	r1, r1, #4
 8005d9c:	77a1      	strbmi	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
 8005d9e:	f8b4 104e 	ldrhmi.w	r1, [r4, #78]	; 0x4e
 8005da2:	f8a4 104c 	strhmi.w	r1, [r4, #76]	; 0x4c
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8005da6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8005daa:	eb01 01ee 	add.w	r1, r1, lr, asr #3
 8005dae:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
      pcb->snd_buf += pcb->acked;
 8005db2:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 8005db6:	b29b      	uxth	r3, r3
      pcb->nrtx = 0;
 8005db8:	2700      	movs	r7, #0
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 8005dba:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->state >= ESTABLISHED) {
 8005dbe:	2803      	cmp	r0, #3
      pcb->snd_buf += pcb->acked;
 8005dc0:	440b      	add	r3, r1
      pcb->nrtx = 0;
 8005dc2:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
      pcb->snd_buf += pcb->acked;
 8005dc6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
 8005dca:	f884 7047 	strb.w	r7, [r4, #71]	; 0x47
      if (pcb->state >= ESTABLISHED) {
 8005dce:	d90f      	bls.n	8005df0 <tcp_receive+0x328>
        if (pcb->cwnd < pcb->ssthresh) {
 8005dd0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8005dd4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8005dd8:	4293      	cmp	r3, r2
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8005dda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8005ddc:	bf9c      	itt	ls
 8005dde:	435b      	mulls	r3, r3
 8005de0:	fb93 f3f2 	sdivls	r3, r3, r2
 8005de4:	4413      	add	r3, r2
 8005de6:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d201      	bcs.n	8005df0 <tcp_receive+0x328>
            pcb->cwnd = new_cwnd;
 8005dec:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      while (pcb->unacked != NULL &&
 8005df0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005df2:	b943      	cbnz	r3, 8005e06 <tcp_receive+0x33e>
      if(pcb->unacked == NULL)
 8005df4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005df6:	2300      	movs	r3, #0
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d13b      	bne.n	8005e74 <tcp_receive+0x3ac>
        pcb->rtime = -1;
 8005dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e00:	86a2      	strh	r2, [r4, #52]	; 0x34
      pcb->polltmr = 0;
 8005e02:	77e3      	strb	r3, [r4, #31]
 8005e04:	e6d2      	b.n	8005bac <tcp_receive+0xe4>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	6858      	ldr	r0, [r3, #4]
 8005e0a:	f7fd febb 	bl	8003b84 <lwip_ntohl>
 8005e0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005e10:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4607      	mov	r7, r0
 8005e18:	8998      	ldrh	r0, [r3, #12]
 8005e1a:	f7fd feae 	bl	8003b7a <lwip_ntohs>
 8005e1e:	682b      	ldr	r3, [r5, #0]
 8005e20:	f010 0003 	ands.w	r0, r0, #3
 8005e24:	bf18      	it	ne
 8005e26:	2001      	movne	r0, #1
 8005e28:	4440      	add	r0, r8
 8005e2a:	1aff      	subs	r7, r7, r3
 8005e2c:	4438      	add	r0, r7
      while (pcb->unacked != NULL &&
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	dce0      	bgt.n	8005df4 <tcp_receive+0x32c>
        next = pcb->unacked;
 8005e32:	6f27      	ldr	r7, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	6723      	str	r3, [r4, #112]	; 0x70
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff f8bf 	bl	8004fbc <pbuf_clen>
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 8005e3e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8005e42:	b15b      	cbz	r3, 8005e5c <tcp_receive+0x394>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8998      	ldrh	r0, [r3, #12]
 8005e48:	f7fd fe97 	bl	8003b7a <lwip_ntohs>
 8005e4c:	07c0      	lsls	r0, r0, #31
          pcb->acked--;
 8005e4e:	bf42      	ittt	mi
 8005e50:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 8005e54:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005e58:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff f8ad 	bl	8004fbc <pbuf_clen>
 8005e62:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8005e66:	1a18      	subs	r0, r3, r0
 8005e68:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff f9bb 	bl	80051e8 <tcp_seg_free>
 8005e72:	e7bd      	b.n	8005df0 <tcp_receive+0x328>
        pcb->rtime = 0;
 8005e74:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005e76:	e7c4      	b.n	8005e02 <tcp_receive+0x33a>
      pcb->acked = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8005e7e:	e695      	b.n	8005bac <tcp_receive+0xe4>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	682f      	ldr	r7, [r5, #0]
 8005e84:	6858      	ldr	r0, [r3, #4]
 8005e86:	f7fd fe7d 	bl	8003b84 <lwip_ntohl>
 8005e8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005e8c:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	4681      	mov	r9, r0
 8005e94:	8998      	ldrh	r0, [r3, #12]
 8005e96:	f7fd fe70 	bl	8003b7a <lwip_ntohs>
 8005e9a:	f010 0003 	ands.w	r0, r0, #3
 8005e9e:	bf18      	it	ne
 8005ea0:	2001      	movne	r0, #1
 8005ea2:	eba7 0709 	sub.w	r7, r7, r9
 8005ea6:	4440      	add	r0, r8
 8005ea8:	1a3f      	subs	r7, r7, r0
    while (pcb->unsent != NULL &&
 8005eaa:	2f00      	cmp	r7, #0
 8005eac:	f6ff ae82 	blt.w	8005bb4 <tcp_receive+0xec>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f73f ae7c 	bgt.w	8005bb4 <tcp_receive+0xec>
      next = pcb->unsent;
 8005ebc:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->unsent == NULL) {
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 8005ec4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff f877 	bl	8004fbc <pbuf_clen>
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 8005ece:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8005ed2:	b15b      	cbz	r3, 8005eec <tcp_receive+0x424>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8998      	ldrh	r0, [r3, #12]
 8005ed8:	f7fd fe4f 	bl	8003b7a <lwip_ntohs>
 8005edc:	07c1      	lsls	r1, r0, #31
        pcb->acked--;
 8005ede:	bf42      	ittt	mi
 8005ee0:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 8005ee4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005ee8:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff f865 	bl	8004fbc <pbuf_clen>
 8005ef2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8005ef6:	1a18      	subs	r0, r3, r0
 8005ef8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff f973 	bl	80051e8 <tcp_seg_free>
 8005f02:	e653      	b.n	8005bac <tcp_receive+0xe4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005f04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f06:	6829      	ldr	r1, [r5, #0]
 8005f08:	1a5b      	subs	r3, r3, r1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f6bf ae56 	bge.w	8005bbc <tcp_receive+0xf4>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005f10:	4ba1      	ldr	r3, [pc, #644]	; (8006198 <tcp_receive+0x6d0>)
      m = m - (pcb->sa >> 3);
 8005f12:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005f16:	6819      	ldr	r1, [r3, #0]
 8005f18:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8005f1a:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8005f1e:	b289      	uxth	r1, r1
 8005f20:	b20b      	sxth	r3, r1
      if (m < 0) {
 8005f22:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8005f24:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
      pcb->sa += m;
 8005f28:	4408      	add	r0, r1
        m = -m;
 8005f2a:	bfbc      	itt	lt
 8005f2c:	4249      	neglt	r1, r1
 8005f2e:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8005f30:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8005f34:	4413      	add	r3, r2
      pcb->sa += m;
 8005f36:	b200      	sxth	r0, r0
      pcb->sv += m;
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8005f3e:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8005f42:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
      pcb->rttest = 0;
 8005f46:	2300      	movs	r3, #0
      pcb->sa += m;
 8005f48:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8005f4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f4e:	e635      	b.n	8005bbc <tcp_receive+0xf4>
          p->tot_len = new_tot_len;
 8005f50:	8103      	strh	r3, [r0, #8]
          p->len = 0;
 8005f52:	f8a0 e00a 	strh.w	lr, [r0, #10]
          off -= p->len;
 8005f56:	1a89      	subs	r1, r1, r2
          p = p->next;
 8005f58:	6800      	ldr	r0, [r0, #0]
 8005f5a:	e653      	b.n	8005c04 <tcp_receive+0x13c>
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 8005f5c:	f1ce 0100 	rsb	r1, lr, #0
 8005f60:	e655      	b.n	8005c0e <tcp_receive+0x146>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8005f66:	bfbe      	ittt	lt
 8005f68:	7fa3      	ldrblt	r3, [r4, #30]
 8005f6a:	f043 0302 	orrlt.w	r3, r3, #2
 8005f6e:	77a3      	strblt	r3, [r4, #30]
 8005f70:	e659      	b.n	8005c26 <tcp_receive+0x15e>
              pcb->ooseq = pcb->ooseq->next;
 8005f72:	6803      	ldr	r3, [r0, #0]
 8005f74:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8005f76:	f7ff f937 	bl	80051e8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8005f7a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d1f8      	bne.n	8005f72 <tcp_receive+0x4aa>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8005f80:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 8005f82:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        pcb->rcv_nxt = seqno + tcplen;
 8005f84:	6832      	ldr	r2, [r6, #0]
        pcb->rcv_wnd -= tcplen;
 8005f86:	1a5b      	subs	r3, r3, r1
        pcb->rcv_nxt = seqno + tcplen;
 8005f88:	440a      	add	r2, r1
 8005f8a:	62a2      	str	r2, [r4, #40]	; 0x28
        pcb->rcv_wnd -= tcplen;
 8005f8c:	85a3      	strh	r3, [r4, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f7ff f8f4 	bl	800517c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8005f94:	686b      	ldr	r3, [r5, #4]
 8005f96:	891a      	ldrh	r2, [r3, #8]
 8005f98:	b11a      	cbz	r2, 8005fa2 <tcp_receive+0x4da>
          recv_data = inseg.p;
 8005f9a:	4a80      	ldr	r2, [pc, #512]	; (800619c <tcp_receive+0x6d4>)
 8005f9c:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005fa2:	68eb      	ldr	r3, [r5, #12]
          tcp_update_rcv_ann_wnd(pcb);

          if (cseg->p->tot_len > 0) {
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
 8005fa4:	4f7d      	ldr	r7, [pc, #500]	; (800619c <tcp_receive+0x6d4>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005fa6:	8998      	ldrh	r0, [r3, #12]
            }
            cseg->p = NULL;
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8005fa8:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80061a0 <tcp_receive+0x6d8>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005fac:	f7fd fde5 	bl	8003b7a <lwip_ntohs>
 8005fb0:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 8005fb2:	bf41      	itttt	mi
 8005fb4:	4a7a      	ldrmi	r2, [pc, #488]	; (80061a0 <tcp_receive+0x6d8>)
 8005fb6:	7813      	ldrbmi	r3, [r2, #0]
 8005fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fbc:	7013      	strbmi	r3, [r2, #0]
            cseg->p = NULL;
 8005fbe:	f04f 0900 	mov.w	r9, #0
        while (pcb->ooseq != NULL &&
 8005fc2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005fc4:	b125      	cbz	r5, 8005fd0 <tcp_receive+0x508>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8005fc6:	68e9      	ldr	r1, [r5, #12]
        while (pcb->ooseq != NULL &&
 8005fc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8005fca:	684b      	ldr	r3, [r1, #4]
        while (pcb->ooseq != NULL &&
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d032      	beq.n	8006036 <tcp_receive+0x56e>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8005fd0:	7fa3      	ldrb	r3, [r4, #30]
 8005fd2:	07d9      	lsls	r1, r3, #31
 8005fd4:	d574      	bpl.n	80060c0 <tcp_receive+0x5f8>
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
      tcp_ack_now(pcb);
 8005fda:	f043 0302 	orr.w	r3, r3, #2
 8005fde:	e071      	b.n	80060c4 <tcp_receive+0x5fc>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8005fe0:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8005fe4:	f7fd fdc9 	bl	8003b7a <lwip_ntohs>
 8005fe8:	07c1      	lsls	r1, r0, #31
 8005fea:	d51d      	bpl.n	8006028 <tcp_receive+0x560>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8005fec:	68eb      	ldr	r3, [r5, #12]
 8005fee:	8998      	ldrh	r0, [r3, #12]
 8005ff0:	f7fd fdc3 	bl	8003b7a <lwip_ntohs>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8005ff4:	0782      	lsls	r2, r0, #30
 8005ff6:	d417      	bmi.n	8006028 <tcp_receive+0x560>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8005ff8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8006002:	f7fd fdb7 	bl	8003b74 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8006006:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006008:	ea49 0000 	orr.w	r0, r9, r0
 800600c:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8006010:	8998      	ldrh	r0, [r3, #12]
 8006012:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006016:	f7fd fdb0 	bl	8003b7a <lwip_ntohs>
 800601a:	f010 0003 	ands.w	r0, r0, #3
 800601e:	bf18      	it	ne
 8006020:	2001      	movne	r0, #1
 8006022:	4481      	add	r9, r0
 8006024:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8006028:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 800602c:	4640      	mov	r0, r8
 800602e:	f7ff f8db 	bl	80051e8 <tcp_seg_free>
              next = next->next;
 8006032:	46c8      	mov	r8, r9
 8006034:	e65a      	b.n	8005cec <tcp_receive+0x224>
          seqno = pcb->ooseq->tcphdr->seqno;
 8006036:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006038:	8988      	ldrh	r0, [r1, #12]
 800603a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800603e:	f7fd fd9c 	bl	8003b7a <lwip_ntohs>
 8006042:	f010 0003 	ands.w	r0, r0, #3
 8006046:	bf18      	it	ne
 8006048:	2001      	movne	r0, #1
 800604a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800604c:	4450      	add	r0, sl
 800604e:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006050:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006052:	62a0      	str	r0, [r4, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006054:	8998      	ldrh	r0, [r3, #12]
 8006056:	f7fd fd90 	bl	8003b7a <lwip_ntohs>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800605a:	68eb      	ldr	r3, [r5, #12]
 800605c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006060:	8998      	ldrh	r0, [r3, #12]
 8006062:	f7fd fd8a 	bl	8003b7a <lwip_ntohs>
 8006066:	f010 0003 	ands.w	r0, r0, #3
 800606a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800606c:	bf18      	it	ne
 800606e:	2001      	movne	r0, #1
 8006070:	4450      	add	r0, sl
 8006072:	1a18      	subs	r0, r3, r0
 8006074:	85a0      	strh	r0, [r4, #44]	; 0x2c
          tcp_update_rcv_ann_wnd(pcb);
 8006076:	4620      	mov	r0, r4
 8006078:	f7ff f880 	bl	800517c <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800607c:	6869      	ldr	r1, [r5, #4]
 800607e:	890b      	ldrh	r3, [r1, #8]
 8006080:	b12b      	cbz	r3, 800608e <tcp_receive+0x5c6>
            if (recv_data) {
 8006082:	6838      	ldr	r0, [r7, #0]
 8006084:	b1d0      	cbz	r0, 80060bc <tcp_receive+0x5f4>
              pbuf_cat(recv_data, cseg->p);
 8006086:	f7fe ffa6 	bl	8004fd6 <pbuf_cat>
            cseg->p = NULL;
 800608a:	f8c5 9004 	str.w	r9, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800608e:	68eb      	ldr	r3, [r5, #12]
 8006090:	8998      	ldrh	r0, [r3, #12]
 8006092:	f7fd fd72 	bl	8003b7a <lwip_ntohs>
 8006096:	07c0      	lsls	r0, r0, #31
 8006098:	d50a      	bpl.n	80060b0 <tcp_receive+0x5e8>
            recv_flags |= TF_GOT_FIN;
 800609a:	f898 3000 	ldrb.w	r3, [r8]
 800609e:	f043 0320 	orr.w	r3, r3, #32
 80060a2:	f888 3000 	strb.w	r3, [r8]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80060a6:	7e23      	ldrb	r3, [r4, #24]
 80060a8:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80060aa:	bf04      	itt	eq
 80060ac:	2307      	moveq	r3, #7
 80060ae:	7623      	strbeq	r3, [r4, #24]
          pcb->ooseq = cseg->next;
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 80060b4:	4628      	mov	r0, r5
 80060b6:	f7ff f897 	bl	80051e8 <tcp_seg_free>
 80060ba:	e782      	b.n	8005fc2 <tcp_receive+0x4fa>
              recv_data = cseg->p;
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	e7e4      	b.n	800608a <tcp_receive+0x5c2>
        tcp_ack(pcb);
 80060c0:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 80060c4:	77a3      	strb	r3, [r4, #30]
    }
  }
}
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tcp_send_empty_ack(pcb);
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fe82 	bl	8006dd4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80060d0:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80060d2:	b92d      	cbnz	r5, 80060e0 <tcp_receive+0x618>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80060d4:	4833      	ldr	r0, [pc, #204]	; (80061a4 <tcp_receive+0x6dc>)
 80060d6:	f7ff f89d 	bl	8005214 <tcp_seg_copy>
 80060da:	6760      	str	r0, [r4, #116]	; 0x74
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
 80060e0:	6833      	ldr	r3, [r6, #0]
 80060e2:	f04f 0800 	mov.w	r8, #0
 80060e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80060ea:	f103 0c01 	add.w	ip, r3, #1
 80060ee:	68e8      	ldr	r0, [r5, #12]
 80060f0:	6842      	ldr	r2, [r0, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d118      	bne.n	8006128 <tcp_receive+0x660>
              if (inseg.len > next->len) {
 80060f6:	482b      	ldr	r0, [pc, #172]	; (80061a4 <tcp_receive+0x6dc>)
 80060f8:	892b      	ldrh	r3, [r5, #8]
 80060fa:	8902      	ldrh	r2, [r0, #8]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	f240 80c2 	bls.w	8006286 <tcp_receive+0x7be>
                cseg = tcp_seg_copy(&inseg);
 8006102:	f7ff f887 	bl	8005214 <tcp_seg_copy>
                if (cseg != NULL) {
 8006106:	2800      	cmp	r0, #0
 8006108:	f000 80bd 	beq.w	8006286 <tcp_receive+0x7be>
                  if (prev != NULL) {
 800610c:	f1b8 0f00 	cmp.w	r8, #0
 8006110:	d008      	beq.n	8006124 <tcp_receive+0x65c>
                    prev->next = cseg;
 8006112:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006116:	4629      	mov	r1, r5
}
 8006118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    tcp_oos_insert_segment(cseg, next);
 800611c:	f7ff bc96 	b.w	8005a4c <tcp_oos_insert_segment>
 8006120:	460d      	mov	r5, r1
 8006122:	e7e4      	b.n	80060ee <tcp_receive+0x626>
                    pcb->ooseq = cseg;
 8006124:	6760      	str	r0, [r4, #116]	; 0x74
 8006126:	e7f6      	b.n	8006116 <tcp_receive+0x64e>
              if (prev == NULL) {
 8006128:	f1b8 0f00 	cmp.w	r8, #0
 800612c:	d10a      	bne.n	8006144 <tcp_receive+0x67c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800612e:	1a99      	subs	r1, r3, r2
 8006130:	2900      	cmp	r1, #0
 8006132:	da39      	bge.n	80061a8 <tcp_receive+0x6e0>
                  cseg = tcp_seg_copy(&inseg);
 8006134:	481b      	ldr	r0, [pc, #108]	; (80061a4 <tcp_receive+0x6dc>)
 8006136:	f7ff f86d 	bl	8005214 <tcp_seg_copy>
                  if (cseg != NULL) {
 800613a:	2800      	cmp	r0, #0
 800613c:	f000 80a3 	beq.w	8006286 <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 8006140:	6760      	str	r0, [r4, #116]	; 0x74
 8006142:	e7e8      	b.n	8006116 <tcp_receive+0x64e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8006144:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006148:	6849      	ldr	r1, [r1, #4]
 800614a:	ebae 0101 	sub.w	r1, lr, r1
 800614e:	2900      	cmp	r1, #0
 8006150:	db2a      	blt.n	80061a8 <tcp_receive+0x6e0>
 8006152:	ebac 0102 	sub.w	r1, ip, r2
 8006156:	2900      	cmp	r1, #0
 8006158:	dc26      	bgt.n	80061a8 <tcp_receive+0x6e0>
                  cseg = tcp_seg_copy(&inseg);
 800615a:	4812      	ldr	r0, [pc, #72]	; (80061a4 <tcp_receive+0x6dc>)
 800615c:	f7ff f85a 	bl	8005214 <tcp_seg_copy>
                  if (cseg != NULL) {
 8006160:	4604      	mov	r4, r0
 8006162:	2800      	cmp	r0, #0
 8006164:	f000 808f 	beq.w	8006286 <tcp_receive+0x7be>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8006168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800616c:	6831      	ldr	r1, [r6, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006174:	4413      	add	r3, r2
 8006176:	1a5b      	subs	r3, r3, r1
 8006178:	2b00      	cmp	r3, #0
 800617a:	dd07      	ble.n	800618c <tcp_receive+0x6c4>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800617c:	1a89      	subs	r1, r1, r2
 800617e:	b289      	uxth	r1, r1
 8006180:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8006184:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006188:	f7fe fef2 	bl	8004f70 <pbuf_realloc>
                    prev->next = cseg;
 800618c:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006190:	4629      	mov	r1, r5
 8006192:	4620      	mov	r0, r4
 8006194:	e7c0      	b.n	8006118 <tcp_receive+0x650>
 8006196:	bf00      	nop
 8006198:	2000b21c 	.word	0x2000b21c
 800619c:	20007798 	.word	0x20007798
 80061a0:	2000779c 	.word	0x2000779c
 80061a4:	20007788 	.word	0x20007788
              if (next->next == NULL &&
 80061a8:	6829      	ldr	r1, [r5, #0]
 80061aa:	46a8      	mov	r8, r5
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d1b7      	bne.n	8006120 <tcp_receive+0x658>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80061b0:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd67      	ble.n	8006286 <tcp_receive+0x7be>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80061b6:	8980      	ldrh	r0, [r0, #12]
 80061b8:	f7fd fcdf 	bl	8003b7a <lwip_ntohs>
 80061bc:	07c2      	lsls	r2, r0, #31
 80061be:	d462      	bmi.n	8006286 <tcp_receive+0x7be>
                next->next = tcp_seg_copy(&inseg);
 80061c0:	4832      	ldr	r0, [pc, #200]	; (800628c <tcp_receive+0x7c4>)
 80061c2:	f7ff f827 	bl	8005214 <tcp_seg_copy>
 80061c6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d05c      	beq.n	8006286 <tcp_receive+0x7be>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80061cc:	68eb      	ldr	r3, [r5, #12]
 80061ce:	6831      	ldr	r1, [r6, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	892b      	ldrh	r3, [r5, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	1a5b      	subs	r3, r3, r1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dd05      	ble.n	80061e8 <tcp_receive+0x720>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80061dc:	1a89      	subs	r1, r1, r2
 80061de:	b289      	uxth	r1, r1
 80061e0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80061e2:	6868      	ldr	r0, [r5, #4]
 80061e4:	f7fe fec4 	bl	8004f70 <pbuf_realloc>
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	883a      	ldrh	r2, [r7, #0]
 80061ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80061ee:	441a      	add	r2, r3
 80061f0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80061f2:	440b      	add	r3, r1
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d946      	bls.n	8006286 <tcp_receive+0x7be>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	8998      	ldrh	r0, [r3, #12]
 80061fe:	f7fd fcbc 	bl	8003b7a <lwip_ntohs>
 8006202:	07c3      	lsls	r3, r0, #31
 8006204:	d511      	bpl.n	800622a <tcp_receive+0x762>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	f8d3 900c 	ldr.w	r9, [r3, #12]
 800620c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8006210:	4640      	mov	r0, r8
 8006212:	f7fd fcb2 	bl	8003b7a <lwip_ntohs>
 8006216:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800621a:	f7fd fcab 	bl	8003b74 <lwip_htons>
 800621e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8006222:	ea48 0800 	orr.w	r8, r8, r0
 8006226:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 800622a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800622c:	6832      	ldr	r2, [r6, #0]
 800622e:	682b      	ldr	r3, [r5, #0]
 8006230:	1a89      	subs	r1, r1, r2
 8006232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                    pbuf_realloc(next->next->p, next->next->len);
 8006234:	6858      	ldr	r0, [r3, #4]
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 8006236:	4411      	add	r1, r2
 8006238:	b289      	uxth	r1, r1
 800623a:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800623c:	f7fe fe98 	bl	8004f70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	891c      	ldrh	r4, [r3, #8]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	8998      	ldrh	r0, [r3, #12]
 8006248:	f7fd fc97 	bl	8003b7a <lwip_ntohs>
 800624c:	f010 0003 	ands.w	r0, r0, #3
 8006250:	bf18      	it	ne
 8006252:	2001      	movne	r0, #1
 8006254:	4404      	add	r4, r0
 8006256:	803c      	strh	r4, [r7, #0]
 8006258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tcp_send_empty_ack(pcb);
 800625c:	4620      	mov	r0, r4
}
 800625e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      tcp_send_empty_ack(pcb);
 8006262:	f000 bdb7 	b.w	8006dd4 <tcp_send_empty_ack>
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 8006266:	6833      	ldr	r3, [r6, #0]
 8006268:	1a99      	subs	r1, r3, r2
 800626a:	2900      	cmp	r1, #0
 800626c:	db05      	blt.n	800627a <tcp_receive+0x7b2>
 800626e:	3301      	adds	r3, #1
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	2b00      	cmp	r3, #0
 8006278:	dd05      	ble.n	8006286 <tcp_receive+0x7be>
      tcp_ack_now(pcb);
 800627a:	7fa3      	ldrb	r3, [r4, #30]
 800627c:	e6ad      	b.n	8005fda <tcp_receive+0x512>
        pcb->dupacks = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8006284:	e492      	b.n	8005bac <tcp_receive+0xe4>
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	bf00      	nop
 800628c:	20007788 	.word	0x20007788

08006290 <tcp_parseopt.isra.0>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 8006292:	4e1f      	ldr	r6, [pc, #124]	; (8006310 <tcp_parseopt.isra.0+0x80>)
 8006294:	6835      	ldr	r5, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 8006296:	4604      	mov	r4, r0

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 8006298:	89a8      	ldrh	r0, [r5, #12]
 800629a:	f7fd fc6e 	bl	8003b7a <lwip_ntohs>
 800629e:	f3c0 300f 	ubfx	r0, r0, #12, #16
 80062a2:	2805      	cmp	r0, #5
 80062a4:	d90f      	bls.n	80062c6 <tcp_parseopt.isra.0+0x36>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 80062a6:	6833      	ldr	r3, [r6, #0]
 80062a8:	8998      	ldrh	r0, [r3, #12]
 80062aa:	f7fd fc66 	bl	8003b7a <lwip_ntohs>
 80062ae:	0b00      	lsrs	r0, r0, #12
 80062b0:	3805      	subs	r0, #5
 80062b2:	0080      	lsls	r0, r0, #2
  opts = (u8_t *)tcphdr + TCP_HLEN;
 80062b4:	3514      	adds	r5, #20
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 80062b6:	b280      	uxth	r0, r0
    for (c = 0; c < max_c; ) {
 80062b8:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80062ba:	f240 56b3 	movw	r6, #1459	; 0x5b3
 80062be:	f240 57b4 	movw	r7, #1460	; 0x5b4
    for (c = 0; c < max_c; ) {
 80062c2:	4298      	cmp	r0, r3
 80062c4:	d800      	bhi.n	80062c8 <tcp_parseopt.isra.0+0x38>
 80062c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (opt) {
 80062c8:	5cea      	ldrb	r2, [r5, r3]
 80062ca:	2a01      	cmp	r2, #1
 80062cc:	d009      	beq.n	80062e2 <tcp_parseopt.isra.0+0x52>
 80062ce:	d3fa      	bcc.n	80062c6 <tcp_parseopt.isra.0+0x36>
 80062d0:	2a02      	cmp	r2, #2
 80062d2:	eb05 0103 	add.w	r1, r5, r3
 80062d6:	d007      	beq.n	80062e8 <tcp_parseopt.isra.0+0x58>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 80062d8:	784a      	ldrb	r2, [r1, #1]
 80062da:	2a00      	cmp	r2, #0
 80062dc:	d0f3      	beq.n	80062c6 <tcp_parseopt.isra.0+0x36>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 80062de:	4413      	add	r3, r2
 80062e0:	e000      	b.n	80062e4 <tcp_parseopt.isra.0+0x54>
        ++c;
 80062e2:	3301      	adds	r3, #1
        c += opts[c + 1];
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	e7ec      	b.n	80062c2 <tcp_parseopt.isra.0+0x32>
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 80062e8:	784a      	ldrb	r2, [r1, #1]
 80062ea:	2a04      	cmp	r2, #4
 80062ec:	d1eb      	bne.n	80062c6 <tcp_parseopt.isra.0+0x36>
 80062ee:	1cda      	adds	r2, r3, #3
 80062f0:	4282      	cmp	r2, r0
 80062f2:	dae8      	bge.n	80062c6 <tcp_parseopt.isra.0+0x36>
        mss = (opts[c + 2] << 8) | opts[c + 3];
 80062f4:	f891 e002 	ldrb.w	lr, [r1, #2]
 80062f8:	78ca      	ldrb	r2, [r1, #3]
 80062fa:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80062fe:	1e51      	subs	r1, r2, #1
 8006300:	b289      	uxth	r1, r1
 8006302:	42b1      	cmp	r1, r6
 8006304:	bf88      	it	hi
 8006306:	463a      	movhi	r2, r7
 8006308:	8022      	strh	r2, [r4, #0]
        c += 0x04;
 800630a:	3304      	adds	r3, #4
 800630c:	e7ea      	b.n	80062e4 <tcp_parseopt.isra.0+0x54>
 800630e:	bf00      	nop
 8006310:	200077a4 	.word	0x200077a4

08006314 <tcp_input>:
{
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TCP_STATS_INC(tcp.recv);
 8006318:	4db0      	ldr	r5, [pc, #704]	; (80065dc <tcp_input+0x2c8>)
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 800631a:	4cb1      	ldr	r4, [pc, #708]	; (80065e0 <tcp_input+0x2cc>)
  TCP_STATS_INC(tcp.recv);
 800631c:	f8b5 3092 	ldrh.w	r3, [r5, #146]	; 0x92
 8006320:	3301      	adds	r3, #1
 8006322:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
  iphdr = (struct ip_hdr *)p->payload;
 8006326:	6843      	ldr	r3, [r0, #4]
{
 8006328:	4689      	mov	r9, r1
 800632a:	7819      	ldrb	r1, [r3, #0]
 800632c:	f001 010f 	and.w	r1, r1, #15
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 8006330:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 8006334:	0089      	lsls	r1, r1, #2
{
 8006336:	b089      	sub	sp, #36	; 0x24
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 8006338:	4249      	negs	r1, r1
{
 800633a:	4607      	mov	r7, r0
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 800633c:	6023      	str	r3, [r4, #0]
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 800633e:	f7fe fd39 	bl	8004db4 <pbuf_header>
 8006342:	4626      	mov	r6, r4
 8006344:	b910      	cbnz	r0, 800634c <tcp_input+0x38>
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	2b13      	cmp	r3, #19
 800634a:	d805      	bhi.n	8006358 <tcp_input+0x44>
    TCP_STATS_INC(tcp.lenerr);
 800634c:	f8b5 309a 	ldrh.w	r3, [r5, #154]	; 0x9a
 8006350:	3301      	adds	r3, #1
 8006352:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
    goto dropped;
 8006356:	e012      	b.n	800637e <tcp_input+0x6a>
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 8006358:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80065ec <tcp_input+0x2d8>
 800635c:	4649      	mov	r1, r9
 800635e:	f8d8 0000 	ldr.w	r0, [r8]
 8006362:	f7fd ffb3 	bl	80042cc <ip4_addr_isbroadcast>
 8006366:	b928      	cbnz	r0, 8006374 <tcp_input+0x60>
      ip_addr_ismulticast(&current_iphdr_dest)) {
 8006368:	f8d8 3000 	ldr.w	r3, [r8]
 800636c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 8006370:	2be0      	cmp	r3, #224	; 0xe0
 8006372:	d10a      	bne.n	800638a <tcp_input+0x76>
    TCP_STATS_INC(tcp.proterr);
 8006374:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 8006378:	3301      	adds	r3, #1
 800637a:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
  TCP_STATS_INC(tcp.drop);
 800637e:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 8006382:	3301      	adds	r3, #1
 8006384:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
 8006388:	e0fb      	b.n	8006582 <tcp_input+0x26e>
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 800638a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006608 <tcp_input+0x2f4>
 800638e:	893b      	ldrh	r3, [r7, #8]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4642      	mov	r2, r8
 8006394:	2306      	movs	r3, #6
 8006396:	4649      	mov	r1, r9
 8006398:	4638      	mov	r0, r7
 800639a:	f7fd fd5d 	bl	8003e58 <inet_chksum_pseudo>
 800639e:	f8cd 901c 	str.w	r9, [sp, #28]
 80063a2:	b128      	cbz	r0, 80063b0 <tcp_input+0x9c>
    TCP_STATS_INC(tcp.chkerr);
 80063a4:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
 80063a8:	3301      	adds	r3, #1
 80063aa:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
    goto dropped;
 80063ae:	e7e6      	b.n	800637e <tcp_input+0x6a>
  hdrlen = TCPH_HDRLEN(tcphdr);
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	8998      	ldrh	r0, [r3, #12]
 80063b4:	f7fd fbe1 	bl	8003b7a <lwip_ntohs>
 80063b8:	0b00      	lsrs	r0, r0, #12
  if(pbuf_header(p, -(hdrlen * 4))){
 80063ba:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
 80063be:	0081      	lsls	r1, r0, #2
 80063c0:	b209      	sxth	r1, r1
 80063c2:	4638      	mov	r0, r7
 80063c4:	f7fe fcf6 	bl	8004db4 <pbuf_header>
 80063c8:	4682      	mov	sl, r0
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d1be      	bne.n	800634c <tcp_input+0x38>
  tcphdr->src = ntohs(tcphdr->src);
 80063ce:	6824      	ldr	r4, [r4, #0]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 80063d0:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8006604 <tcp_input+0x2f0>
  tcphdr->src = ntohs(tcphdr->src);
 80063d4:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 80063d6:	f8df 9234 	ldr.w	r9, [pc, #564]	; 800660c <tcp_input+0x2f8>
  tcphdr->src = ntohs(tcphdr->src);
 80063da:	f7fd fbce 	bl	8003b7a <lwip_ntohs>
 80063de:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
 80063e0:	6834      	ldr	r4, [r6, #0]
 80063e2:	8860      	ldrh	r0, [r4, #2]
 80063e4:	f7fd fbc9 	bl	8003b7a <lwip_ntohs>
 80063e8:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 80063ea:	6834      	ldr	r4, [r6, #0]
 80063ec:	6860      	ldr	r0, [r4, #4]
 80063ee:	f7fd fbc9 	bl	8003b84 <lwip_ntohl>
 80063f2:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 80063f4:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 80063f6:	f8c8 0000 	str.w	r0, [r8]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 80063fa:	68a0      	ldr	r0, [r4, #8]
 80063fc:	f7fd fbc2 	bl	8003b84 <lwip_ntohl>
 8006400:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8006402:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 8006404:	f8c9 0000 	str.w	r0, [r9]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8006408:	89e0      	ldrh	r0, [r4, #14]
 800640a:	f7fd fbb6 	bl	8003b7a <lwip_ntohs>
  flags = TCPH_FLAGS(tcphdr);
 800640e:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8006410:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8006412:	8998      	ldrh	r0, [r3, #12]
 8006414:	f7fd fbb1 	bl	8003b7a <lwip_ntohs>
 8006418:	4a72      	ldr	r2, [pc, #456]	; (80065e4 <tcp_input+0x2d0>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800641a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
  prev = NULL;
 800641e:	f8cd a00c 	str.w	sl, [sp, #12]
  flags = TCPH_FLAGS(tcphdr);
 8006422:	b2c3      	uxtb	r3, r0
 8006424:	f003 013f 	and.w	r1, r3, #63	; 0x3f
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8006428:	9807      	ldr	r0, [sp, #28]
  flags = TCPH_FLAGS(tcphdr);
 800642a:	7011      	strb	r1, [r2, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800642c:	4a6e      	ldr	r2, [pc, #440]	; (80065e8 <tcp_input+0x2d4>)
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 800642e:	6800      	ldr	r0, [r0, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006430:	6812      	ldr	r2, [r2, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8006432:	9006      	str	r0, [sp, #24]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006434:	f013 0b03 	ands.w	fp, r3, #3
 8006438:	bf18      	it	ne
 800643a:	f04f 0b01 	movne.w	fp, #1
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 800643e:	486b      	ldr	r0, [pc, #428]	; (80065ec <tcp_input+0x2d8>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006440:	496b      	ldr	r1, [pc, #428]	; (80065f0 <tcp_input+0x2dc>)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006442:	9205      	str	r2, [sp, #20]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006444:	44f3      	add	fp, lr
 8006446:	fa1f fb8b 	uxth.w	fp, fp
    if (pcb->remote_port == tcphdr->src &&
 800644a:	6832      	ldr	r2, [r6, #0]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 800644c:	f8d0 c000 	ldr.w	ip, [r0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006450:	9c05      	ldr	r4, [sp, #20]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006452:	f8a1 b000 	strh.w	fp, [r1]
 8006456:	46ca      	mov	sl, r9
 8006458:	9104      	str	r1, [sp, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800645a:	b914      	cbnz	r4, 8006462 <tcp_input+0x14e>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800645c:	4965      	ldr	r1, [pc, #404]	; (80065f4 <tcp_input+0x2e0>)
 800645e:	6808      	ldr	r0, [r1, #0]
 8006460:	e096      	b.n	8006590 <tcp_input+0x27c>
    if (pcb->remote_port == tcphdr->src &&
 8006462:	f8b4 901c 	ldrh.w	r9, [r4, #28]
 8006466:	8811      	ldrh	r1, [r2, #0]
 8006468:	4589      	cmp	r9, r1
 800646a:	d150      	bne.n	800650e <tcp_input+0x1fa>
 800646c:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8006470:	8851      	ldrh	r1, [r2, #2]
 8006472:	4589      	cmp	r9, r1
 8006474:	d14b      	bne.n	800650e <tcp_input+0x1fa>
       pcb->local_port == tcphdr->dest &&
 8006476:	6861      	ldr	r1, [r4, #4]
 8006478:	4608      	mov	r0, r1
 800647a:	9906      	ldr	r1, [sp, #24]
 800647c:	4288      	cmp	r0, r1
 800647e:	d146      	bne.n	800650e <tcp_input+0x1fa>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8006480:	6821      	ldr	r1, [r4, #0]
 8006482:	4561      	cmp	r1, ip
 8006484:	d143      	bne.n	800650e <tcp_input+0x1fa>
      if (prev != NULL) {
 8006486:	9803      	ldr	r0, [sp, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006488:	68e1      	ldr	r1, [r4, #12]
      if (prev != NULL) {
 800648a:	b120      	cbz	r0, 8006496 <tcp_input+0x182>
        prev->next = pcb->next;
 800648c:	60c1      	str	r1, [r0, #12]
        pcb->next = tcp_active_pcbs;
 800648e:	9905      	ldr	r1, [sp, #20]
 8006490:	60e1      	str	r1, [r4, #12]
        tcp_active_pcbs = pcb;
 8006492:	4955      	ldr	r1, [pc, #340]	; (80065e8 <tcp_input+0x2d4>)
 8006494:	600c      	str	r4, [r1, #0]
    inseg.next = NULL;
 8006496:	4958      	ldr	r1, [pc, #352]	; (80065f8 <tcp_input+0x2e4>)
    recv_flags = 0;
 8006498:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006618 <tcp_input+0x304>
    inseg.tcphdr = tcphdr;
 800649c:	60ca      	str	r2, [r1, #12]
    recv_data = NULL;
 800649e:	4a57      	ldr	r2, [pc, #348]	; (80065fc <tcp_input+0x2e8>)
    inseg.len = p->tot_len;
 80064a0:	f8a1 e008 	strh.w	lr, [r1, #8]
    inseg.next = NULL;
 80064a4:	2000      	movs	r0, #0
    if (flags & TCP_PSH) {
 80064a6:	f013 0f08 	tst.w	r3, #8
    inseg.next = NULL;
 80064aa:	6008      	str	r0, [r1, #0]
    inseg.p = p;
 80064ac:	604f      	str	r7, [r1, #4]
    recv_data = NULL;
 80064ae:	6010      	str	r0, [r2, #0]
    recv_flags = 0;
 80064b0:	f889 0000 	strb.w	r0, [r9]
 80064b4:	4693      	mov	fp, r2
 80064b6:	468a      	mov	sl, r1
    if (flags & TCP_PSH) {
 80064b8:	d003      	beq.n	80064c2 <tcp_input+0x1ae>
      p->flags |= PBUF_FLAG_PUSH;
 80064ba:	7b7b      	ldrb	r3, [r7, #13]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	737b      	strb	r3, [r7, #13]
    if (pcb->refused_data != NULL) {
 80064c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80064c4:	4f4e      	ldr	r7, [pc, #312]	; (8006600 <tcp_input+0x2ec>)
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8115 	beq.w	80066f6 <tcp_input+0x3e2>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff f93b 	bl	8005748 <tcp_process_refused_data>
 80064d2:	300a      	adds	r0, #10
 80064d4:	d008      	beq.n	80064e8 <tcp_input+0x1d4>
 80064d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 810c 	beq.w	80066f6 <tcp_input+0x3e2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80064de:	4b44      	ldr	r3, [pc, #272]	; (80065f0 <tcp_input+0x2dc>)
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8107 	beq.w	80066f6 <tcp_input+0x3e2>
        TCP_STATS_INC(tcp.drop);
 80064e8:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 80064ec:	3301      	adds	r3, #1
 80064ee:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
    if (inseg.p != NULL)
 80064f2:	f8da 0004 	ldr.w	r0, [sl, #4]
    tcp_input_pcb = NULL;
 80064f6:	2400      	movs	r4, #0
 80064f8:	603c      	str	r4, [r7, #0]
    recv_data = NULL;
 80064fa:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL)
 80064fe:	b118      	cbz	r0, 8006508 <tcp_input+0x1f4>
      pbuf_free(inseg.p);
 8006500:	f7fe fc83 	bl	8004e0a <pbuf_free>
      inseg.p = NULL;
 8006504:	f8ca 4004 	str.w	r4, [sl, #4]
}
 8006508:	b009      	add	sp, #36	; 0x24
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800650e:	9403      	str	r4, [sp, #12]
 8006510:	68e4      	ldr	r4, [r4, #12]
 8006512:	e7a2      	b.n	800645a <tcp_input+0x146>
      if (pcb->remote_port == tcphdr->src &&
 8006514:	8b81      	ldrh	r1, [r0, #28]
 8006516:	f8b2 e000 	ldrh.w	lr, [r2]
 800651a:	458e      	cmp	lr, r1
 800651c:	d137      	bne.n	800658e <tcp_input+0x27a>
         pcb->local_port == tcphdr->dest &&
 800651e:	8b41      	ldrh	r1, [r0, #26]
      if (pcb->remote_port == tcphdr->src &&
 8006520:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006524:	4589      	cmp	r9, r1
 8006526:	d132      	bne.n	800658e <tcp_input+0x27a>
         pcb->local_port == tcphdr->dest &&
 8006528:	6841      	ldr	r1, [r0, #4]
 800652a:	460c      	mov	r4, r1
 800652c:	9906      	ldr	r1, [sp, #24]
 800652e:	42a1      	cmp	r1, r4
 8006530:	d12d      	bne.n	800658e <tcp_input+0x27a>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8006532:	6801      	ldr	r1, [r0, #0]
 8006534:	458c      	cmp	ip, r1
 8006536:	d12a      	bne.n	800658e <tcp_input+0x27a>
  if (flags & TCP_RST)  {
 8006538:	075e      	lsls	r6, r3, #29
 800653a:	d422      	bmi.n	8006582 <tcp_input+0x26e>
  if (flags & TCP_SYN) {
 800653c:	079d      	lsls	r5, r3, #30
 800653e:	d512      	bpl.n	8006566 <tcp_input+0x252>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 8006540:	4b30      	ldr	r3, [pc, #192]	; (8006604 <tcp_input+0x2f0>)
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006546:	1acb      	subs	r3, r1, r3
 8006548:	d412      	bmi.n	8006570 <tcp_input+0x25c>
 800654a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	dc0e      	bgt.n	8006570 <tcp_input+0x25c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8006552:	e88d 4200 	stmia.w	sp, {r9, lr}
 8006556:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <tcp_input+0x2f4>)
 8006558:	4a24      	ldr	r2, [pc, #144]	; (80065ec <tcp_input+0x2d8>)
 800655a:	4459      	add	r1, fp
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800655c:	482b      	ldr	r0, [pc, #172]	; (800660c <tcp_input+0x2f8>)
 800655e:	6800      	ldr	r0, [r0, #0]
      tcp_rst(ackno, seqno + tcplen,
 8006560:	f000 fdac 	bl	80070bc <tcp_rst>
 8006564:	e00d      	b.n	8006582 <tcp_input+0x26e>
  } else if (flags & TCP_FIN) {
 8006566:	07dc      	lsls	r4, r3, #31
    pcb->tmr = tcp_ticks;
 8006568:	bf42      	ittt	mi
 800656a:	4b29      	ldrmi	r3, [pc, #164]	; (8006610 <tcp_input+0x2fc>)
 800656c:	681b      	ldrmi	r3, [r3, #0]
 800656e:	6243      	strmi	r3, [r0, #36]	; 0x24
  if ((tcplen > 0))  {
 8006570:	f1bb 0f00 	cmp.w	fp, #0
 8006574:	d005      	beq.n	8006582 <tcp_input+0x26e>
    pcb->flags |= TF_ACK_NOW;
 8006576:	7f83      	ldrb	r3, [r0, #30]
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
 800657e:	f000 fc57 	bl	8006e30 <tcp_output>
  pbuf_free(p);
 8006582:	4638      	mov	r0, r7
}
 8006584:	b009      	add	sp, #36	; 0x24
 8006586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800658a:	f7fe bc3e 	b.w	8004e0a <pbuf_free>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800658e:	68c0      	ldr	r0, [r0, #12]
 8006590:	2800      	cmp	r0, #0
 8006592:	d1bf      	bne.n	8006514 <tcp_input+0x200>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006594:	491f      	ldr	r1, [pc, #124]	; (8006614 <tcp_input+0x300>)
 8006596:	680c      	ldr	r4, [r1, #0]
 8006598:	46a1      	mov	r9, r4
 800659a:	f1b9 0f00 	cmp.w	r9, #0
 800659e:	d13d      	bne.n	800661c <tcp_input+0x308>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80065a0:	8990      	ldrh	r0, [r2, #12]
 80065a2:	f7fd faea 	bl	8003b7a <lwip_ntohs>
 80065a6:	0743      	lsls	r3, r0, #29
 80065a8:	d4eb      	bmi.n	8006582 <tcp_input+0x26e>
      TCP_STATS_INC(tcp.proterr);
 80065aa:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
      tcp_rst(ackno, seqno + tcplen,
 80065ae:	9a04      	ldr	r2, [sp, #16]
 80065b0:	f8d8 1000 	ldr.w	r1, [r8]
 80065b4:	8810      	ldrh	r0, [r2, #0]
      TCP_STATS_INC(tcp.proterr);
 80065b6:	3301      	adds	r3, #1
 80065b8:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 80065bc:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 80065c0:	3301      	adds	r3, #1
 80065c2:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
        tcphdr->dest, tcphdr->src);
 80065c6:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen,
 80065c8:	881a      	ldrh	r2, [r3, #0]
 80065ca:	9201      	str	r2, [sp, #4]
 80065cc:	885b      	ldrh	r3, [r3, #2]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4401      	add	r1, r0
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <tcp_input+0x2f4>)
 80065d4:	4a05      	ldr	r2, [pc, #20]	; (80065ec <tcp_input+0x2d8>)
 80065d6:	f8da 0000 	ldr.w	r0, [sl]
 80065da:	e7c1      	b.n	8006560 <tcp_input+0x24c>
 80065dc:	2000b0fe 	.word	0x2000b0fe
 80065e0:	200077a4 	.word	0x200077a4
 80065e4:	20007784 	.word	0x20007784
 80065e8:	2000b218 	.word	0x2000b218
 80065ec:	200089c8 	.word	0x200089c8
 80065f0:	200077a8 	.word	0x200077a8
 80065f4:	2000b22c 	.word	0x2000b22c
 80065f8:	20007788 	.word	0x20007788
 80065fc:	20007798 	.word	0x20007798
 8006600:	2000b230 	.word	0x2000b230
 8006604:	200077a0 	.word	0x200077a0
 8006608:	200089c0 	.word	0x200089c0
 800660c:	20007780 	.word	0x20007780
 8006610:	2000b21c 	.word	0x2000b21c
 8006614:	2000b220 	.word	0x2000b220
 8006618:	2000779c 	.word	0x2000779c
      if (lpcb->local_port == tcphdr->dest) {
 800661c:	f8b9 101a 	ldrh.w	r1, [r9, #26]
 8006620:	9103      	str	r1, [sp, #12]
 8006622:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8006626:	458e      	cmp	lr, r1
 8006628:	d108      	bne.n	800663c <tcp_input+0x328>
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 800662a:	f8d9 e000 	ldr.w	lr, [r9]
 800662e:	45f4      	cmp	ip, lr
 8006630:	f000 8288 	beq.w	8006b44 <tcp_input+0x830>
            ip_addr_isany(&(lpcb->local_ip))) {
 8006634:	f1be 0f00 	cmp.w	lr, #0
 8006638:	f000 8284 	beq.w	8006b44 <tcp_input+0x830>
 800663c:	4648      	mov	r0, r9
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800663e:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8006642:	e7aa      	b.n	800659a <tcp_input+0x286>
  } else if (flags & TCP_SYN) {
 8006644:	0799      	lsls	r1, r3, #30
 8006646:	d59c      	bpl.n	8006582 <tcp_input+0x26e>
    npcb = tcp_alloc(pcb->prio);
 8006648:	f899 0019 	ldrb.w	r0, [r9, #25]
 800664c:	f7ff f958 	bl	8005900 <tcp_alloc>
    if (npcb == NULL) {
 8006650:	4682      	mov	sl, r0
 8006652:	b928      	cbnz	r0, 8006660 <tcp_input+0x34c>
      TCP_STATS_INC(tcp.memerr);
 8006654:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
 8006658:	3301      	adds	r3, #1
 800665a:	f8a5 309c 	strh.w	r3, [r5, #156]	; 0x9c
 800665e:	e790      	b.n	8006582 <tcp_input+0x26e>
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 8006660:	4ba5      	ldr	r3, [pc, #660]	; (80068f8 <tcp_input+0x5e4>)
    npcb->remote_port = tcphdr->src;
 8006662:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
 8006668:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800666c:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 800666e:	9b07      	ldr	r3, [sp, #28]
    npcb->remote_port = tcphdr->src;
 8006670:	7851      	ldrb	r1, [r2, #1]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
 8006676:	7813      	ldrb	r3, [r2, #0]
 8006678:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800667c:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
 800667e:	2303      	movs	r3, #3
 8006680:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 8006682:	f8d8 3000 	ldr.w	r3, [r8]
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800668a:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800668c:	3b01      	subs	r3, #1
    npcb->snd_wnd = tcphdr->wnd;
 800668e:	89d2      	ldrh	r2, [r2, #14]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006690:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8006692:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006696:	6103      	str	r3, [r0, #16]
    npcb->accept = pcb->accept;
 8006698:	f8d9 3014 	ldr.w	r3, [r9, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800669c:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
 80066a0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
 80066a4:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    npcb->accept = pcb->accept;
 80066a8:	6143      	str	r3, [r0, #20]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80066aa:	f899 3008 	ldrb.w	r3, [r9, #8]
 80066ae:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80066b2:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
 80066b4:	4b91      	ldr	r3, [pc, #580]	; (80068fc <tcp_input+0x5e8>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	60c2      	str	r2, [r0, #12]
 80066ba:	6018      	str	r0, [r3, #0]
 80066bc:	f000 fe78 	bl	80073b0 <tcp_timer_needed>
 80066c0:	4b8f      	ldr	r3, [pc, #572]	; (8006900 <tcp_input+0x5ec>)
 80066c2:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 80066c4:	f10a 0036 	add.w	r0, sl, #54	; 0x36
    TCP_REG_ACTIVE(npcb);
 80066c8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80066ca:	f7ff fde1 	bl	8006290 <tcp_parseopt.isra.0>
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 80066ce:	f10a 0104 	add.w	r1, sl, #4
 80066d2:	f8ba 0036 	ldrh.w	r0, [sl, #54]	; 0x36
 80066d6:	f7ff f9a9 	bl	8005a2c <tcp_eff_send_mss>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80066da:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 80066dc:	f8aa 0036 	strh.w	r0, [sl, #54]	; 0x36
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80066e0:	4650      	mov	r0, sl
 80066e2:	f000 faf1 	bl	8006cc8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80066e6:	b120      	cbz	r0, 80066f2 <tcp_input+0x3de>
      tcp_abandon(npcb, 0);
 80066e8:	4621      	mov	r1, r4
 80066ea:	4650      	mov	r0, sl
 80066ec:	f7ff f8aa 	bl	8005844 <tcp_abandon>
 80066f0:	e747      	b.n	8006582 <tcp_input+0x26e>
    return tcp_output(npcb);
 80066f2:	4650      	mov	r0, sl
 80066f4:	e743      	b.n	800657e <tcp_input+0x26a>
  if (flags & TCP_RST) {
 80066f6:	4d83      	ldr	r5, [pc, #524]	; (8006904 <tcp_input+0x5f0>)
    tcp_input_pcb = pcb;
 80066f8:	603c      	str	r4, [r7, #0]
  if (flags & TCP_RST) {
 80066fa:	782b      	ldrb	r3, [r5, #0]
 80066fc:	075a      	lsls	r2, r3, #29
 80066fe:	d52f      	bpl.n	8006760 <tcp_input+0x44c>
    if (pcb->state == SYN_SENT) {
 8006700:	7e23      	ldrb	r3, [r4, #24]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d10e      	bne.n	8006724 <tcp_input+0x410>
      if (ackno == pcb->snd_nxt) {
 8006706:	4b80      	ldr	r3, [pc, #512]	; (8006908 <tcp_input+0x5f4>)
 8006708:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d112      	bne.n	8006736 <tcp_input+0x422>
      recv_flags |= TF_RESET;
 8006710:	f899 3000 	ldrb.w	r3, [r9]
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	f889 3000 	strb.w	r3, [r9]
      pcb->flags &= ~TF_ACK_DELAY;
 800671c:	7fa3      	ldrb	r3, [r4, #30]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	e027      	b.n	8006774 <tcp_input+0x460>
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 8006724:	4b79      	ldr	r3, [pc, #484]	; (800690c <tcp_input+0x5f8>)
 8006726:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	d403      	bmi.n	8006736 <tcp_input+0x422>
 800672e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	ddec      	ble.n	8006710 <tcp_input+0x3fc>
      if (recv_flags & TF_RESET) {
 8006736:	f899 3000 	ldrb.w	r3, [r9]
 800673a:	071d      	lsls	r5, r3, #28
 800673c:	f140 81a4 	bpl.w	8006a88 <tcp_input+0x774>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8006740:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006744:	b11b      	cbz	r3, 800674e <tcp_input+0x43a>
 8006746:	f06f 010a 	mvn.w	r1, #10
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 800674a:	6920      	ldr	r0, [r4, #16]
 800674c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800674e:	4621      	mov	r1, r4
 8006750:	486a      	ldr	r0, [pc, #424]	; (80068fc <tcp_input+0x5e8>)
 8006752:	f7fe ff01 	bl	8005558 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006756:	4621      	mov	r1, r4
 8006758:	2002      	movs	r0, #2
 800675a:	f7fe fa87 	bl	8004c6c <memp_free>
 800675e:	e6c8      	b.n	80064f2 <tcp_input+0x1de>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 8006760:	f013 0f02 	tst.w	r3, #2
 8006764:	7fa3      	ldrb	r3, [r4, #30]
 8006766:	d007      	beq.n	8006778 <tcp_input+0x464>
 8006768:	7e22      	ldrb	r2, [r4, #24]
 800676a:	3a02      	subs	r2, #2
 800676c:	2a01      	cmp	r2, #1
 800676e:	d903      	bls.n	8006778 <tcp_input+0x464>
      tcp_ack_now(pcb);
 8006770:	f043 0302 	orr.w	r3, r3, #2
      pcb->flags &= ~TF_ACK_DELAY;
 8006774:	77a3      	strb	r3, [r4, #30]
 8006776:	e7de      	b.n	8006736 <tcp_input+0x422>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006778:	06d8      	lsls	r0, r3, #27
    pcb->tmr = tcp_ticks;
 800677a:	bf5e      	ittt	pl
 800677c:	4b64      	ldrpl	r3, [pc, #400]	; (8006910 <tcp_input+0x5fc>)
 800677e:	681b      	ldrpl	r3, [r3, #0]
 8006780:	6263      	strpl	r3, [r4, #36]	; 0x24
  pcb->keep_cnt_sent = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8006788:	f104 0036 	add.w	r0, r4, #54	; 0x36
 800678c:	f7ff fd80 	bl	8006290 <tcp_parseopt.isra.0>
  switch (pcb->state) {
 8006790:	7e23      	ldrb	r3, [r4, #24]
 8006792:	3b02      	subs	r3, #2
 8006794:	2b07      	cmp	r3, #7
 8006796:	d8ce      	bhi.n	8006736 <tcp_input+0x422>
 8006798:	e8df f013 	tbh	[pc, r3, lsl #1]
 800679c:	00730008 	.word	0x00730008
 80067a0:	00dd00d9 	.word	0x00dd00d9
 80067a4:	00d90126 	.word	0x00d90126
 80067a8:	01630144 	.word	0x01630144
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80067ac:	782b      	ldrb	r3, [r5, #0]
 80067ae:	f003 0312 	and.w	r3, r3, #18
 80067b2:	2b12      	cmp	r3, #18
 80067b4:	d150      	bne.n	8006858 <tcp_input+0x544>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 80067b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	6858      	ldr	r0, [r3, #4]
 80067bc:	f7fd f9e2 	bl	8003b84 <lwip_ntohl>
 80067c0:	4b51      	ldr	r3, [pc, #324]	; (8006908 <tcp_input+0x5f4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3001      	adds	r0, #1
 80067c6:	4298      	cmp	r0, r3
 80067c8:	d146      	bne.n	8006858 <tcp_input+0x544>
      pcb->snd_buf++;
 80067ca:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
      pcb->lastack = ackno;
 80067ce:	64a0      	str	r0, [r4, #72]	; 0x48
      pcb->snd_buf++;
 80067d0:	3301      	adds	r3, #1
 80067d2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
 80067d6:	f8d8 3000 	ldr.w	r3, [r8]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 80067da:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
      pcb->rcv_nxt = seqno + 1;
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	62a2      	str	r2, [r4, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80067e0:	6322      	str	r2, [r4, #48]	; 0x30
      pcb->snd_wnd = tcphdr->wnd;
 80067e2:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80067e4:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 80067e6:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80067e8:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->state = ESTABLISHED;
 80067ea:	2304      	movs	r3, #4
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 80067ec:	18e1      	adds	r1, r4, r3
      pcb->snd_wnd = tcphdr->wnd;
 80067ee:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
 80067f2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->state = ESTABLISHED;
 80067f6:	7623      	strb	r3, [r4, #24]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 80067f8:	f7ff f918 	bl	8005a2c <tcp_eff_send_mss>
      pcb->ssthresh = pcb->mss * 10;
 80067fc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 8006806:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 800680a:	86e0      	strh	r0, [r4, #54]	; 0x36
      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 800680c:	2b01      	cmp	r3, #1
 800680e:	bf04      	itt	eq
 8006810:	0040      	lsleq	r0, r0, #1
 8006812:	b280      	uxtheq	r0, r0
      --pcb->snd_queuelen;
 8006814:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 8006818:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
      rseg = pcb->unacked;
 800681c:	6f20      	ldr	r0, [r4, #112]	; 0x70
      --pcb->snd_queuelen;
 800681e:	3b01      	subs	r3, #1
 8006820:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      pcb->unacked = rseg->next;
 8006824:	6803      	ldr	r3, [r0, #0]
 8006826:	6723      	str	r3, [r4, #112]	; 0x70
      tcp_seg_free(rseg);
 8006828:	f7fe fcde 	bl	80051e8 <tcp_seg_free>
      if(pcb->unacked == NULL)
 800682c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800682e:	b93b      	cbnz	r3, 8006840 <tcp_input+0x52c>
        pcb->rtime = -1;
 8006830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006834:	86a3      	strh	r3, [r4, #52]	; 0x34
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006836:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800683a:	b933      	cbnz	r3, 800684a <tcp_input+0x536>
      tcp_ack_now(pcb);
 800683c:	7fa3      	ldrb	r3, [r4, #30]
 800683e:	e797      	b.n	8006770 <tcp_input+0x45c>
        pcb->rtime = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	86a3      	strh	r3, [r4, #52]	; 0x34
        pcb->nrtx = 0;
 8006844:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006848:	e7f5      	b.n	8006836 <tcp_input+0x522>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800684a:	2200      	movs	r2, #0
 800684c:	4621      	mov	r1, r4
 800684e:	6920      	ldr	r0, [r4, #16]
 8006850:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8006852:	300a      	adds	r0, #10
 8006854:	d1f2      	bne.n	800683c <tcp_input+0x528>
 8006856:	e64c      	b.n	80064f2 <tcp_input+0x1de>
    else if (flags & TCP_ACK) {
 8006858:	782b      	ldrb	r3, [r5, #0]
 800685a:	06d9      	lsls	r1, r3, #27
 800685c:	f57f af6b 	bpl.w	8006736 <tcp_input+0x422>
        tcphdr->dest, tcphdr->src);
 8006860:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8006862:	9a04      	ldr	r2, [sp, #16]
 8006864:	f8d8 1000 	ldr.w	r1, [r8]
 8006868:	8810      	ldrh	r0, [r2, #0]
 800686a:	881a      	ldrh	r2, [r3, #0]
 800686c:	9201      	str	r2, [sp, #4]
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	4401      	add	r1, r0
 8006874:	4824      	ldr	r0, [pc, #144]	; (8006908 <tcp_input+0x5f4>)
 8006876:	4b27      	ldr	r3, [pc, #156]	; (8006914 <tcp_input+0x600>)
 8006878:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <tcp_input+0x5e4>)
 800687a:	6800      	ldr	r0, [r0, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 800687c:	f000 fc1e 	bl	80070bc <tcp_rst>
 8006880:	e759      	b.n	8006736 <tcp_input+0x422>
    if (flags & TCP_ACK) {
 8006882:	782b      	ldrb	r3, [r5, #0]
 8006884:	06da      	lsls	r2, r3, #27
 8006886:	d554      	bpl.n	8006932 <tcp_input+0x61e>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006888:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <tcp_input+0x5f4>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800688e:	43db      	mvns	r3, r3
 8006890:	42c3      	cmn	r3, r0
 8006892:	d441      	bmi.n	8006918 <tcp_input+0x604>
 8006894:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006896:	1ac3      	subs	r3, r0, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc3d      	bgt.n	8006918 <tcp_input+0x604>
        pcb->state = ESTABLISHED;
 800689c:	2304      	movs	r3, #4
 800689e:	7623      	strb	r3, [r4, #24]
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
 80068a0:	6963      	ldr	r3, [r4, #20]
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 80068a2:	b91b      	cbnz	r3, 80068ac <tcp_input+0x598>
            tcp_abort(pcb);
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7ff f81b 	bl	80058e0 <tcp_abort>
            goto aborted;
 80068aa:	e622      	b.n	80064f2 <tcp_input+0x1de>
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 80068ac:	2200      	movs	r2, #0
 80068ae:	4621      	mov	r1, r4
 80068b0:	6920      	ldr	r0, [r4, #16]
 80068b2:	4798      	blx	r3
        if (err != ERR_OK) {
 80068b4:	b110      	cbz	r0, 80068bc <tcp_input+0x5a8>
          if (err != ERR_ABRT) {
 80068b6:	300a      	adds	r0, #10
 80068b8:	d1f4      	bne.n	80068a4 <tcp_input+0x590>
 80068ba:	e61a      	b.n	80064f2 <tcp_input+0x1de>
        tcp_receive(pcb);
 80068bc:	4620      	mov	r0, r4
        old_cwnd = pcb->cwnd;
 80068be:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
        tcp_receive(pcb);
 80068c2:	f7ff f901 	bl	8005ac8 <tcp_receive>
        if (pcb->acked != 0) {
 80068c6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80068ca:	b113      	cbz	r3, 80068d2 <tcp_input+0x5be>
          pcb->acked--;
 80068cc:	3b01      	subs	r3, #1
 80068ce:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 80068d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80068d4:	2d01      	cmp	r5, #1
 80068d6:	bf04      	itt	eq
 80068d8:	005b      	lsleq	r3, r3, #1
 80068da:	b29b      	uxtheq	r3, r3
 80068dc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80068e0:	f899 3000 	ldrb.w	r3, [r9]
 80068e4:	0698      	lsls	r0, r3, #26
 80068e6:	f57f af26 	bpl.w	8006736 <tcp_input+0x422>
      tcp_ack_now(pcb);
 80068ea:	7fa3      	ldrb	r3, [r4, #30]
 80068ec:	f043 0302 	orr.w	r3, r3, #2
 80068f0:	77a3      	strb	r3, [r4, #30]
      pcb->state = CLOSE_WAIT;
 80068f2:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 80068f4:	7623      	strb	r3, [r4, #24]
 80068f6:	e71e      	b.n	8006736 <tcp_input+0x422>
 80068f8:	200089c8 	.word	0x200089c8
 80068fc:	2000b218 	.word	0x2000b218
 8006900:	2000b214 	.word	0x2000b214
 8006904:	20007784 	.word	0x20007784
 8006908:	20007780 	.word	0x20007780
 800690c:	200077a0 	.word	0x200077a0
 8006910:	2000b21c 	.word	0x2000b21c
 8006914:	200089c0 	.word	0x200089c0
                tcphdr->dest, tcphdr->src);
 8006918:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 800691a:	9a04      	ldr	r2, [sp, #16]
 800691c:	f8d8 1000 	ldr.w	r1, [r8]
 8006920:	8815      	ldrh	r5, [r2, #0]
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	9201      	str	r2, [sp, #4]
 8006926:	885b      	ldrh	r3, [r3, #2]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	4a94      	ldr	r2, [pc, #592]	; (8006b7c <tcp_input+0x868>)
 800692c:	4b94      	ldr	r3, [pc, #592]	; (8006b80 <tcp_input+0x86c>)
 800692e:	4429      	add	r1, r5
 8006930:	e7a4      	b.n	800687c <tcp_input+0x568>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006932:	079d      	lsls	r5, r3, #30
 8006934:	f57f aeff 	bpl.w	8006736 <tcp_input+0x422>
 8006938:	4a92      	ldr	r2, [pc, #584]	; (8006b84 <tcp_input+0x870>)
 800693a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	3b01      	subs	r3, #1
 8006940:	4293      	cmp	r3, r2
 8006942:	f47f aef8 	bne.w	8006736 <tcp_input+0x422>
      tcp_rexmit(pcb);
 8006946:	4620      	mov	r0, r4
 8006948:	f000 fc27 	bl	800719a <tcp_rexmit>
 800694c:	e6f3      	b.n	8006736 <tcp_input+0x422>
    tcp_receive(pcb);
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff f8ba 	bl	8005ac8 <tcp_receive>
 8006954:	e7c4      	b.n	80068e0 <tcp_input+0x5cc>
    tcp_receive(pcb);
 8006956:	4620      	mov	r0, r4
 8006958:	f7ff f8b6 	bl	8005ac8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800695c:	f899 3000 	ldrb.w	r3, [r9]
 8006960:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8006964:	782b      	ldrb	r3, [r5, #0]
    if (recv_flags & TF_GOT_FIN) {
 8006966:	d034      	beq.n	80069d2 <tcp_input+0x6be>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8006968:	f013 0f10 	tst.w	r3, #16
 800696c:	7fa3      	ldrb	r3, [r4, #30]
        tcp_ack_now(pcb);
 800696e:	f043 0302 	orr.w	r3, r3, #2
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8006972:	d02b      	beq.n	80069cc <tcp_input+0x6b8>
 8006974:	4a84      	ldr	r2, [pc, #528]	; (8006b88 <tcp_input+0x874>)
 8006976:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	4291      	cmp	r1, r2
 800697c:	d126      	bne.n	80069cc <tcp_input+0x6b8>
        tcp_ack_now(pcb);
 800697e:	77a3      	strb	r3, [r4, #30]
        tcp_pcb_purge(pcb);
 8006980:	4620      	mov	r0, r4
 8006982:	f7fe fc5d 	bl	8005240 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006986:	4a81      	ldr	r2, [pc, #516]	; (8006b8c <tcp_input+0x878>)
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	429c      	cmp	r4, r3
 800698c:	d102      	bne.n	8006994 <tcp_input+0x680>
      TCP_RMV_ACTIVE(pcb);
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e00c      	b.n	80069ae <tcp_input+0x69a>
        TCP_RMV_ACTIVE(pcb);
 8006994:	4a7e      	ldr	r2, [pc, #504]	; (8006b90 <tcp_input+0x87c>)
 8006996:	2100      	movs	r1, #0
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	b90b      	cbnz	r3, 80069a0 <tcp_input+0x68c>
 800699c:	b139      	cbz	r1, 80069ae <tcp_input+0x69a>
 800699e:	e7f7      	b.n	8006990 <tcp_input+0x67c>
 80069a0:	68d8      	ldr	r0, [r3, #12]
 80069a2:	4284      	cmp	r4, r0
 80069a4:	d10f      	bne.n	80069c6 <tcp_input+0x6b2>
 80069a6:	b101      	cbz	r1, 80069aa <tcp_input+0x696>
 80069a8:	6013      	str	r3, [r2, #0]
      TCP_RMV_ACTIVE(pcb);
 80069aa:	68e2      	ldr	r2, [r4, #12]
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	4b79      	ldr	r3, [pc, #484]	; (8006b94 <tcp_input+0x880>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80069b4:	230a      	movs	r3, #10
 80069b6:	7623      	strb	r3, [r4, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80069b8:	4b77      	ldr	r3, [pc, #476]	; (8006b98 <tcp_input+0x884>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	60e2      	str	r2, [r4, #12]
 80069be:	601c      	str	r4, [r3, #0]
 80069c0:	f000 fcf6 	bl	80073b0 <tcp_timer_needed>
 80069c4:	e6b7      	b.n	8006736 <tcp_input+0x422>
        TCP_RMV_ACTIVE(pcb);
 80069c6:	2101      	movs	r1, #1
 80069c8:	4603      	mov	r3, r0
 80069ca:	e7e6      	b.n	800699a <tcp_input+0x686>
        tcp_ack_now(pcb);
 80069cc:	77a3      	strb	r3, [r4, #30]
        pcb->state = CLOSING;
 80069ce:	2308      	movs	r3, #8
 80069d0:	e790      	b.n	80068f4 <tcp_input+0x5e0>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 80069d2:	06d9      	lsls	r1, r3, #27
 80069d4:	f57f aeaf 	bpl.w	8006736 <tcp_input+0x422>
 80069d8:	4b6b      	ldr	r3, [pc, #428]	; (8006b88 <tcp_input+0x874>)
 80069da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	f47f aea9 	bne.w	8006736 <tcp_input+0x422>
      pcb->state = FIN_WAIT_2;
 80069e4:	2306      	movs	r3, #6
 80069e6:	e785      	b.n	80068f4 <tcp_input+0x5e0>
    tcp_receive(pcb);
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7ff f86d 	bl	8005ac8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80069ee:	f899 3000 	ldrb.w	r3, [r9]
 80069f2:	069a      	lsls	r2, r3, #26
 80069f4:	f57f ae9f 	bpl.w	8006736 <tcp_input+0x422>
      tcp_ack_now(pcb);
 80069f8:	7fa3      	ldrb	r3, [r4, #30]
 80069fa:	f043 0302 	orr.w	r3, r3, #2
 80069fe:	77a3      	strb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7fe fc1d 	bl	8005240 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a06:	4a61      	ldr	r2, [pc, #388]	; (8006b8c <tcp_input+0x878>)
 8006a08:	6813      	ldr	r3, [r2, #0]
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d0bf      	beq.n	800698e <tcp_input+0x67a>
 8006a0e:	4a60      	ldr	r2, [pc, #384]	; (8006b90 <tcp_input+0x87c>)
 8006a10:	2100      	movs	r1, #0
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0c1      	beq.n	800699c <tcp_input+0x688>
 8006a18:	68d8      	ldr	r0, [r3, #12]
 8006a1a:	4284      	cmp	r4, r0
 8006a1c:	d0c3      	beq.n	80069a6 <tcp_input+0x692>
 8006a1e:	2101      	movs	r1, #1
 8006a20:	4603      	mov	r3, r0
 8006a22:	e7f7      	b.n	8006a14 <tcp_input+0x700>
    tcp_receive(pcb);
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff f84f 	bl	8005ac8 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8006a2a:	782b      	ldrb	r3, [r5, #0]
 8006a2c:	06db      	lsls	r3, r3, #27
 8006a2e:	f57f ae82 	bpl.w	8006736 <tcp_input+0x422>
 8006a32:	4b55      	ldr	r3, [pc, #340]	; (8006b88 <tcp_input+0x874>)
 8006a34:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	f47f ae7c 	bne.w	8006736 <tcp_input+0x422>
      tcp_pcb_purge(pcb);
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7fe fbfe 	bl	8005240 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a44:	4a51      	ldr	r2, [pc, #324]	; (8006b8c <tcp_input+0x878>)
 8006a46:	6813      	ldr	r3, [r2, #0]
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d0a0      	beq.n	800698e <tcp_input+0x67a>
 8006a4c:	4a50      	ldr	r2, [pc, #320]	; (8006b90 <tcp_input+0x87c>)
 8006a4e:	2100      	movs	r1, #0
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0a2      	beq.n	800699c <tcp_input+0x688>
 8006a56:	68d8      	ldr	r0, [r3, #12]
 8006a58:	4284      	cmp	r4, r0
 8006a5a:	d0a4      	beq.n	80069a6 <tcp_input+0x692>
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	4603      	mov	r3, r0
 8006a60:	e7f7      	b.n	8006a52 <tcp_input+0x73e>
    tcp_receive(pcb);
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff f830 	bl	8005ac8 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8006a68:	782b      	ldrb	r3, [r5, #0]
 8006a6a:	06de      	lsls	r6, r3, #27
 8006a6c:	f57f ae63 	bpl.w	8006736 <tcp_input+0x422>
 8006a70:	4b45      	ldr	r3, [pc, #276]	; (8006b88 <tcp_input+0x874>)
 8006a72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	429a      	cmp	r2, r3
      recv_flags |= TF_CLOSED;
 8006a78:	bf02      	ittt	eq
 8006a7a:	f899 3000 	ldrbeq.w	r3, [r9]
 8006a7e:	f043 0310 	orreq.w	r3, r3, #16
 8006a82:	f889 3000 	strbeq.w	r3, [r9]
 8006a86:	e656      	b.n	8006736 <tcp_input+0x422>
      } else if (recv_flags & TF_CLOSED) {
 8006a88:	06d8      	lsls	r0, r3, #27
 8006a8a:	d50b      	bpl.n	8006aa4 <tcp_input+0x790>
        if (!(pcb->flags & TF_RXCLOSED)) {
 8006a8c:	7fa3      	ldrb	r3, [r4, #30]
 8006a8e:	06d9      	lsls	r1, r3, #27
 8006a90:	f53f ae5d 	bmi.w	800674e <tcp_input+0x43a>
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006a94:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f43f ae58 	beq.w	800674e <tcp_input+0x43a>
 8006a9e:	f06f 010b 	mvn.w	r1, #11
 8006aa2:	e652      	b.n	800674a <tcp_input+0x436>
        if (pcb->acked > 0) {
 8006aa4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8006aa8:	b992      	cbnz	r2, 8006ad0 <tcp_input+0x7bc>
        if (recv_data != NULL) {
 8006aaa:	f8db 2000 	ldr.w	r2, [fp]
 8006aae:	b9c2      	cbnz	r2, 8006ae2 <tcp_input+0x7ce>
        if (recv_flags & TF_GOT_FIN) {
 8006ab0:	f899 3000 	ldrb.w	r3, [r9]
 8006ab4:	069a      	lsls	r2, r3, #26
 8006ab6:	d505      	bpl.n	8006ac4 <tcp_input+0x7b0>
          if (pcb->refused_data != NULL) {
 8006ab8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006aba:	b383      	cbz	r3, 8006b1e <tcp_input+0x80a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006abc:	7b5a      	ldrb	r2, [r3, #13]
 8006abe:	f042 0220 	orr.w	r2, r2, #32
 8006ac2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8006ac4:	2300      	movs	r3, #0
        tcp_output(pcb);
 8006ac6:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8006ac8:	603b      	str	r3, [r7, #0]
        tcp_output(pcb);
 8006aca:	f000 f9b1 	bl	8006e30 <tcp_output>
 8006ace:	e510      	b.n	80064f2 <tcp_input+0x1de>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 8006ad0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0e9      	beq.n	8006aaa <tcp_input+0x796>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	6920      	ldr	r0, [r4, #16]
 8006ada:	4798      	blx	r3
          if (err == ERR_ABRT) {
 8006adc:	300a      	adds	r0, #10
 8006ade:	d1e4      	bne.n	8006aaa <tcp_input+0x796>
 8006ae0:	e507      	b.n	80064f2 <tcp_input+0x1de>
          if (pcb->flags & TF_RXCLOSED) {
 8006ae2:	7fa3      	ldrb	r3, [r4, #30]
 8006ae4:	f013 0310 	ands.w	r3, r3, #16
 8006ae8:	d003      	beq.n	8006af2 <tcp_input+0x7de>
            pbuf_free(recv_data);
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7fe f98d 	bl	8004e0a <pbuf_free>
 8006af0:	e6d8      	b.n	80068a4 <tcp_input+0x590>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006af2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006af6:	b165      	cbz	r5, 8006b12 <tcp_input+0x7fe>
 8006af8:	4621      	mov	r1, r4
 8006afa:	6920      	ldr	r0, [r4, #16]
 8006afc:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8006afe:	f110 0f0a 	cmn.w	r0, #10
 8006b02:	f43f acf6 	beq.w	80064f2 <tcp_input+0x1de>
          if (err != ERR_OK) {
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d0d2      	beq.n	8006ab0 <tcp_input+0x79c>
            pcb->refused_data = recv_data;
 8006b0a:	f8db 3000 	ldr.w	r3, [fp]
 8006b0e:	67a3      	str	r3, [r4, #120]	; 0x78
 8006b10:	e7ce      	b.n	8006ab0 <tcp_input+0x79c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006b12:	462b      	mov	r3, r5
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f7fe fe04 	bl	8005724 <tcp_recv_null>
 8006b1c:	e7ef      	b.n	8006afe <tcp_input+0x7ea>
            if (pcb->rcv_wnd != TCP_WND) {
 8006b1e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
 8006b20:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND) {
 8006b24:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8006b28:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 8006b2a:	bf1c      	itt	ne
 8006b2c:	3301      	addne	r3, #1
 8006b2e:	85a3      	strhne	r3, [r4, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	d0c7      	beq.n	8006ac4 <tcp_input+0x7b0>
 8006b34:	2300      	movs	r3, #0
 8006b36:	461a      	mov	r2, r3
 8006b38:	4621      	mov	r1, r4
 8006b3a:	6920      	ldr	r0, [r4, #16]
 8006b3c:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8006b3e:	300a      	adds	r0, #10
 8006b40:	d1c0      	bne.n	8006ac4 <tcp_input+0x7b0>
 8006b42:	e4d6      	b.n	80064f2 <tcp_input+0x1de>
      if (prev != NULL) {
 8006b44:	b138      	cbz	r0, 8006b56 <tcp_input+0x842>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006b46:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8006b4a:	60c1      	str	r1, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006b4c:	4813      	ldr	r0, [pc, #76]	; (8006b9c <tcp_input+0x888>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006b4e:	f8c9 400c 	str.w	r4, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006b52:	f8c0 9000 	str.w	r9, [r0]
  if (flags & TCP_RST) {
 8006b56:	0758      	lsls	r0, r3, #29
 8006b58:	f53f ad13 	bmi.w	8006582 <tcp_input+0x26e>
  if (flags & TCP_ACK) {
 8006b5c:	f013 0410 	ands.w	r4, r3, #16
 8006b60:	f43f ad70 	beq.w	8006644 <tcp_input+0x330>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <tcp_input+0x870>)
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	8813      	ldrh	r3, [r2, #0]
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4a02      	ldr	r2, [pc, #8]	; (8006b7c <tcp_input+0x868>)
 8006b72:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <tcp_input+0x86c>)
 8006b74:	eb0b 0100 	add.w	r1, fp, r0
 8006b78:	e4f0      	b.n	800655c <tcp_input+0x248>
 8006b7a:	bf00      	nop
 8006b7c:	200089c8 	.word	0x200089c8
 8006b80:	200089c0 	.word	0x200089c0
 8006b84:	200077a0 	.word	0x200077a0
 8006b88:	20007780 	.word	0x20007780
 8006b8c:	2000b218 	.word	0x2000b218
 8006b90:	2000b224 	.word	0x2000b224
 8006b94:	2000b214 	.word	0x2000b214
 8006b98:	2000b22c 	.word	0x2000b22c
 8006b9c:	2000b220 	.word	0x2000b220

08006ba0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	f89d 8020 	ldrb.w	r8, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8006ba8:	f018 0f01 	tst.w	r8, #1
 8006bac:	bf14      	ite	ne
 8006bae:	2504      	movne	r5, #4
 8006bb0:	2500      	moveq	r5, #0
 8006bb2:	f018 0f02 	tst.w	r8, #2
{
 8006bb6:	469a      	mov	sl, r3
 8006bb8:	4681      	mov	r9, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8006bba:	bf14      	ite	ne
 8006bbc:	230c      	movne	r3, #12
 8006bbe:	2300      	moveq	r3, #0

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006bc0:	2004      	movs	r0, #4
{
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	4616      	mov	r6, r2
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8006bc6:	441d      	add	r5, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006bc8:	f7fe f826 	bl	8004c18 <memp_malloc>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	b928      	cbnz	r0, 8006bdc <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7fe f91a 	bl	8004e0a <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
} 
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8006bdc:	f880 800a 	strb.w	r8, [r0, #10]
  seg->len = p->tot_len - optlen;
 8006be0:	893b      	ldrh	r3, [r7, #8]
  seg->p = p;
 8006be2:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
 8006be4:	1b5b      	subs	r3, r3, r5
  seg->next = NULL;
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	f8c0 8000 	str.w	r8, [r0]
  seg->len = p->tot_len - optlen;
 8006bee:	8103      	strh	r3, [r0, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8006bf0:	2114      	movs	r1, #20
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f7fe f8de 	bl	8004db4 <pbuf_header>
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	b150      	cbz	r0, 8006c12 <tcp_create_segment+0x72>
    TCP_STATS_INC(tcp.err);
 8006bfc:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <tcp_create_segment+0xc8>)
 8006bfe:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 8006c02:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.err);
 8006c04:	3301      	adds	r3, #1
 8006c06:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    return NULL;
 8006c0a:	4644      	mov	r4, r8
    tcp_seg_free(seg);
 8006c0c:	f7fe faec 	bl	80051e8 <tcp_seg_free>
    return NULL;
 8006c10:	e7e1      	b.n	8006bd6 <tcp_create_segment+0x36>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8006c12:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = htons(pcb->local_port);
 8006c14:	f8b9 001a 	ldrh.w	r0, [r9, #26]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8006c18:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006c1c:	f8c4 800c 	str.w	r8, [r4, #12]
  seg->tcphdr->src = htons(pcb->local_port);
 8006c20:	f7fc ffa8 	bl	8003b74 <lwip_htons>
 8006c24:	f8a8 0000 	strh.w	r0, [r8]
  seg->tcphdr->dest = htons(pcb->remote_port);
 8006c28:	f8b9 001c 	ldrh.w	r0, [r9, #28]
 8006c2c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8006c30:	f7fc ffa0 	bl	8003b74 <lwip_htons>
 8006c34:	f8a8 0002 	strh.w	r0, [r8, #2]
  seg->tcphdr->seqno = htonl(seqno);
 8006c38:	4650      	mov	r0, sl
 8006c3a:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006c3e:	f3c5 0587 	ubfx	r5, r5, #2, #8
  seg->tcphdr->seqno = htonl(seqno);
 8006c42:	f7fc ff9d 	bl	8003b80 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006c46:	3505      	adds	r5, #5
 8006c48:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = htonl(seqno);
 8006c4c:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006c50:	b2a8      	uxth	r0, r5
 8006c52:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8006c56:	f7fc ff8d 	bl	8003b74 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8006c5a:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006c5c:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8006c60:	749f      	strb	r7, [r3, #18]
 8006c62:	74df      	strb	r7, [r3, #19]
  return seg;
 8006c64:	e7b7      	b.n	8006bd6 <tcp_create_segment+0x36>
 8006c66:	bf00      	nop
 8006c68:	2000b0fe 	.word	0x2000b0fe

08006c6c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8006c6c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8006c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8006c70:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8006c72:	4605      	mov	r5, r0
 8006c74:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8006c76:	2001      	movs	r0, #1
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f7fe f8ed 	bl	8004e58 <pbuf_alloc>
  if (p != NULL) {
 8006c7e:	4606      	mov	r6, r0
 8006c80:	b1f8      	cbz	r0, 8006cc2 <tcp_output_alloc_header.constprop.0+0x56>
    tcphdr = (struct tcp_hdr *)p->payload;
 8006c82:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
 8006c84:	8b68      	ldrh	r0, [r5, #26]
 8006c86:	f7fc ff75 	bl	8003b74 <lwip_htons>
 8006c8a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = htons(pcb->remote_port);
 8006c8c:	8ba8      	ldrh	r0, [r5, #28]
 8006c8e:	f7fc ff71 	bl	8003b74 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8006c92:	6067      	str	r7, [r4, #4]
    tcphdr->dest = htons(pcb->remote_port);
 8006c94:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 8006c96:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8006c98:	f7fc ff72 	bl	8003b80 <lwip_htonl>
 8006c9c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8006c9e:	f245 0010 	movw	r0, #20496	; 0x5010
 8006ca2:	f7fc ff67 	bl	8003b74 <lwip_htons>
 8006ca6:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8006ca8:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
 8006caa:	f7fc ff63 	bl	8003b74 <lwip_htons>
    tcphdr->chksum = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	7423      	strb	r3, [r4, #16]
 8006cb2:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8006cb4:	74a3      	strb	r3, [r4, #18]
 8006cb6:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006cb8:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
 8006cba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8006cbc:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006cbe:	4413      	add	r3, r2
 8006cc0:	632b      	str	r3, [r5, #48]	; 0x30
}
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cc8 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8006cc8:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006ccc:	2b07      	cmp	r3, #7
{
 8006cce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	f001 0603 	and.w	r6, r1, #3
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8006cd8:	d90d      	bls.n	8006cf6 <tcp_enqueue_flags+0x2e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8006cda:	4a2c      	ldr	r2, [pc, #176]	; (8006d8c <tcp_enqueue_flags+0xc4>)
 8006cdc:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 8006ce6:	7f83      	ldrb	r3, [r0, #30]
 8006ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cec:	7783      	strb	r3, [r0, #30]
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8006cf2:	b003      	add	sp, #12
 8006cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf6:	f001 0302 	and.w	r3, r1, #2
  if (flags & TCP_SYN) {
 8006cfa:	2b00      	cmp	r3, #0
  if (pcb->snd_buf == 0) {
 8006cfc:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  u8_t optflags = 0;
 8006d00:	bf15      	itete	ne
 8006d02:	2701      	movne	r7, #1
 8006d04:	2700      	moveq	r7, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8006d06:	2104      	movne	r1, #4
 8006d08:	2100      	moveq	r1, #0
  if (pcb->snd_buf == 0) {
 8006d0a:	b933      	cbnz	r3, 8006d1a <tcp_enqueue_flags+0x52>
    TCP_STATS_INC(tcp.memerr);
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <tcp_enqueue_flags+0xc4>)
 8006d0e:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 8006d12:	3301      	adds	r3, #1
 8006d14:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
 8006d18:	e7e9      	b.n	8006cee <tcp_enqueue_flags+0x26>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	f7fe f89b 	bl	8004e58 <pbuf_alloc>
 8006d22:	4601      	mov	r1, r0
 8006d24:	b920      	cbnz	r0, 8006d30 <tcp_enqueue_flags+0x68>
    pcb->flags |= TF_NAGLEMEMERR;
 8006d26:	7fa3      	ldrb	r3, [r4, #30]
 8006d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d2c:	77a3      	strb	r3, [r4, #30]
 8006d2e:	e7ed      	b.n	8006d0c <tcp_enqueue_flags+0x44>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8006d30:	9700      	str	r7, [sp, #0]
 8006d32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d34:	462a      	mov	r2, r5
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7ff ff32 	bl	8006ba0 <tcp_create_segment>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d0f2      	beq.n	8006d26 <tcp_enqueue_flags+0x5e>
  if (pcb->unsent == NULL) {
 8006d40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d42:	b9eb      	cbnz	r3, 8006d80 <tcp_enqueue_flags+0xb8>
    pcb->unsent = seg;
 8006d44:	66e0      	str	r0, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8006d4c:	b13e      	cbz	r6, 8006d5e <tcp_enqueue_flags+0x96>
    pcb->snd_lbb++;
 8006d4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d50:	3301      	adds	r3, #1
 8006d52:	65e3      	str	r3, [r4, #92]	; 0x5c
    pcb->snd_buf--;
 8006d54:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (flags & TCP_FIN) {
 8006d5e:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 8006d60:	bf42      	ittt	mi
 8006d62:	7fa3      	ldrbmi	r3, [r4, #30]
 8006d64:	f043 0320 	orrmi.w	r3, r3, #32
 8006d68:	77a3      	strbmi	r3, [r4, #30]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8006d6a:	6840      	ldr	r0, [r0, #4]
 8006d6c:	f7fe f926 	bl	8004fbc <pbuf_clen>
 8006d70:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8006d74:	4418      	add	r0, r3
 8006d76:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  return ERR_OK;
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e7b9      	b.n	8006cf2 <tcp_enqueue_flags+0x2a>
 8006d7e:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	d1fb      	bne.n	8006d7e <tcp_enqueue_flags+0xb6>
    useg->next = seg;
 8006d86:	6018      	str	r0, [r3, #0]
 8006d88:	e7dd      	b.n	8006d46 <tcp_enqueue_flags+0x7e>
 8006d8a:	bf00      	nop
 8006d8c:	2000b0fe 	.word	0x2000b0fe

08006d90 <tcp_send_fin>:
{
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8006d92:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8006d94:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8006d96:	b934      	cbnz	r4, 8006da6 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006d98:	4628      	mov	r0, r5
 8006d9a:	2101      	movs	r1, #1
}
 8006d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006da0:	f7ff bf92 	b.w	8006cc8 <tcp_enqueue_flags>
 8006da4:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1fb      	bne.n	8006da4 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8006dac:	68e3      	ldr	r3, [r4, #12]
 8006dae:	8998      	ldrh	r0, [r3, #12]
 8006db0:	f7fc fee3 	bl	8003b7a <lwip_ntohs>
 8006db4:	f010 0707 	ands.w	r7, r0, #7
 8006db8:	d1ee      	bne.n	8006d98 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8006dba:	68e6      	ldr	r6, [r4, #12]
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	89b4      	ldrh	r4, [r6, #12]
 8006dc0:	f7fc fed8 	bl	8003b74 <lwip_htons>
 8006dc4:	4320      	orrs	r0, r4
 8006dc6:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8006dc8:	7fab      	ldrb	r3, [r5, #30]
 8006dca:	f043 0320 	orr.w	r3, r3, #32
 8006dce:	77ab      	strb	r3, [r5, #30]
}
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dd4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8006dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd6:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 8006dd8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8006dda:	f7fc fed1 	bl	8003b80 <lwip_htonl>
 8006dde:	2100      	movs	r1, #0
 8006de0:	4602      	mov	r2, r0
 8006de2:	4620      	mov	r0, r4
 8006de4:	f7ff ff42 	bl	8006c6c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8006de8:	4605      	mov	r5, r0
 8006dea:	b1e8      	cbz	r0, 8006e28 <tcp_send_empty_ack+0x54>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006dec:	7fa3      	ldrb	r3, [r4, #30]
  tcphdr = (struct tcp_hdr *)p->payload;
 8006dee:	6847      	ldr	r7, [r0, #4]
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	77a3      	strb	r3, [r4, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 8006df6:	8903      	ldrh	r3, [r0, #8]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	1d26      	adds	r6, r4, #4
 8006dfc:	2306      	movs	r3, #6
 8006dfe:	4632      	mov	r2, r6
 8006e00:	4621      	mov	r1, r4
 8006e02:	f7fd f829 	bl	8003e58 <inet_chksum_pseudo>
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 8006e06:	2206      	movs	r2, #6
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 8006e08:	8238      	strh	r0, [r7, #16]
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	7a62      	ldrb	r2, [r4, #9]
 8006e0e:	7aa3      	ldrb	r3, [r4, #10]
 8006e10:	9200      	str	r2, [sp, #0]
 8006e12:	4621      	mov	r1, r4
 8006e14:	4632      	mov	r2, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	f7fd fa34 	bl	8004284 <ip_output>
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f7fd fff4 	bl	8004e0a <pbuf_free>

  return ERR_OK;
 8006e22:	2000      	movs	r0, #0
}
 8006e24:	b003      	add	sp, #12
 8006e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_BUF;
 8006e28:	f06f 0001 	mvn.w	r0, #1
 8006e2c:	e7fa      	b.n	8006e24 <tcp_send_empty_ack+0x50>
	...

08006e30 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8006e30:	4b9f      	ldr	r3, [pc, #636]	; (80070b0 <tcp_output+0x280>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4298      	cmp	r0, r3
{
 8006e36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	4604      	mov	r4, r0
  if (tcp_input_pcb == pcb) {
 8006e3c:	d02b      	beq.n	8006e96 <tcp_output+0x66>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8006e3e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8006e42:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60

  seg = pcb->unsent;
 8006e46:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8006e48:	429f      	cmp	r7, r3
 8006e4a:	bf28      	it	cs
 8006e4c:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8006e4e:	7f83      	ldrb	r3, [r0, #30]
 8006e50:	079b      	lsls	r3, r3, #30
 8006e52:	d510      	bpl.n	8006e76 <tcp_output+0x46>
 8006e54:	b92d      	cbnz	r5, 8006e62 <tcp_output+0x32>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8006e56:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8006e58:	b003      	add	sp, #12
 8006e5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8006e5e:	f7ff bfb9 	b.w	8006dd4 <tcp_send_empty_ack>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8006e62:	68eb      	ldr	r3, [r5, #12]
 8006e64:	6858      	ldr	r0, [r3, #4]
 8006e66:	f7fc fe8d 	bl	8003b84 <lwip_ntohl>
 8006e6a:	892b      	ldrh	r3, [r5, #8]
 8006e6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006e6e:	1a9b      	subs	r3, r3, r2
 8006e70:	4418      	add	r0, r3
     (seg == NULL ||
 8006e72:	4287      	cmp	r7, r0
 8006e74:	d3ef      	bcc.n	8006e56 <tcp_output+0x26>
  useg = pcb->unacked;
 8006e76:	6f26      	ldr	r6, [r4, #112]	; 0x70
  if (useg != NULL) {
 8006e78:	b996      	cbnz	r6, 8006ea0 <tcp_output+0x70>
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8006e7a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80070b4 <tcp_output+0x284>
    pcb->rttest = tcp_ticks;
 8006e7e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80070b8 <tcp_output+0x288>
  while (seg != NULL &&
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	d13f      	bne.n	8006f06 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 8006e86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006e88:	b90b      	cbnz	r3, 8006e8e <tcp_output+0x5e>
    pcb->unsent_oversize = 0;
 8006e8a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  pcb->flags &= ~TF_NAGLEMEMERR;
 8006e8e:	7fa3      	ldrb	r3, [r4, #30]
 8006e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e94:	77a3      	strb	r3, [r4, #30]
}
 8006e96:	2000      	movs	r0, #0
 8006e98:	b003      	add	sp, #12
 8006e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9e:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1fb      	bne.n	8006e9e <tcp_output+0x6e>
 8006ea6:	e7e8      	b.n	8006e7a <tcp_output+0x4a>
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 8006ea8:	68eb      	ldr	r3, [r5, #12]
 8006eaa:	6858      	ldr	r0, [r3, #4]
 8006eac:	f7fc fe6a 	bl	8003b84 <lwip_ntohl>
 8006eb0:	68f3      	ldr	r3, [r6, #12]
 8006eb2:	4682      	mov	sl, r0
 8006eb4:	6858      	ldr	r0, [r3, #4]
 8006eb6:	f7fc fe65 	bl	8003b84 <lwip_ntohl>
 8006eba:	ebaa 0000 	sub.w	r0, sl, r0
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	da1b      	bge.n	8006efa <tcp_output+0xca>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8006ec2:	f104 0a70 	add.w	sl, r4, #112	; 0x70
          while (*cur_seg &&
 8006ec6:	f8da 3000 	ldr.w	r3, [sl]
 8006eca:	b933      	cbnz	r3, 8006eda <tcp_output+0xaa>
          seg->next = (*cur_seg);
 8006ecc:	f8da 3000 	ldr.w	r3, [sl]
 8006ed0:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8006ed2:	f8ca 5000 	str.w	r5, [sl]
    seg = pcb->unsent;
 8006ed6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8006ed8:	e7d3      	b.n	8006e82 <tcp_output+0x52>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	6858      	ldr	r0, [r3, #4]
 8006ede:	f7fc fe51 	bl	8003b84 <lwip_ntohl>
 8006ee2:	68eb      	ldr	r3, [r5, #12]
 8006ee4:	4683      	mov	fp, r0
 8006ee6:	6858      	ldr	r0, [r3, #4]
 8006ee8:	f7fc fe4c 	bl	8003b84 <lwip_ntohl>
 8006eec:	ebab 0000 	sub.w	r0, fp, r0
          while (*cur_seg &&
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	daeb      	bge.n	8006ecc <tcp_output+0x9c>
              cur_seg = &((*cur_seg)->next );
 8006ef4:	f8da a000 	ldr.w	sl, [sl]
 8006ef8:	e7e5      	b.n	8006ec6 <tcp_output+0x96>
          useg->next = seg;
 8006efa:	6035      	str	r5, [r6, #0]
 8006efc:	e0d0      	b.n	80070a0 <tcp_output+0x270>
      tcp_seg_free(seg);
 8006efe:	4628      	mov	r0, r5
 8006f00:	f7fe f972 	bl	80051e8 <tcp_seg_free>
 8006f04:	e7e7      	b.n	8006ed6 <tcp_output+0xa6>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8006f06:	68eb      	ldr	r3, [r5, #12]
 8006f08:	6858      	ldr	r0, [r3, #4]
 8006f0a:	f7fc fe3b 	bl	8003b84 <lwip_ntohl>
 8006f0e:	892b      	ldrh	r3, [r5, #8]
 8006f10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	4418      	add	r0, r3
  while (seg != NULL &&
 8006f16:	4287      	cmp	r7, r0
 8006f18:	d3b5      	bcc.n	8006e86 <tcp_output+0x56>
    LWIP_ASSERT("RST not expected here!", 
 8006f1a:	68eb      	ldr	r3, [r5, #12]
 8006f1c:	8998      	ldrh	r0, [r3, #12]
 8006f1e:	f7fc fe2c 	bl	8003b7a <lwip_ntohs>
    if((tcp_do_output_nagle(pcb) == 0) &&
 8006f22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006f24:	b19b      	cbz	r3, 8006f4e <tcp_output+0x11e>
 8006f26:	7fa2      	ldrb	r2, [r4, #30]
 8006f28:	f012 0f44 	tst.w	r2, #68	; 0x44
 8006f2c:	d10f      	bne.n	8006f4e <tcp_output+0x11e>
 8006f2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006f30:	b12b      	cbz	r3, 8006f3e <tcp_output+0x10e>
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	b959      	cbnz	r1, 8006f4e <tcp_output+0x11e>
 8006f36:	8919      	ldrh	r1, [r3, #8]
 8006f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f3a:	4299      	cmp	r1, r3
 8006f3c:	d207      	bcs.n	8006f4e <tcp_output+0x11e>
 8006f3e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8006f42:	b123      	cbz	r3, 8006f4e <tcp_output+0x11e>
 8006f44:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8006f48:	2b07      	cmp	r3, #7
 8006f4a:	f240 80ab 	bls.w	80070a4 <tcp_output+0x274>
    pcb->unsent = seg->next;
 8006f4e:	682b      	ldr	r3, [r5, #0]
 8006f50:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8006f52:	7e23      	ldrb	r3, [r4, #24]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d00e      	beq.n	8006f76 <tcp_output+0x146>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8006f58:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 8006f5c:	2010      	movs	r0, #16
 8006f5e:	f8bb a00c 	ldrh.w	sl, [fp, #12]
 8006f62:	f7fc fe07 	bl	8003b74 <lwip_htons>
 8006f66:	ea4a 0000 	orr.w	r0, sl, r0
 8006f6a:	f8ab 000c 	strh.w	r0, [fp, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006f6e:	7fa3      	ldrb	r3, [r4, #30]
 8006f70:	f023 0303 	bic.w	r3, r3, #3
 8006f74:	77a3      	strb	r3, [r4, #30]
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 8006f76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006f78:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006f7c:	f7fc fe00 	bl	8003b80 <lwip_htonl>
 8006f80:	f8ca 0008 	str.w	r0, [sl, #8]
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8006f84:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8006f86:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006f8a:	f7fc fdf3 	bl	8003b74 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006f8e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8006f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8006f92:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006f96:	4413      	add	r3, r2
 8006f98:	6323      	str	r3, [r4, #48]	; 0x30
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8006f9a:	7aab      	ldrb	r3, [r5, #10]
 8006f9c:	f013 0f01 	tst.w	r3, #1
 8006fa0:	f104 0b04 	add.w	fp, r4, #4
 8006fa4:	d00c      	beq.n	8006fc0 <tcp_output+0x190>
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f240 50b4 	movw	r0, #1460	; 0x5b4
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8006fac:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
 8006fb0:	f7fe fd3c 	bl	8005a2c <tcp_eff_send_mss>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8006fb4:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8006fb8:	f7fc fde2 	bl	8003b80 <lwip_htonl>
 8006fbc:	f8ca 0014 	str.w	r0, [sl, #20]
  if (pcb->rtime == -1) {
 8006fc0:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 8006fc4:	3301      	adds	r3, #1
    pcb->rtime = 0;
 8006fc6:	bf04      	itt	eq
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	86a3      	strheq	r3, [r4, #52]	; 0x34
  if (ip_addr_isany(&(pcb->local_ip))) {
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	b933      	cbnz	r3, 8006fde <tcp_output+0x1ae>
    netif = ip_route(&(pcb->remote_ip));
 8006fd0:	4658      	mov	r0, fp
 8006fd2:	f7fc ffad 	bl	8003f30 <ip_route>
    if (netif == NULL) {
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d037      	beq.n	800704a <tcp_output+0x21a>
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 8006fda:	6843      	ldr	r3, [r0, #4]
 8006fdc:	6023      	str	r3, [r4, #0]
  if (pcb->rttest == 0) {
 8006fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fe0:	b93b      	cbnz	r3, 8006ff2 <tcp_output+0x1c2>
    pcb->rttest = tcp_ticks;
 8006fe2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fe6:	63a3      	str	r3, [r4, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 8006fe8:	68eb      	ldr	r3, [r5, #12]
 8006fea:	6858      	ldr	r0, [r3, #4]
 8006fec:	f7fc fdca 	bl	8003b84 <lwip_ntohl>
 8006ff0:	63e0      	str	r0, [r4, #60]	; 0x3c
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006ff2:	6868      	ldr	r0, [r5, #4]
 8006ff4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006ff8:	6843      	ldr	r3, [r0, #4]
  seg->p->payload = seg->tcphdr;
 8006ffa:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006ffe:	ebaa 0303 	sub.w	r3, sl, r3
 8007002:	b29a      	uxth	r2, r3
  seg->p->len -= len;
 8007004:	8943      	ldrh	r3, [r0, #10]
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 800700a:	8903      	ldrh	r3, [r0, #8]
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	b29b      	uxth	r3, r3
  seg->tcphdr->chksum = 0;
 8007010:	2200      	movs	r2, #0
  seg->p->tot_len -= len;
 8007012:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 8007014:	4621      	mov	r1, r4
  seg->tcphdr->chksum = 0;
 8007016:	f88a 2010 	strb.w	r2, [sl, #16]
 800701a:	f88a 2011 	strb.w	r2, [sl, #17]
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	465a      	mov	r2, fp
 8007022:	2306      	movs	r3, #6
 8007024:	f7fc ff18 	bl	8003e58 <inet_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 8007028:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 800702c:	f8aa 0010 	strh.w	r0, [sl, #16]
  TCP_STATS_INC(tcp.xmit);
 8007030:	3301      	adds	r3, #1
 8007032:	f8a8 3090 	strh.w	r3, [r8, #144]	; 0x90

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 8007036:	2206      	movs	r2, #6
 8007038:	9201      	str	r2, [sp, #4]
 800703a:	7a62      	ldrb	r2, [r4, #9]
 800703c:	9200      	str	r2, [sp, #0]
 800703e:	7aa3      	ldrb	r3, [r4, #10]
 8007040:	6868      	ldr	r0, [r5, #4]
 8007042:	465a      	mov	r2, fp
 8007044:	4621      	mov	r1, r4
 8007046:	f7fd f91d 	bl	8004284 <ip_output>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800704a:	68eb      	ldr	r3, [r5, #12]
 800704c:	6858      	ldr	r0, [r3, #4]
 800704e:	f7fc fd99 	bl	8003b84 <lwip_ntohl>
 8007052:	68eb      	ldr	r3, [r5, #12]
 8007054:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8007058:	4682      	mov	sl, r0
 800705a:	8998      	ldrh	r0, [r3, #12]
 800705c:	f7fc fd8d 	bl	8003b7a <lwip_ntohs>
 8007060:	f010 0003 	ands.w	r0, r0, #3
 8007064:	bf18      	it	ne
 8007066:	2001      	movne	r0, #1
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8007068:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800706a:	4458      	add	r0, fp
 800706c:	4450      	add	r0, sl
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800706e:	1a1b      	subs	r3, r3, r0
 8007070:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8007072:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 8007074:	bfb8      	it	lt
 8007076:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8007078:	8998      	ldrh	r0, [r3, #12]
 800707a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800707e:	f7fc fd7c 	bl	8003b7a <lwip_ntohs>
 8007082:	f010 0003 	ands.w	r0, r0, #3
 8007086:	bf18      	it	ne
 8007088:	2001      	movne	r0, #1
 800708a:	eb10 0f0a 	cmn.w	r0, sl
 800708e:	f43f af36 	beq.w	8006efe <tcp_output+0xce>
      seg->next = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8007096:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007098:	2b00      	cmp	r3, #0
 800709a:	f47f af05 	bne.w	8006ea8 <tcp_output+0x78>
        pcb->unacked = seg;
 800709e:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 80070a0:	462e      	mov	r6, r5
 80070a2:	e718      	b.n	8006ed6 <tcp_output+0xa6>
    if((tcp_do_output_nagle(pcb) == 0) &&
 80070a4:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 80070a8:	f47f af51 	bne.w	8006f4e <tcp_output+0x11e>
 80070ac:	e6eb      	b.n	8006e86 <tcp_output+0x56>
 80070ae:	bf00      	nop
 80070b0:	2000b230 	.word	0x2000b230
 80070b4:	2000b0fe 	.word	0x2000b0fe
 80070b8:	2000b21c 	.word	0x2000b21c

080070bc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80070bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	4681      	mov	r9, r0
 80070c2:	460e      	mov	r6, r1
 80070c4:	4617      	mov	r7, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80070c6:	2114      	movs	r1, #20
 80070c8:	2200      	movs	r2, #0
 80070ca:	2001      	movs	r0, #1
{
 80070cc:	4698      	mov	r8, r3
 80070ce:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 80070d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80070d6:	f7fd febf 	bl	8004e58 <pbuf_alloc>
  if (p == NULL) {
 80070da:	4605      	mov	r5, r0
 80070dc:	2800      	cmp	r0, #0
 80070de:	d03d      	beq.n	800715c <tcp_rst+0xa0>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80070e0:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
 80070e2:	4658      	mov	r0, fp
 80070e4:	f7fc fd46 	bl	8003b74 <lwip_htons>
 80070e8:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
 80070ea:	4650      	mov	r0, sl
 80070ec:	f7fc fd42 	bl	8003b74 <lwip_htons>
 80070f0:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
 80070f2:	4648      	mov	r0, r9
 80070f4:	f7fc fd44 	bl	8003b80 <lwip_htonl>
 80070f8:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7fc fd40 	bl	8003b80 <lwip_htonl>
 8007100:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8007102:	f245 0014 	movw	r0, #20500	; 0x5014
 8007106:	f7fc fd35 	bl	8003b74 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800710a:	2316      	movs	r3, #22
 800710c:	73a3      	strb	r3, [r4, #14]
 800710e:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 8007112:	2600      	movs	r6, #0
 8007114:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 8007116:	892b      	ldrh	r3, [r5, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8007118:	81a0      	strh	r0, [r4, #12]
  tcphdr->chksum = 0;
 800711a:	7426      	strb	r6, [r4, #16]
 800711c:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800711e:	74a6      	strb	r6, [r4, #18]
 8007120:	74e6      	strb	r6, [r4, #19]
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 8007122:	4642      	mov	r2, r8
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4639      	mov	r1, r7
 8007128:	2306      	movs	r3, #6
 800712a:	4628      	mov	r0, r5
 800712c:	f7fc fe94 	bl	8003e58 <inet_chksum_pseudo>
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 8007130:	4a0c      	ldr	r2, [pc, #48]	; (8007164 <tcp_rst+0xa8>)
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 8007132:	8220      	strh	r0, [r4, #16]
  TCP_STATS_INC(tcp.xmit);
 8007134:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
 8007138:	3301      	adds	r3, #1
 800713a:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 800713e:	2306      	movs	r3, #6
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	9600      	str	r6, [sp, #0]
 8007144:	23ff      	movs	r3, #255	; 0xff
 8007146:	4642      	mov	r2, r8
 8007148:	4639      	mov	r1, r7
 800714a:	4628      	mov	r0, r5
 800714c:	f7fd f89a 	bl	8004284 <ip_output>
  pbuf_free(p);
 8007150:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8007152:	b003      	add	sp, #12
 8007154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007158:	f7fd be57 	b.w	8004e0a <pbuf_free>
}
 800715c:	b003      	add	sp, #12
 800715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007162:	bf00      	nop
 8007164:	2000b0fe 	.word	0x2000b0fe

08007168 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8007168:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 800716a:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800716c:	b192      	cbz	r2, 8007194 <tcp_rexmit_rto+0x2c>
 800716e:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8007170:	680b      	ldr	r3, [r1, #0]
 8007172:	b96b      	cbnz	r3, 8007190 <tcp_rexmit_rto+0x28>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8007174:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8007176:	600c      	str	r4, [r1, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8007178:	66c2      	str	r2, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800717a:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
  pcb->unacked = NULL;
 800717e:	6703      	str	r3, [r0, #112]	; 0x70
  ++pcb->nrtx;
 8007180:	3201      	adds	r2, #1
 8007182:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8007186:	6383      	str	r3, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8007188:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800718c:	f7ff be50 	b.w	8006e30 <tcp_output>
 8007190:	4619      	mov	r1, r3
 8007192:	e7ed      	b.n	8007170 <tcp_rexmit_rto+0x8>
}
 8007194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007198:	4770      	bx	lr

0800719a <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800719c:	6f05      	ldr	r5, [r0, #112]	; 0x70
{
 800719e:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 80071a0:	b19d      	cbz	r5, 80071ca <tcp_rexmit+0x30>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80071a6:	f100 066c 	add.w	r6, r0, #108	; 0x6c
  while (*cur_seg &&
 80071aa:	6833      	ldr	r3, [r6, #0]
 80071ac:	b973      	cbnz	r3, 80071cc <tcp_rexmit+0x32>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 80071ae:	6833      	ldr	r3, [r6, #0]
 80071b0:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 80071b2:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b90b      	cbnz	r3, 80071bc <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80071b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 80071bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80071c0:	3301      	adds	r3, #1
 80071c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80071ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	6858      	ldr	r0, [r3, #4]
 80071d0:	f7fc fcd8 	bl	8003b84 <lwip_ntohl>
 80071d4:	68eb      	ldr	r3, [r5, #12]
 80071d6:	4607      	mov	r7, r0
 80071d8:	6858      	ldr	r0, [r3, #4]
 80071da:	f7fc fcd3 	bl	8003b84 <lwip_ntohl>
 80071de:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 80071e0:	2800      	cmp	r0, #0
 80071e2:	dae4      	bge.n	80071ae <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 80071e4:	6836      	ldr	r6, [r6, #0]
 80071e6:	e7e0      	b.n	80071aa <tcp_rexmit+0x10>

080071e8 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80071e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 80071ea:	b510      	push	{r4, lr}
 80071ec:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80071ee:	b313      	cbz	r3, 8007236 <tcp_rexmit_fast+0x4e>
 80071f0:	7f83      	ldrb	r3, [r0, #30]
 80071f2:	075b      	lsls	r3, r3, #29
 80071f4:	d41f      	bmi.n	8007236 <tcp_rexmit_fast+0x4e>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80071f6:	f7ff ffd0 	bl	800719a <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 80071fa:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 80071fe:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8007202:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
 8007204:	bf8b      	itete	hi
 8007206:	0852      	lsrhi	r2, r2, #1
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 8007208:	085b      	lsrls	r3, r3, #1
      pcb->ssthresh = pcb->snd_wnd / 2;
 800720a:	f8a4 204e 	strhhi.w	r2, [r4, #78]	; 0x4e
      pcb->ssthresh = pcb->cwnd / 2;
 800720e:	f8a4 304e 	strhls.w	r3, [r4, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 8007212:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007214:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8007218:	005a      	lsls	r2, r3, #1
 800721a:	4291      	cmp	r1, r2
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 800721c:	bfb8      	it	lt
 800721e:	f8a4 204e 	strhlt.w	r2, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8007222:	4413      	add	r3, r2
 8007224:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 8007228:	4413      	add	r3, r2
 800722a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
 800722e:	7fa3      	ldrb	r3, [r4, #30]
 8007230:	f043 0304 	orr.w	r3, r3, #4
 8007234:	77a3      	strb	r3, [r4, #30]
 8007236:	bd10      	pop	{r4, pc}

08007238 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 8007238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723a:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 800723c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800723e:	3801      	subs	r0, #1
 8007240:	f7fc fc9e 	bl	8003b80 <lwip_htonl>
 8007244:	2100      	movs	r1, #0
 8007246:	4602      	mov	r2, r0
 8007248:	4620      	mov	r0, r4
 800724a:	f7ff fd0f 	bl	8006c6c <tcp_output_alloc_header.constprop.0>
  if(p == NULL) {
 800724e:	4605      	mov	r5, r0
 8007250:	b1f8      	cbz	r0, 8007292 <tcp_keepalive+0x5a>
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 8007252:	1d26      	adds	r6, r4, #4
 8007254:	8903      	ldrh	r3, [r0, #8]
  tcphdr = (struct tcp_hdr *)p->payload;
 8007256:	6847      	ldr	r7, [r0, #4]
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4632      	mov	r2, r6
 800725c:	4621      	mov	r1, r4
 800725e:	2306      	movs	r3, #6
 8007260:	f7fc fdfa 	bl	8003e58 <inet_chksum_pseudo>
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 8007264:	4a0c      	ldr	r2, [pc, #48]	; (8007298 <tcp_keepalive+0x60>)
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 8007266:	8238      	strh	r0, [r7, #16]
  TCP_STATS_INC(tcp.xmit);
 8007268:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
 800726c:	3301      	adds	r3, #1
 800726e:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 8007272:	2100      	movs	r1, #0
 8007274:	2206      	movs	r2, #6
 8007276:	e88d 0006 	stmia.w	sp, {r1, r2}
 800727a:	7aa3      	ldrb	r3, [r4, #10]
 800727c:	4632      	mov	r2, r6
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f7fc ffff 	bl	8004284 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 8007286:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 8007288:	b003      	add	sp, #12
 800728a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  pbuf_free(p);
 800728e:	f7fd bdbc 	b.w	8004e0a <pbuf_free>
}
 8007292:	b003      	add	sp, #12
 8007294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007296:	bf00      	nop
 8007298:	2000b0fe 	.word	0x2000b0fe

0800729c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800729c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80072a0:	6f05      	ldr	r5, [r0, #112]	; 0x70
{
 80072a2:	4606      	mov	r6, r0

  if(seg == NULL) {
 80072a4:	b915      	cbnz	r5, 80072ac <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 80072a6:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  }
  if(seg == NULL) {
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	d04e      	beq.n	800734a <tcp_zero_window_probe+0xae>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80072ac:	68eb      	ldr	r3, [r5, #12]
 80072ae:	8998      	ldrh	r0, [r3, #12]
 80072b0:	f7fc fc63 	bl	8003b7a <lwip_ntohs>
 80072b4:	f010 0401 	ands.w	r4, r0, #1
 80072b8:	bf18      	it	ne
 80072ba:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80072bc:	68eb      	ldr	r3, [r5, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80072be:	bf1c      	itt	ne
 80072c0:	fab4 f484 	clzne	r4, r4
 80072c4:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	f084 0101 	eor.w	r1, r4, #1
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fccd 	bl	8006c6c <tcp_output_alloc_header.constprop.0>
  if(p == NULL) {
 80072d2:	4607      	mov	r7, r0
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d038      	beq.n	800734a <tcp_zero_window_probe+0xae>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80072d8:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80072dc:	b354      	cbz	r4, 8007334 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80072de:	2011      	movs	r0, #17
 80072e0:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 80072e4:	f7fc fc46 	bl	8003b74 <lwip_htons>
 80072e8:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 80072ec:	4320      	orrs	r0, r4
 80072ee:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 80072f2:	893b      	ldrh	r3, [r7, #8]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	1d34      	adds	r4, r6, #4
 80072f8:	4622      	mov	r2, r4
 80072fa:	4631      	mov	r1, r6
 80072fc:	2306      	movs	r3, #6
 80072fe:	4638      	mov	r0, r7
 8007300:	f7fc fdaa 	bl	8003e58 <inet_chksum_pseudo>
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 8007304:	4a12      	ldr	r2, [pc, #72]	; (8007350 <tcp_zero_window_probe+0xb4>)
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 8007306:	f8a8 0010 	strh.w	r0, [r8, #16]
  TCP_STATS_INC(tcp.xmit);
 800730a:	f8b2 3090 	ldrh.w	r3, [r2, #144]	; 0x90
 800730e:	3301      	adds	r3, #1
 8007310:	f8a2 3090 	strh.w	r3, [r2, #144]	; 0x90
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 8007314:	2100      	movs	r1, #0
 8007316:	2206      	movs	r2, #6
 8007318:	e88d 0006 	stmia.w	sp, {r1, r2}
 800731c:	7ab3      	ldrb	r3, [r6, #10]
 800731e:	4622      	mov	r2, r4
 8007320:	4631      	mov	r1, r6
 8007322:	4638      	mov	r0, r7
 8007324:	f7fc ffae 	bl	8004284 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 8007328:	4638      	mov	r0, r7

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 800732a:	b002      	add	sp, #8
 800732c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  pbuf_free(p);
 8007330:	f7fd bd6b 	b.w	8004e0a <pbuf_free>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8007334:	6868      	ldr	r0, [r5, #4]
 8007336:	892a      	ldrh	r2, [r5, #8]
 8007338:	8903      	ldrh	r3, [r0, #8]
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	b29b      	uxth	r3, r3
 800733e:	2201      	movs	r2, #1
 8007340:	f108 0114 	add.w	r1, r8, #20
 8007344:	f7fd feab 	bl	800509e <pbuf_copy_partial>
 8007348:	e7d3      	b.n	80072f2 <tcp_zero_window_probe+0x56>
}
 800734a:	b002      	add	sp, #8
 800734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007350:	2000b0fe 	.word	0x2000b0fe

08007354 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8007358:	2007      	movs	r0, #7
{
 800735a:	460e      	mov	r6, r1
 800735c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800735e:	f7fd fc5b 	bl	8004c18 <memp_malloc>
  if (timeout == NULL) {
 8007362:	b308      	cbz	r0, 80073a8 <sys_timeout+0x54>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8007364:	4911      	ldr	r1, [pc, #68]	; (80073ac <sys_timeout+0x58>)
  timeout->h = handler;
 8007366:	6086      	str	r6, [r0, #8]
  timeout->next = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800736c:	680b      	ldr	r3, [r1, #0]
  timeout->arg = arg;
 800736e:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
 8007370:	6044      	str	r4, [r0, #4]
  if (next_timeout == NULL) {
 8007372:	b90b      	cbnz	r3, 8007378 <sys_timeout+0x24>
  }

  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
 8007374:	6008      	str	r0, [r1, #0]
 8007376:	bd70      	pop	{r4, r5, r6, pc}
  if (next_timeout->time > msecs) {
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	4294      	cmp	r4, r2
 800737c:	d207      	bcs.n	800738e <sys_timeout+0x3a>
    next_timeout->time -= msecs;
 800737e:	1b12      	subs	r2, r2, r4
 8007380:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8007382:	6003      	str	r3, [r0, #0]
 8007384:	e7f6      	b.n	8007374 <sys_timeout+0x20>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 8007386:	6854      	ldr	r4, [r2, #4]
 8007388:	42a1      	cmp	r1, r4
 800738a:	d30a      	bcc.n	80073a2 <sys_timeout+0x4e>
 800738c:	4613      	mov	r3, r2
      timeout->time -= t->time;
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	6841      	ldr	r1, [r0, #4]
 8007392:	1a89      	subs	r1, r1, r2
      if (t->next == NULL || t->next->time > timeout->time) {
 8007394:	681a      	ldr	r2, [r3, #0]
      timeout->time -= t->time;
 8007396:	6041      	str	r1, [r0, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8007398:	2a00      	cmp	r2, #0
 800739a:	d1f4      	bne.n	8007386 <sys_timeout+0x32>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        }
        timeout->next = t->next;
 800739c:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800739e:	6018      	str	r0, [r3, #0]
        break;
 80073a0:	bd70      	pop	{r4, r5, r6, pc}
          t->next->time -= timeout->time;
 80073a2:	1a61      	subs	r1, r4, r1
 80073a4:	6051      	str	r1, [r2, #4]
 80073a6:	e7f9      	b.n	800739c <sys_timeout+0x48>
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	bf00      	nop
 80073ac:	200077ac 	.word	0x200077ac

080073b0 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80073b0:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <tcp_timer_needed+0x24>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	b962      	cbnz	r2, 80073d0 <tcp_timer_needed+0x20>
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <tcp_timer_needed+0x28>)
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	b912      	cbnz	r2, 80073c2 <tcp_timer_needed+0x12>
 80073bc:	4a07      	ldr	r2, [pc, #28]	; (80073dc <tcp_timer_needed+0x2c>)
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	b132      	cbz	r2, 80073d0 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80073c6:	4906      	ldr	r1, [pc, #24]	; (80073e0 <tcp_timer_needed+0x30>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	20fa      	movs	r0, #250	; 0xfa
 80073cc:	f7ff bfc2 	b.w	8007354 <sys_timeout>
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	200077b0 	.word	0x200077b0
 80073d8:	2000b218 	.word	0x2000b218
 80073dc:	2000b22c 	.word	0x2000b22c
 80073e0:	080073e5 	.word	0x080073e5

080073e4 <tcpip_tcp_timer>:
{
 80073e4:	b508      	push	{r3, lr}
  tcp_tmr();
 80073e6:	f7fe fa1b 	bl	8005820 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80073ea:	4b08      	ldr	r3, [pc, #32]	; (800740c <tcpip_tcp_timer+0x28>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	b913      	cbnz	r3, 80073f6 <tcpip_tcp_timer+0x12>
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <tcpip_tcp_timer+0x2c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	b133      	cbz	r3, 8007404 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80073f6:	2200      	movs	r2, #0
 80073f8:	4906      	ldr	r1, [pc, #24]	; (8007414 <tcpip_tcp_timer+0x30>)
 80073fa:	20fa      	movs	r0, #250	; 0xfa
}
 80073fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007400:	f7ff bfa8 	b.w	8007354 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8007404:	4a04      	ldr	r2, [pc, #16]	; (8007418 <tcpip_tcp_timer+0x34>)
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	bd08      	pop	{r3, pc}
 800740a:	bf00      	nop
 800740c:	2000b218 	.word	0x2000b218
 8007410:	2000b22c 	.word	0x2000b22c
 8007414:	080073e5 	.word	0x080073e5
 8007418:	200077b0 	.word	0x200077b0

0800741c <sys_timeouts_init>:
{
 800741c:	b508      	push	{r3, lr}
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800741e:	2200      	movs	r2, #0
 8007420:	4907      	ldr	r1, [pc, #28]	; (8007440 <sys_timeouts_init+0x24>)
 8007422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007426:	f7ff ff95 	bl	8007354 <sys_timeout>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800742a:	2200      	movs	r2, #0
 800742c:	4905      	ldr	r1, [pc, #20]	; (8007444 <sys_timeouts_init+0x28>)
 800742e:	f241 3088 	movw	r0, #5000	; 0x1388
 8007432:	f7ff ff8f 	bl	8007354 <sys_timeout>
  timeouts_last_time = sys_now();
 8007436:	f7fb fd72 	bl	8002f1e <sys_now>
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <sys_timeouts_init+0x2c>)
 800743c:	6018      	str	r0, [r3, #0]
 800743e:	bd08      	pop	{r3, pc}
 8007440:	08007469 	.word	0x08007469
 8007444:	0800744d 	.word	0x0800744d
 8007448:	200077b4 	.word	0x200077b4

0800744c <arp_timer>:
{
 800744c:	b508      	push	{r3, lr}
  etharp_tmr();
 800744e:	f000 fadb 	bl	8007a08 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 8007452:	2200      	movs	r2, #0
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <arp_timer+0x18>)
 8007456:	f241 3088 	movw	r0, #5000	; 0x1388
}
 800745a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800745e:	f7ff bf79 	b.w	8007354 <sys_timeout>
 8007462:	bf00      	nop
 8007464:	0800744d 	.word	0x0800744d

08007468 <ip_reass_timer>:
{
 8007468:	b508      	push	{r3, lr}
  ip_reass_tmr();
 800746a:	f7fc ffd7 	bl	800441c <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800746e:	2200      	movs	r2, #0
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <ip_reass_timer+0x18>)
 8007472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8007476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800747a:	f7ff bf6b 	b.w	8007354 <sys_timeout>
 800747e:	bf00      	nop
 8007480:	08007469 	.word	0x08007469

08007484 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007484:	4770      	bx	lr
	...

08007488 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800748c:	4e66      	ldr	r6, [pc, #408]	; (8007628 <udp_input+0x1a0>)

  iphdr = (struct ip_hdr *)p->payload;
 800748e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  UDP_STATS_INC(udp.recv);
 8007492:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
 8007496:	3301      	adds	r3, #1
 8007498:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
{
 800749c:	468a      	mov	sl, r1
 800749e:	f898 1000 	ldrb.w	r1, [r8]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 80074a2:	8903      	ldrh	r3, [r0, #8]
 80074a4:	f001 010f 	and.w	r1, r1, #15
 80074a8:	1c8a      	adds	r2, r1, #2
 80074aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
{
 80074ae:	b085      	sub	sp, #20
 80074b0:	4604      	mov	r4, r0
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 80074b2:	da0f      	bge.n	80074d4 <udp_input+0x4c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 80074b4:	f8b6 3082 	ldrh.w	r3, [r6, #130]	; 0x82
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 80074be:	f8b6 307e 	ldrh.w	r3, [r6, #126]	; 0x7e
 80074c2:	3301      	adds	r3, #1
 80074c4:	f8a6 307e 	strh.w	r3, [r6, #126]	; 0x7e
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
 80074c8:	4620      	mov	r0, r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
 80074ca:	b005      	add	sp, #20
 80074cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80074d0:	f7fd bc9b 	b.w	8004e0a <pbuf_free>
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 80074d4:	0089      	lsls	r1, r1, #2
 80074d6:	4249      	negs	r1, r1
 80074d8:	f7fd fc6c 	bl	8004db4 <pbuf_header>
 80074dc:	4605      	mov	r5, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	d1e8      	bne.n	80074b4 <udp_input+0x2c>
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 80074e2:	f8df b150 	ldr.w	fp, [pc, #336]	; 8007634 <udp_input+0x1ac>
  udphdr = (struct udp_hdr *)p->payload;
 80074e6:	6866      	ldr	r6, [r4, #4]
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 80074e8:	f8db 0000 	ldr.w	r0, [fp]
 80074ec:	4651      	mov	r1, sl
 80074ee:	f7fc feed 	bl	80042cc <ip4_addr_isbroadcast>
 80074f2:	4607      	mov	r7, r0
  src = ntohs(udphdr->src);
 80074f4:	8830      	ldrh	r0, [r6, #0]
 80074f6:	f7fc fb40 	bl	8003b7a <lwip_ntohs>
 80074fa:	4681      	mov	r9, r0
  dest = ntohs(udphdr->dest);
 80074fc:	8870      	ldrh	r0, [r6, #2]
 80074fe:	f7fc fb3c 	bl	8003b7a <lwip_ntohs>
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007502:	4b4a      	ldr	r3, [pc, #296]	; (800762c <udp_input+0x1a4>)
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 8007504:	f8db 1000 	ldr.w	r1, [fp]
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	9303      	str	r3, [sp, #12]
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 800750c:	4b48      	ldr	r3, [pc, #288]	; (8007630 <udp_input+0x1a8>)
 800750e:	f8d3 e000 	ldr.w	lr, [r3]
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007512:	9b03      	ldr	r3, [sp, #12]
  dest = ntohs(udphdr->dest);
 8007514:	4684      	mov	ip, r0
    prev = NULL;
 8007516:	46ab      	mov	fp, r5
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007518:	b933      	cbnz	r3, 8007528 <udp_input+0xa0>
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 800751a:	2d00      	cmp	r5, #0
 800751c:	d136      	bne.n	800758c <udp_input+0x104>
 800751e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007522:	4299      	cmp	r1, r3
 8007524:	d1d0      	bne.n	80074c8 <udp_input+0x40>
 8007526:	e031      	b.n	800758c <udp_input+0x104>
      if (pcb->local_port == dest) {
 8007528:	8a5a      	ldrh	r2, [r3, #18]
 800752a:	4562      	cmp	r2, ip
 800752c:	d123      	bne.n	8007576 <udp_input+0xee>
 800752e:	681a      	ldr	r2, [r3, #0]
        if (
 8007530:	b907      	cbnz	r7, 8007534 <udp_input+0xac>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 8007532:	b14a      	cbz	r2, 8007548 <udp_input+0xc0>
 8007534:	428a      	cmp	r2, r1
 8007536:	d007      	beq.n	8007548 <udp_input+0xc0>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 8007538:	b1ef      	cbz	r7, 8007576 <udp_input+0xee>
             (ip_addr_isany(&pcb->local_ip) ||
 800753a:	b12a      	cbz	r2, 8007548 <udp_input+0xc0>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 800753c:	404a      	eors	r2, r1
 800753e:	4610      	mov	r0, r2
             (ip_addr_isany(&pcb->local_ip) ||
 8007540:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007544:	4210      	tst	r0, r2
 8007546:	d116      	bne.n	8007576 <udp_input+0xee>
          if ((uncon_pcb == NULL) && 
 8007548:	b925      	cbnz	r5, 8007554 <udp_input+0xcc>
 800754a:	7c1a      	ldrb	r2, [r3, #16]
 800754c:	f012 0f04 	tst.w	r2, #4
 8007550:	bf08      	it	eq
 8007552:	461d      	moveq	r5, r3
      if ((local_match != 0) &&
 8007554:	8a9a      	ldrh	r2, [r3, #20]
 8007556:	454a      	cmp	r2, r9
 8007558:	d10d      	bne.n	8007576 <udp_input+0xee>
          (ip_addr_isany(&pcb->remote_ip) ||
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	b94a      	cbnz	r2, 8007572 <udp_input+0xea>
        if (prev != NULL) {
 800755e:	f1bb 0f00 	cmp.w	fp, #0
 8007562:	d10b      	bne.n	800757c <udp_input+0xf4>
          UDP_STATS_INC(udp.cachehit);
 8007564:	4930      	ldr	r1, [pc, #192]	; (8007628 <udp_input+0x1a0>)
 8007566:	f8b1 208e 	ldrh.w	r2, [r1, #142]	; 0x8e
 800756a:	3201      	adds	r2, #1
 800756c:	f8a1 208e 	strh.w	r2, [r1, #142]	; 0x8e
 8007570:	e00b      	b.n	800758a <udp_input+0x102>
          (ip_addr_isany(&pcb->remote_ip) ||
 8007572:	4572      	cmp	r2, lr
 8007574:	d0f3      	beq.n	800755e <udp_input+0xd6>
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007576:	469b      	mov	fp, r3
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	e7cd      	b.n	8007518 <udp_input+0x90>
          prev->next = pcb->next;
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	f8cb 200c 	str.w	r2, [fp, #12]
          pcb->next = udp_pcbs;
 8007582:	9a03      	ldr	r2, [sp, #12]
 8007584:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8007586:	4a29      	ldr	r2, [pc, #164]	; (800762c <udp_input+0x1a4>)
 8007588:	6013      	str	r3, [r2, #0]
          UDP_STATS_INC(udp.cachehit);
 800758a:	461d      	mov	r5, r3
      if (udphdr->chksum != 0) {
 800758c:	88f3      	ldrh	r3, [r6, #6]
 800758e:	b1a3      	cbz	r3, 80075ba <udp_input+0x132>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 8007590:	8923      	ldrh	r3, [r4, #8]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	4a27      	ldr	r2, [pc, #156]	; (8007634 <udp_input+0x1ac>)
 8007596:	4926      	ldr	r1, [pc, #152]	; (8007630 <udp_input+0x1a8>)
 8007598:	2311      	movs	r3, #17
 800759a:	4620      	mov	r0, r4
 800759c:	f7fc fc5c 	bl	8003e58 <inet_chksum_pseudo>
 80075a0:	b158      	cbz	r0, 80075ba <udp_input+0x132>
          UDP_STATS_INC(udp.chkerr);
 80075a2:	4b21      	ldr	r3, [pc, #132]	; (8007628 <udp_input+0x1a0>)
 80075a4:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80075a8:	3201      	adds	r2, #1
 80075aa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
      UDP_STATS_INC(udp.drop);
 80075ae:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 80075b2:	3201      	adds	r2, #1
 80075b4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80075b8:	e786      	b.n	80074c8 <udp_input+0x40>
    if(pbuf_header(p, -UDP_HLEN)) {
 80075ba:	f06f 0107 	mvn.w	r1, #7
 80075be:	4620      	mov	r0, r4
 80075c0:	f7fd fbf8 	bl	8004db4 <pbuf_header>
 80075c4:	b130      	cbz	r0, 80075d4 <udp_input+0x14c>
      UDP_STATS_INC(udp.drop);
 80075c6:	4a18      	ldr	r2, [pc, #96]	; (8007628 <udp_input+0x1a0>)
 80075c8:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
 80075cc:	3301      	adds	r3, #1
 80075ce:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
 80075d2:	e779      	b.n	80074c8 <udp_input+0x40>
    if (pcb != NULL) {
 80075d4:	b16d      	cbz	r5, 80075f2 <udp_input+0x16a>
      if (pcb->recv != NULL) {
 80075d6:	69ae      	ldr	r6, [r5, #24]
 80075d8:	2e00      	cmp	r6, #0
 80075da:	f43f af75 	beq.w	80074c8 <udp_input+0x40>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80075de:	f8cd 9000 	str.w	r9, [sp]
 80075e2:	4b13      	ldr	r3, [pc, #76]	; (8007630 <udp_input+0x1a8>)
 80075e4:	69e8      	ldr	r0, [r5, #28]
 80075e6:	4622      	mov	r2, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	47b0      	blx	r6
}
 80075ec:	b005      	add	sp, #20
 80075ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast &&
 80075f2:	b997      	cbnz	r7, 800761a <udp_input+0x192>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <udp_input+0x1ac>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!broadcast &&
 80075fc:	2be0      	cmp	r3, #224	; 0xe0
 80075fe:	d00c      	beq.n	800761a <udp_input+0x192>
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 8007600:	f898 1000 	ldrb.w	r1, [r8]
 8007604:	f001 010f 	and.w	r1, r1, #15
 8007608:	3102      	adds	r1, #2
 800760a:	0089      	lsls	r1, r1, #2
 800760c:	4620      	mov	r0, r4
 800760e:	f7fd fbd1 	bl	8004db4 <pbuf_header>
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 8007612:	2103      	movs	r1, #3
 8007614:	4620      	mov	r0, r4
 8007616:	f7fc fbe5 	bl	8003de4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800761a:	4b03      	ldr	r3, [pc, #12]	; (8007628 <udp_input+0x1a0>)
 800761c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8007620:	3201      	adds	r2, #1
 8007622:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8007626:	e7c2      	b.n	80075ae <udp_input+0x126>
 8007628:	2000b0fe 	.word	0x2000b0fe
 800762c:	2000b234 	.word	0x2000b234
 8007630:	200089c0 	.word	0x200089c0
 8007634:	200089c8 	.word	0x200089c8

08007638 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8007638:	b5f0      	push	{r4, r5, r6, r7, lr}
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800763a:	4e23      	ldr	r6, [pc, #140]	; (80076c8 <udp_bind+0x90>)
 800763c:	6837      	ldr	r7, [r6, #0]
  rebind = 0;
 800763e:	2300      	movs	r3, #0
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007640:	463c      	mov	r4, r7
 8007642:	b9d4      	cbnz	r4, 800767a <udp_bind+0x42>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 8007644:	b101      	cbz	r1, 8007648 <udp_bind+0x10>
 8007646:	6809      	ldr	r1, [r1, #0]
 8007648:	6001      	str	r1, [r0, #0]

  /* no port specified? */
  if (port == 0) {
 800764a:	b982      	cbnz	r2, 800766e <udp_bind+0x36>
 800764c:	4c1f      	ldr	r4, [pc, #124]	; (80076cc <udp_bind+0x94>)
 800764e:	8821      	ldrh	r1, [r4, #0]
 8007650:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8007654:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8007658:	4561      	cmp	r1, ip
 800765a:	bf1a      	itte	ne
 800765c:	1c4a      	addne	r2, r1, #1
 800765e:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8007660:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007664:	46be      	mov	lr, r7
 8007666:	f1be 0f00 	cmp.w	lr, #0
 800766a:	d11f      	bne.n	80076ac <udp_bind+0x74>
 800766c:	8022      	strh	r2, [r4, #0]
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  }
  pcb->local_port = port;
 800766e:	8242      	strh	r2, [r0, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8007670:	b90b      	cbnz	r3, 8007676 <udp_bind+0x3e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8007672:	60c7      	str	r7, [r0, #12]
    udp_pcbs = pcb;
 8007674:	6030      	str	r0, [r6, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 8007676:	2000      	movs	r0, #0
}
 8007678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pcb == ipcb) {
 800767a:	4284      	cmp	r4, r0
 800767c:	d014      	beq.n	80076a8 <udp_bind+0x70>
      if ((ipcb->local_port == port) &&
 800767e:	8a65      	ldrh	r5, [r4, #18]
 8007680:	4295      	cmp	r5, r2
 8007682:	d10f      	bne.n	80076a4 <udp_bind+0x6c>
 8007684:	b914      	cbnz	r4, 800768c <udp_bind+0x54>
        return ERR_USE;
 8007686:	f06f 0007 	mvn.w	r0, #7
 800768a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          (ip_addr_isany(&(ipcb->local_ip)) ||
 800768c:	f8d4 e000 	ldr.w	lr, [r4]
 8007690:	f1be 0f00 	cmp.w	lr, #0
 8007694:	d0f7      	beq.n	8007686 <udp_bind+0x4e>
 8007696:	2900      	cmp	r1, #0
 8007698:	d0f5      	beq.n	8007686 <udp_bind+0x4e>
           ip_addr_isany(ipaddr) ||
 800769a:	680d      	ldr	r5, [r1, #0]
 800769c:	2d00      	cmp	r5, #0
 800769e:	d0f2      	beq.n	8007686 <udp_bind+0x4e>
 80076a0:	45ae      	cmp	lr, r5
 80076a2:	d0f0      	beq.n	8007686 <udp_bind+0x4e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80076a4:	68e4      	ldr	r4, [r4, #12]
 80076a6:	e7cc      	b.n	8007642 <udp_bind+0xa>
      rebind = 1;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e7fb      	b.n	80076a4 <udp_bind+0x6c>
    if (pcb->local_port == udp_port) {
 80076ac:	f8be 1012 	ldrh.w	r1, [lr, #18]
 80076b0:	4291      	cmp	r1, r2
 80076b2:	d105      	bne.n	80076c0 <udp_bind+0x88>
 80076b4:	3d01      	subs	r5, #1
 80076b6:	b2ad      	uxth	r5, r5
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	d1cd      	bne.n	8007658 <udp_bind+0x20>
 80076bc:	8022      	strh	r2, [r4, #0]
 80076be:	e7e2      	b.n	8007686 <udp_bind+0x4e>
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80076c0:	f8de e00c 	ldr.w	lr, [lr, #12]
 80076c4:	e7cf      	b.n	8007666 <udp_bind+0x2e>
 80076c6:	bf00      	nop
 80076c8:	2000b234 	.word	0x2000b234
 80076cc:	20000150 	.word	0x20000150

080076d0 <udp_sendto_if>:
{
 80076d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	4692      	mov	sl, r2
  if (pcb->local_port == 0) {
 80076d6:	8a42      	ldrh	r2, [r0, #18]
{
 80076d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80076dc:	4605      	mov	r5, r0
 80076de:	460f      	mov	r7, r1
 80076e0:	4698      	mov	r8, r3
  if (pcb->local_port == 0) {
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d045      	beq.n	8007772 <udp_sendto_if+0xa2>
  if (pbuf_header(p, UDP_HLEN)) {
 80076e6:	2108      	movs	r1, #8
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7fd fb63 	bl	8004db4 <pbuf_header>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d149      	bne.n	8007786 <udp_sendto_if+0xb6>
 80076f2:	463c      	mov	r4, r7
  udphdr->src = htons(pcb->local_port);
 80076f4:	8a68      	ldrh	r0, [r5, #18]
  udphdr = (struct udp_hdr *)q->payload;
 80076f6:	6866      	ldr	r6, [r4, #4]
  udphdr->src = htons(pcb->local_port);
 80076f8:	f7fc fa3c 	bl	8003b74 <lwip_htons>
 80076fc:	8030      	strh	r0, [r6, #0]
  udphdr->dest = htons(dst_port);
 80076fe:	4640      	mov	r0, r8
 8007700:	f7fc fa38 	bl	8003b74 <lwip_htons>
  udphdr->chksum = 0x0000; 
 8007704:	2300      	movs	r3, #0
 8007706:	71b3      	strb	r3, [r6, #6]
 8007708:	71f3      	strb	r3, [r6, #7]
  if (ip_addr_isany(&pcb->local_ip)) {
 800770a:	682b      	ldr	r3, [r5, #0]
  udphdr->dest = htons(dst_port);
 800770c:	8070      	strh	r0, [r6, #2]
  if (ip_addr_isany(&pcb->local_ip)) {
 800770e:	2b00      	cmp	r3, #0
 8007710:	d147      	bne.n	80077a2 <udp_sendto_if+0xd2>
    src_ip = &(netif->ip_addr);
 8007712:	f109 0804 	add.w	r8, r9, #4
    udphdr->len = htons(q->tot_len);
 8007716:	8920      	ldrh	r0, [r4, #8]
 8007718:	f7fc fa2c 	bl	8003b74 <lwip_htons>
 800771c:	80b0      	strh	r0, [r6, #4]
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800771e:	7c2b      	ldrb	r3, [r5, #16]
 8007720:	07db      	lsls	r3, r3, #31
 8007722:	d40d      	bmi.n	8007740 <udp_sendto_if+0x70>
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 8007724:	8923      	ldrh	r3, [r4, #8]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4652      	mov	r2, sl
 800772a:	2311      	movs	r3, #17
 800772c:	4641      	mov	r1, r8
 800772e:	4620      	mov	r0, r4
 8007730:	f7fc fb92 	bl	8003e58 <inet_chksum_pseudo>
      udphdr->chksum = udpchksum;
 8007734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007738:	2800      	cmp	r0, #0
 800773a:	bf08      	it	eq
 800773c:	4618      	moveq	r0, r3
 800773e:	80f0      	strh	r0, [r6, #6]
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8007740:	2211      	movs	r2, #17
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	7a6a      	ldrb	r2, [r5, #9]
 8007746:	9200      	str	r2, [sp, #0]
 8007748:	7aab      	ldrb	r3, [r5, #10]
 800774a:	f8cd 9008 	str.w	r9, [sp, #8]
 800774e:	4652      	mov	r2, sl
 8007750:	4641      	mov	r1, r8
 8007752:	4620      	mov	r0, r4
 8007754:	f7fc fd0c 	bl	8004170 <ip_output_if>
  if (q != p) {
 8007758:	42bc      	cmp	r4, r7
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 800775a:	4606      	mov	r6, r0
  if (q != p) {
 800775c:	d002      	beq.n	8007764 <udp_sendto_if+0x94>
    pbuf_free(q);
 800775e:	4620      	mov	r0, r4
 8007760:	f7fd fb53 	bl	8004e0a <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 8007764:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <udp_sendto_if+0xf4>)
 8007766:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 800776a:	3301      	adds	r3, #1
 800776c:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
  return err;
 8007770:	e005      	b.n	800777e <udp_sendto_if+0xae>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8007772:	4601      	mov	r1, r0
 8007774:	f7ff ff60 	bl	8007638 <udp_bind>
    if (err != ERR_OK) {
 8007778:	4606      	mov	r6, r0
 800777a:	2800      	cmp	r0, #0
 800777c:	d0b3      	beq.n	80076e6 <udp_sendto_if+0x16>
}
 800777e:	4630      	mov	r0, r6
 8007780:	b004      	add	sp, #16
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8007786:	2200      	movs	r2, #0
 8007788:	2108      	movs	r1, #8
 800778a:	2001      	movs	r0, #1
 800778c:	f7fd fb64 	bl	8004e58 <pbuf_alloc>
    if (q == NULL) {
 8007790:	4604      	mov	r4, r0
 8007792:	b1a0      	cbz	r0, 80077be <udp_sendto_if+0xee>
    if (p->tot_len != 0) {
 8007794:	893b      	ldrh	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0ac      	beq.n	80076f4 <udp_sendto_if+0x24>
      pbuf_chain(q, p);
 800779a:	4639      	mov	r1, r7
 800779c:	f7fd fc29 	bl	8004ff2 <pbuf_chain>
 80077a0:	e7a8      	b.n	80076f4 <udp_sendto_if+0x24>
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 80077a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d007      	beq.n	80077ba <udp_sendto_if+0xea>
      if (q != p) {
 80077aa:	42bc      	cmp	r4, r7
 80077ac:	d002      	beq.n	80077b4 <udp_sendto_if+0xe4>
        pbuf_free(q);
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7fd fb2b 	bl	8004e0a <pbuf_free>
      return ERR_VAL;
 80077b4:	f06f 0605 	mvn.w	r6, #5
 80077b8:	e7e1      	b.n	800777e <udp_sendto_if+0xae>
  if (ip_addr_isany(&pcb->local_ip)) {
 80077ba:	46a8      	mov	r8, r5
 80077bc:	e7ab      	b.n	8007716 <udp_sendto_if+0x46>
      return ERR_MEM;
 80077be:	f04f 36ff 	mov.w	r6, #4294967295
 80077c2:	e7dc      	b.n	800777e <udp_sendto_if+0xae>
 80077c4:	2000b0fe 	.word	0x2000b0fe

080077c8 <udp_sendto>:
{
 80077c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ca:	4605      	mov	r5, r0
  netif = ip_route(dst_ip);
 80077cc:	4610      	mov	r0, r2
{
 80077ce:	460e      	mov	r6, r1
 80077d0:	4614      	mov	r4, r2
 80077d2:	461f      	mov	r7, r3
  netif = ip_route(dst_ip);
 80077d4:	f7fc fbac 	bl	8003f30 <ip_route>
  if (netif == NULL) {
 80077d8:	b948      	cbnz	r0, 80077ee <udp_sendto+0x26>
    UDP_STATS_INC(udp.rterr);
 80077da:	4a09      	ldr	r2, [pc, #36]	; (8007800 <udp_sendto+0x38>)
 80077dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80077e0:	3301      	adds	r3, #1
 80077e2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80077e6:	f06f 0003 	mvn.w	r0, #3
}
 80077ea:	b003      	add	sp, #12
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80077ee:	9000      	str	r0, [sp, #0]
 80077f0:	463b      	mov	r3, r7
 80077f2:	4622      	mov	r2, r4
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7ff ff6a 	bl	80076d0 <udp_sendto_if>
 80077fc:	e7f5      	b.n	80077ea <udp_sendto+0x22>
 80077fe:	bf00      	nop
 8007800:	2000b0fe 	.word	0x2000b0fe

08007804 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8007804:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8007806:	61c2      	str	r2, [r0, #28]
 8007808:	4770      	bx	lr
	...

0800780c <udp_remove>:
{
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800780c:	4a09      	ldr	r2, [pc, #36]	; (8007834 <udp_remove+0x28>)
 800780e:	6813      	ldr	r3, [r2, #0]
 8007810:	4283      	cmp	r3, r0
{
 8007812:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 8007814:	d10b      	bne.n	800782e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8007816:	68c3      	ldr	r3, [r0, #12]
 8007818:	6013      	str	r3, [r2, #0]
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800781a:	2001      	movs	r0, #1
 800781c:	f7fd ba26 	b.w	8004c6c <memp_free>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	b11a      	cbz	r2, 800782c <udp_remove+0x20>
 8007824:	4291      	cmp	r1, r2
        pcb2->next = pcb->next;
 8007826:	bf04      	itt	eq
 8007828:	68ca      	ldreq	r2, [r1, #12]
 800782a:	60da      	streq	r2, [r3, #12]
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f6      	bne.n	8007820 <udp_remove+0x14>
 8007832:	e7f2      	b.n	800781a <udp_remove+0xe>
 8007834:	2000b234 	.word	0x2000b234

08007838 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8007838:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800783a:	2001      	movs	r0, #1
 800783c:	f7fd f9ec 	bl	8004c18 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8007840:	4604      	mov	r4, r0
 8007842:	b128      	cbz	r0, 8007850 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8007844:	2220      	movs	r2, #32
 8007846:	2100      	movs	r1, #0
 8007848:	f000 fbae 	bl	8007fa8 <memset>
    pcb->ttl = UDP_TTL;
 800784c:	23ff      	movs	r3, #255	; 0xff
 800784e:	72a3      	strb	r3, [r4, #10]
  }
  return pcb;
}
 8007850:	4620      	mov	r0, r4
 8007852:	bd10      	pop	{r4, pc}

08007854 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007854:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8007856:	2614      	movs	r6, #20
 8007858:	4c07      	ldr	r4, [pc, #28]	; (8007878 <etharp_free_entry+0x24>)
 800785a:	4346      	muls	r6, r0
{
 800785c:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800785e:	59a0      	ldr	r0, [r4, r6]
 8007860:	b118      	cbz	r0, 800786a <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8007862:	f7fd fad2 	bl	8004e0a <pbuf_free>
    arp_table[i].q = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800786a:	2314      	movs	r3, #20
 800786c:	fb03 4405 	mla	r4, r3, r5, r4
 8007870:	2300      	movs	r3, #0
 8007872:	74a3      	strb	r3, [r4, #18]
 8007874:	bd70      	pop	{r4, r5, r6, pc}
 8007876:	bf00      	nop
 8007878:	200077b8 	.word	0x200077b8

0800787c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 800787c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	4b33      	ldr	r3, [pc, #204]	; (8007950 <etharp_find_entry+0xd4>)
 8007882:	9101      	str	r1, [sp, #4]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8007884:	220a      	movs	r2, #10
{
 8007886:	4605      	mov	r5, r0
 8007888:	2000      	movs	r0, #0
  /* its age */
  u8_t age_queue = 0;
 800788a:	4681      	mov	r9, r0
  u8_t i = 0, age_pending = 0, age_stable = 0;
 800788c:	4684      	mov	ip, r0
 800788e:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8007890:	4614      	mov	r4, r2
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007892:	4696      	mov	lr, r2
 8007894:	4616      	mov	r6, r2
 8007896:	4698      	mov	r8, r3
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007898:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 800789a:	7c9f      	ldrb	r7, [r3, #18]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800789c:	d110      	bne.n	80078c0 <etharp_find_entry+0x44>
 800789e:	b98f      	cbnz	r7, 80078c4 <etharp_find_entry+0x48>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80078a0:	b244      	sxtb	r4, r0
 80078a2:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80078a4:	280a      	cmp	r0, #10
 80078a6:	f103 0314 	add.w	r3, r3, #20
 80078aa:	d1f5      	bne.n	8007898 <etharp_find_entry+0x1c>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	0799      	lsls	r1, r3, #30
 80078b0:	d403      	bmi.n	80078ba <etharp_find_entry+0x3e>
 80078b2:	2c0a      	cmp	r4, #10
 80078b4:	d11f      	bne.n	80078f6 <etharp_find_entry+0x7a>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80078b6:	07db      	lsls	r3, r3, #31
 80078b8:	d42c      	bmi.n	8007914 <etharp_find_entry+0x98>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	e009      	b.n	80078d4 <etharp_find_entry+0x58>
    } else if (state != ETHARP_STATE_EMPTY) {
 80078c0:	2f00      	cmp	r7, #0
 80078c2:	d0ee      	beq.n	80078a2 <etharp_find_entry+0x26>
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	d036      	beq.n	8007936 <etharp_find_entry+0xba>
 80078c8:	6829      	ldr	r1, [r5, #0]
 80078ca:	468a      	mov	sl, r1
 80078cc:	6859      	ldr	r1, [r3, #4]
 80078ce:	458a      	cmp	sl, r1
 80078d0:	d131      	bne.n	8007936 <etharp_find_entry+0xba>
        return i;
 80078d2:	b240      	sxtb	r0, r0
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  }
  arp_table[i].ctime = 0;
  return (err_t)i;
}
 80078d4:	b003      	add	sp, #12
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80078da:	45da      	cmp	sl, fp
 80078dc:	d3e1      	bcc.n	80078a2 <etharp_find_entry+0x26>
            old_pending = i;
 80078de:	b246      	sxtb	r6, r0
 80078e0:	46d3      	mov	fp, sl
 80078e2:	e7de      	b.n	80078a2 <etharp_find_entry+0x26>
        if (state < ETHARP_STATE_STATIC)
 80078e4:	2f03      	cmp	r7, #3
 80078e6:	d8dc      	bhi.n	80078a2 <etharp_find_entry+0x26>
          if (arp_table[i].ctime >= age_stable) {
 80078e8:	7cdf      	ldrb	r7, [r3, #19]
 80078ea:	4567      	cmp	r7, ip
            old_stable = i;
 80078ec:	bf24      	itt	cs
 80078ee:	fa4f fe80 	sxtbcs.w	lr, r0
 80078f2:	46bc      	movcs	ip, r7
 80078f4:	e7d5      	b.n	80078a2 <etharp_find_entry+0x26>
    i = empty;
 80078f6:	b2e4      	uxtb	r4, r4
  if (ipaddr != NULL) {
 80078f8:	b125      	cbz	r5, 8007904 <etharp_find_entry+0x88>
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80078fa:	2314      	movs	r3, #20
 80078fc:	fb03 8304 	mla	r3, r3, r4, r8
 8007900:	682a      	ldr	r2, [r5, #0]
 8007902:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8007904:	2314      	movs	r3, #20
 8007906:	fb03 8804 	mla	r8, r3, r4, r8
 800790a:	2300      	movs	r3, #0
 800790c:	f888 3013 	strb.w	r3, [r8, #19]
  return (err_t)i;
 8007910:	b260      	sxtb	r0, r4
 8007912:	e7df      	b.n	80078d4 <etharp_find_entry+0x58>
    if (old_stable < ARP_TABLE_SIZE) {
 8007914:	f1be 0f0a 	cmp.w	lr, #10
 8007918:	d005      	beq.n	8007926 <etharp_find_entry+0xaa>
      i = old_stable;
 800791a:	fa5f f48e 	uxtb.w	r4, lr
    etharp_free_entry(i);
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ff98 	bl	8007854 <etharp_free_entry>
 8007924:	e7e8      	b.n	80078f8 <etharp_find_entry+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8007926:	2e0a      	cmp	r6, #10
 8007928:	d001      	beq.n	800792e <etharp_find_entry+0xb2>
      i = old_pending;
 800792a:	b2f4      	uxtb	r4, r6
 800792c:	e7f7      	b.n	800791e <etharp_find_entry+0xa2>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800792e:	2a0a      	cmp	r2, #10
 8007930:	d0c3      	beq.n	80078ba <etharp_find_entry+0x3e>
      i = old_queue;
 8007932:	b2d4      	uxtb	r4, r2
 8007934:	e7f3      	b.n	800791e <etharp_find_entry+0xa2>
      if (state == ETHARP_STATE_PENDING) {
 8007936:	2f01      	cmp	r7, #1
 8007938:	d1d4      	bne.n	80078e4 <etharp_find_entry+0x68>
        if (arp_table[i].q != NULL) {
 800793a:	681f      	ldr	r7, [r3, #0]
 800793c:	f893 a013 	ldrb.w	sl, [r3, #19]
 8007940:	2f00      	cmp	r7, #0
 8007942:	d0ca      	beq.n	80078da <etharp_find_entry+0x5e>
          if (arp_table[i].ctime >= age_queue) {
 8007944:	45ca      	cmp	sl, r9
 8007946:	d3ac      	bcc.n	80078a2 <etharp_find_entry+0x26>
            old_queue = i;
 8007948:	b242      	sxtb	r2, r0
 800794a:	46d1      	mov	r9, sl
 800794c:	e7a9      	b.n	80078a2 <etharp_find_entry+0x26>
 800794e:	bf00      	nop
 8007950:	200077b8 	.word	0x200077b8

08007954 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 8007954:	b430      	push	{r4, r5}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 8007956:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8007958:	681d      	ldr	r5, [r3, #0]
 800795a:	6025      	str	r5, [r4, #0]
 800795c:	889b      	ldrh	r3, [r3, #4]
 800795e:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
 8007960:	6813      	ldr	r3, [r2, #0]
 8007962:	f8c4 3006 	str.w	r3, [r4, #6]
 8007966:	8893      	ldrh	r3, [r2, #4]
 8007968:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 800796a:	2308      	movs	r3, #8
 800796c:	7323      	strb	r3, [r4, #12]
 800796e:	2300      	movs	r3, #0
 8007970:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 8007972:	6983      	ldr	r3, [r0, #24]
}
 8007974:	bc30      	pop	{r4, r5}
  return netif->linkoutput(netif, p);
 8007976:	4718      	bx	r3

08007978 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	4616      	mov	r6, r2
 800797e:	461f      	mov	r7, r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8007980:	460c      	mov	r4, r1
 8007982:	b911      	cbnz	r1, 800798a <etharp_update_arp_entry+0x12>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8007984:	f06f 000d 	mvn.w	r0, #13
 8007988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ip_addr_isany(ipaddr) ||
 800798a:	6808      	ldr	r0, [r1, #0]
 800798c:	2800      	cmp	r0, #0
 800798e:	d0f9      	beq.n	8007984 <etharp_update_arp_entry+0xc>
      ip_addr_isbroadcast(ipaddr, netif) ||
 8007990:	4629      	mov	r1, r5
 8007992:	f7fc fc9b 	bl	80042cc <ip4_addr_isbroadcast>
  if (ip_addr_isany(ipaddr) ||
 8007996:	2800      	cmp	r0, #0
 8007998:	d1f4      	bne.n	8007984 <etharp_update_arp_entry+0xc>
      ip_addr_ismulticast(ipaddr)) {
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isbroadcast(ipaddr, netif) ||
 80079a0:	2be0      	cmp	r3, #224	; 0xe0
 80079a2:	d0ef      	beq.n	8007984 <etharp_update_arp_entry+0xc>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 80079a4:	4639      	mov	r1, r7
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff ff68 	bl	800787c <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 80079ac:	2800      	cmp	r0, #0
 80079ae:	db28      	blt.n	8007a02 <etharp_update_arp_entry+0x8a>
 80079b0:	4b14      	ldr	r3, [pc, #80]	; (8007a04 <etharp_update_arp_entry+0x8c>)
 80079b2:	2114      	movs	r1, #20
    return (err_t)i;
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 80079b4:	f017 0f04 	tst.w	r7, #4
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 80079b8:	fb01 3100 	mla	r1, r1, r0, r3
 80079bc:	bf14      	ite	ne
 80079be:	2204      	movne	r2, #4
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80079c0:	2202      	moveq	r2, #2
 80079c2:	748a      	strb	r2, [r1, #18]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80079c4:	2114      	movs	r1, #20
 80079c6:	fb01 f200 	mul.w	r2, r1, r0
 80079ca:	189c      	adds	r4, r3, r2
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80079cc:	270c      	movs	r7, #12
  arp_table[i].netif = netif;
 80079ce:	60a5      	str	r5, [r4, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80079d0:	fb11 7100 	smlabb	r1, r1, r0, r7
 80079d4:	6830      	ldr	r0, [r6, #0]
 80079d6:	5058      	str	r0, [r3, r1]
 80079d8:	185f      	adds	r7, r3, r1
 80079da:	88b1      	ldrh	r1, [r6, #4]
 80079dc:	80b9      	strh	r1, [r7, #4]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80079de:	2700      	movs	r7, #0
 80079e0:	74e7      	strb	r7, [r4, #19]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80079e2:	589c      	ldr	r4, [r3, r2]
 80079e4:	b164      	cbz	r4, 8007a00 <etharp_update_arp_entry+0x88>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 80079e6:	509f      	str	r7, [r3, r2]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 80079e8:	4621      	mov	r1, r4
 80079ea:	4633      	mov	r3, r6
 80079ec:	f105 0223 	add.w	r2, r5, #35	; 0x23
 80079f0:	4628      	mov	r0, r5
 80079f2:	f7ff ffaf 	bl	8007954 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7fd fa07 	bl	8004e0a <pbuf_free>
  }
  return ERR_OK;
 80079fc:	4638      	mov	r0, r7
 80079fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a00:	4620      	mov	r0, r4
}
 8007a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a04:	200077b8 	.word	0x200077b8

08007a08 <etharp_tmr>:
{
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4c0f      	ldr	r4, [pc, #60]	; (8007a48 <etharp_tmr+0x40>)
 8007a0c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007a0e:	2602      	movs	r6, #2
    u8_t state = arp_table[i].state;
 8007a10:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
 8007a12:	f012 0ffb 	tst.w	r2, #251	; 0xfb
 8007a16:	d00c      	beq.n	8007a32 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8007a18:	7ce3      	ldrb	r3, [r4, #19]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	b2db      	uxtb	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007a1e:	2bef      	cmp	r3, #239	; 0xef
      arp_table[i].ctime++;
 8007a20:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007a22:	d803      	bhi.n	8007a2c <etharp_tmr+0x24>
 8007a24:	2a01      	cmp	r2, #1
 8007a26:	d10a      	bne.n	8007a3e <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d902      	bls.n	8007a32 <etharp_tmr+0x2a>
        etharp_free_entry(i);
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7ff ff11 	bl	8007854 <etharp_free_entry>
 8007a32:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007a34:	2d0a      	cmp	r5, #10
 8007a36:	f104 0414 	add.w	r4, r4, #20
 8007a3a:	d1e9      	bne.n	8007a10 <etharp_tmr+0x8>
}
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 8007a3e:	2a03      	cmp	r2, #3
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007a40:	bf08      	it	eq
 8007a42:	74a6      	strbeq	r6, [r4, #18]
 8007a44:	e7f5      	b.n	8007a32 <etharp_tmr+0x2a>
 8007a46:	bf00      	nop
 8007a48:	200077b8 	.word	0x200077b8

08007a4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 8007a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 8007a50:	2200      	movs	r2, #0
{
 8007a52:	4607      	mov	r7, r0
 8007a54:	4689      	mov	r9, r1
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 8007a56:	f100 0823 	add.w	r8, r0, #35	; 0x23
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 8007a5a:	212a      	movs	r1, #42	; 0x2a
 8007a5c:	2003      	movs	r0, #3
 8007a5e:	f7fd f9fb 	bl	8004e58 <pbuf_alloc>
 8007a62:	4e23      	ldr	r6, [pc, #140]	; (8007af0 <etharp_request+0xa4>)
  if (p == NULL) {
 8007a64:	4605      	mov	r5, r0
 8007a66:	b938      	cbnz	r0, 8007a78 <etharp_request+0x2c>
    ETHARP_STATS_INC(etharp.memerr);
 8007a68:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	84b3      	strh	r3, [r6, #36]	; 0x24
    return ERR_MEM;
 8007a6e:	f04f 34ff 	mov.w	r4, #4294967295
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 8007a72:	4620      	mov	r0, r4
 8007a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ethhdr = (struct eth_hdr *)p->payload;
 8007a78:	6844      	ldr	r4, [r0, #4]
  hdr->opcode = htons(opcode);
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	f7fc f87a 	bl	8003b74 <lwip_htons>
 8007a80:	82a0      	strh	r0, [r4, #20]
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8007a82:	f8d8 3000 	ldr.w	r3, [r8]
 8007a86:	f8c4 3016 	str.w	r3, [r4, #22]
 8007a8a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007a8e:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8007a90:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <etharp_request+0xa8>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	889b      	ldrh	r3, [r3, #4]
 8007a96:	84a3      	strh	r3, [r4, #36]	; 0x24
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8007a98:	4b17      	ldr	r3, [pc, #92]	; (8007af8 <etharp_request+0xac>)
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8007a9a:	6222      	str	r2, [r4, #32]
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	889b      	ldrh	r3, [r3, #4]
 8007aa0:	6022      	str	r2, [r4, #0]
 8007aa2:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 8007aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa8:	f8c4 3006 	str.w	r3, [r4, #6]
 8007aac:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007ab0:	8163      	strh	r3, [r4, #10]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8007ab6:	f8d9 3000 	ldr.w	r3, [r9]
 8007aba:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73a3      	strb	r3, [r4, #14]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007ac2:	7463      	strb	r3, [r4, #17]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8007ac4:	2201      	movs	r2, #1
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8007ac6:	2306      	movs	r3, #6
  hdr->protolen = sizeof(ip_addr_t);
 8007ac8:	2104      	movs	r1, #4
 8007aca:	74e1      	strb	r1, [r4, #19]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8007acc:	73e2      	strb	r2, [r4, #15]
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8007ace:	74a3      	strb	r3, [r4, #18]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	7422      	strb	r2, [r4, #16]
  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 8007ad4:	7322      	strb	r2, [r4, #12]
 8007ad6:	7363      	strb	r3, [r4, #13]
  result = netif->linkoutput(netif, p);
 8007ad8:	4629      	mov	r1, r5
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	4638      	mov	r0, r7
 8007ade:	4798      	blx	r3
  ETHARP_STATS_INC(etharp.xmit);
 8007ae0:	8b33      	ldrh	r3, [r6, #24]
  result = netif->linkoutput(netif, p);
 8007ae2:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
 8007ae4:	3301      	adds	r3, #1
  pbuf_free(p);
 8007ae6:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 8007ae8:	8333      	strh	r3, [r6, #24]
  pbuf_free(p);
 8007aea:	f7fd f98e 	bl	8004e0a <pbuf_free>
 8007aee:	e7c0      	b.n	8007a72 <etharp_request+0x26>
 8007af0:	2000b0fe 	.word	0x2000b0fe
 8007af4:	08008126 	.word	0x08008126
 8007af8:	08008120 	.word	0x08008120

08007afc <etharp_output_to_arp_index>:
{
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b00:	4d11      	ldr	r5, [pc, #68]	; (8007b48 <etharp_output_to_arp_index+0x4c>)
{
 8007b02:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007b04:	2114      	movs	r1, #20
 8007b06:	fb01 5802 	mla	r8, r1, r2, r5
{
 8007b0a:	4614      	mov	r4, r2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8007b0c:	f898 2012 	ldrb.w	r2, [r8, #18]
 8007b10:	2a02      	cmp	r2, #2
{
 8007b12:	4606      	mov	r6, r0
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8007b14:	d10b      	bne.n	8007b2e <etharp_output_to_arp_index+0x32>
 8007b16:	f898 3013 	ldrb.w	r3, [r8, #19]
 8007b1a:	2be3      	cmp	r3, #227	; 0xe3
 8007b1c:	d907      	bls.n	8007b2e <etharp_output_to_arp_index+0x32>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8007b1e:	4641      	mov	r1, r8
 8007b20:	3104      	adds	r1, #4
 8007b22:	f7ff ff93 	bl	8007a4c <etharp_request>
 8007b26:	b910      	cbnz	r0, 8007b2e <etharp_output_to_arp_index+0x32>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	f888 3012 	strb.w	r3, [r8, #18]
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8007b2e:	2314      	movs	r3, #20
 8007b30:	fb03 5304 	mla	r3, r3, r4, r5
 8007b34:	f106 0223 	add.w	r2, r6, #35	; 0x23
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	330c      	adds	r3, #12
}
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8007b42:	f7ff bf07 	b.w	8007954 <etharp_send_ip>
 8007b46:	bf00      	nop
 8007b48:	200077b8 	.word	0x200077b8

08007b4c <etharp_query>:
{
 8007b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b50:	4688      	mov	r8, r1
 8007b52:	4607      	mov	r7, r0
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 8007b54:	4601      	mov	r1, r0
 8007b56:	f8d8 0000 	ldr.w	r0, [r8]
{
 8007b5a:	4615      	mov	r5, r2
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 8007b5c:	f7fc fbb6 	bl	80042cc <ip4_addr_isbroadcast>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d15b      	bne.n	8007c1c <etharp_query+0xd0>
      ip_addr_ismulticast(ipaddr) ||
 8007b64:	f8d8 3000 	ldr.w	r3, [r8]
 8007b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 8007b6c:	2ae0      	cmp	r2, #224	; 0xe0
 8007b6e:	d055      	beq.n	8007c1c <etharp_query+0xd0>
      ip_addr_isany(ipaddr)) {
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d053      	beq.n	8007c1c <etharp_query+0xd0>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 8007b74:	2101      	movs	r1, #1
 8007b76:	4640      	mov	r0, r8
 8007b78:	f7ff fe80 	bl	800787c <etharp_find_entry>
  if (i < 0) {
 8007b7c:	1e04      	subs	r4, r0, #0
 8007b7e:	da07      	bge.n	8007b90 <etharp_query+0x44>
    if (q) {
 8007b80:	b11d      	cbz	r5, 8007b8a <etharp_query+0x3e>
      ETHARP_STATS_INC(etharp.memerr);
 8007b82:	4a34      	ldr	r2, [pc, #208]	; (8007c54 <etharp_query+0x108>)
 8007b84:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8007b86:	3301      	adds	r3, #1
 8007b88:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007b90:	4e31      	ldr	r6, [pc, #196]	; (8007c58 <etharp_query+0x10c>)
 8007b92:	2314      	movs	r3, #20
 8007b94:	fb03 6204 	mla	r2, r3, r4, r6
 8007b98:	7c91      	ldrb	r1, [r2, #18]
 8007b9a:	b909      	cbnz	r1, 8007ba0 <etharp_query+0x54>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	7491      	strb	r1, [r2, #18]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8007ba0:	fb03 6304 	mla	r3, r3, r4, r6
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 8007ba4:	7c9b      	ldrb	r3, [r3, #18]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d000      	beq.n	8007bac <etharp_query+0x60>
 8007baa:	b93d      	cbnz	r5, 8007bbc <etharp_query+0x70>
    result = etharp_request(netif, ipaddr);
 8007bac:	4641      	mov	r1, r8
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f7ff ff4c 	bl	8007a4c <etharp_request>
 8007bb4:	4602      	mov	r2, r0
    if (q == NULL) {
 8007bb6:	b91d      	cbnz	r5, 8007bc0 <etharp_query+0x74>
      return result;
 8007bb8:	4604      	mov	r4, r0
 8007bba:	e7e6      	b.n	8007b8a <etharp_query+0x3e>
  err_t result = ERR_MEM;
 8007bbc:	f04f 32ff 	mov.w	r2, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8007bc0:	2314      	movs	r3, #20
 8007bc2:	fb03 6104 	mla	r1, r3, r4, r6
 8007bc6:	7c89      	ldrb	r1, [r1, #18]
 8007bc8:	2901      	cmp	r1, #1
 8007bca:	d90d      	bls.n	8007be8 <etharp_query+0x9c>
    ETHARP_SET_HINT(netif, i);
 8007bcc:	4a23      	ldr	r2, [pc, #140]	; (8007c5c <etharp_query+0x110>)
 8007bce:	7014      	strb	r4, [r2, #0]
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8007bd0:	220c      	movs	r2, #12
 8007bd2:	fb13 2304 	smlabb	r3, r3, r4, r2
 8007bd6:	4433      	add	r3, r6
 8007bd8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4638      	mov	r0, r7
}
 8007be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8007be4:	f7ff beb6 	b.w	8007954 <etharp_send_ip>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007be8:	d11b      	bne.n	8007c22 <etharp_query+0xd6>
 8007bea:	462b      	mov	r3, r5
    while (p) {
 8007bec:	b98b      	cbnz	r3, 8007c12 <etharp_query+0xc6>
      pbuf_ref(p);
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7fd f9ec 	bl	8004fcc <pbuf_ref>
    if (p != NULL) {
 8007bf4:	b335      	cbz	r5, 8007c44 <etharp_query+0xf8>
 8007bf6:	462f      	mov	r7, r5
      if (arp_table[i].q != NULL) {
 8007bf8:	2314      	movs	r3, #20
 8007bfa:	fb03 f204 	mul.w	r2, r3, r4
 8007bfe:	461d      	mov	r5, r3
 8007c00:	58b0      	ldr	r0, [r6, r2]
 8007c02:	b108      	cbz	r0, 8007c08 <etharp_query+0xbc>
        pbuf_free(arp_table[i].q);
 8007c04:	f7fd f901 	bl	8004e0a <pbuf_free>
      arp_table[i].q = p;
 8007c08:	fb05 f304 	mul.w	r3, r5, r4
      result = ERR_OK;
 8007c0c:	2400      	movs	r4, #0
      arp_table[i].q = p;
 8007c0e:	50f7      	str	r7, [r6, r3]
 8007c10:	e7bb      	b.n	8007b8a <etharp_query+0x3e>
      if(p->type != PBUF_ROM) {
 8007c12:	7b1a      	ldrb	r2, [r3, #12]
 8007c14:	2a01      	cmp	r2, #1
 8007c16:	d106      	bne.n	8007c26 <etharp_query+0xda>
      p = p->next;
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	e7e7      	b.n	8007bec <etharp_query+0xa0>
    return ERR_ARG;
 8007c1c:	f06f 040d 	mvn.w	r4, #13
 8007c20:	e7b3      	b.n	8007b8a <etharp_query+0x3e>
 8007c22:	4614      	mov	r4, r2
 8007c24:	e7b1      	b.n	8007b8a <etharp_query+0x3e>
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 8007c26:	2200      	movs	r2, #0
 8007c28:	8919      	ldrh	r1, [r3, #8]
 8007c2a:	2003      	movs	r0, #3
 8007c2c:	f7fd f914 	bl	8004e58 <pbuf_alloc>
      if(p != NULL) {
 8007c30:	4607      	mov	r7, r0
 8007c32:	b138      	cbz	r0, 8007c44 <etharp_query+0xf8>
        if (pbuf_copy(p, q) != ERR_OK) {
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7fd f9e4 	bl	8005002 <pbuf_copy>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d0dc      	beq.n	8007bf8 <etharp_query+0xac>
          pbuf_free(p);
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7fd f8e3 	bl	8004e0a <pbuf_free>
      ETHARP_STATS_INC(etharp.memerr);
 8007c44:	4a03      	ldr	r2, [pc, #12]	; (8007c54 <etharp_query+0x108>)
 8007c46:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8007c48:	3301      	adds	r3, #1
 8007c4a:	8493      	strh	r3, [r2, #36]	; 0x24
      result = ERR_MEM;
 8007c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c50:	e79b      	b.n	8007b8a <etharp_query+0x3e>
 8007c52:	bf00      	nop
 8007c54:	2000b0fe 	.word	0x2000b0fe
 8007c58:	200077b8 	.word	0x200077b8
 8007c5c:	20007880 	.word	0x20007880

08007c60 <etharp_output>:
{
 8007c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c62:	460e      	mov	r6, r1
 8007c64:	4604      	mov	r4, r0
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 8007c66:	210e      	movs	r1, #14
 8007c68:	4630      	mov	r0, r6
{
 8007c6a:	4615      	mov	r5, r2
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 8007c6c:	f7fd f8a2 	bl	8004db4 <pbuf_header>
 8007c70:	b138      	cbz	r0, 8007c82 <etharp_output+0x22>
    LINK_STATS_INC(link.lenerr);
 8007c72:	4a37      	ldr	r2, [pc, #220]	; (8007d50 <etharp_output+0xf0>)
 8007c74:	8953      	ldrh	r3, [r2, #10]
 8007c76:	3301      	adds	r3, #1
 8007c78:	8153      	strh	r3, [r2, #10]
    return ERR_BUF;
 8007c7a:	f06f 0001 	mvn.w	r0, #1
}
 8007c7e:	b003      	add	sp, #12
 8007c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 8007c82:	4621      	mov	r1, r4
 8007c84:	6828      	ldr	r0, [r5, #0]
 8007c86:	f7fc fb21 	bl	80042cc <ip4_addr_isbroadcast>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d15b      	bne.n	8007d46 <etharp_output+0xe6>
  } else if (ip_addr_ismulticast(ipaddr)) {
 8007c8e:	682b      	ldr	r3, [r5, #0]
 8007c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c94:	2ae0      	cmp	r2, #224	; 0xe0
 8007c96:	d11a      	bne.n	8007cce <etharp_output+0x6e>
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 8007c9e:	235e      	movs	r3, #94	; 0x5e
 8007ca0:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007ca4:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 8007ca6:	f88d 0001 	strb.w	r0, [sp, #1]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cae:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8007cb2:	78ab      	ldrb	r3, [r5, #2]
 8007cb4:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8007cb8:	78eb      	ldrb	r3, [r5, #3]
 8007cba:	f88d 3005 	strb.w	r3, [sp, #5]
    dest = &mcastaddr;
 8007cbe:	466b      	mov	r3, sp
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 8007cc0:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff fe44 	bl	8007954 <etharp_send_ip>
 8007ccc:	e7d7      	b.n	8007c7e <etharp_output+0x1e>
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8007cce:	6862      	ldr	r2, [r4, #4]
 8007cd0:	68a1      	ldr	r1, [r4, #8]
 8007cd2:	405a      	eors	r2, r3
 8007cd4:	420a      	tst	r2, r1
 8007cd6:	d008      	beq.n	8007cea <etharp_output+0x8a>
        !ip_addr_islinklocal(ipaddr)) {
 8007cd8:	b29b      	uxth	r3, r3
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8007cda:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d003      	beq.n	8007cea <etharp_output+0x8a>
        if (!ip_addr_isany(&netif->gw)) {
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	f104 050c 	add.w	r5, r4, #12
 8007ce8:	b37b      	cbz	r3, 8007d4a <etharp_output+0xea>
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <etharp_output+0xf4>)
 8007cec:	491a      	ldr	r1, [pc, #104]	; (8007d58 <etharp_output+0xf8>)
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	2014      	movs	r0, #20
 8007cf2:	fb00 1002 	mla	r0, r0, r2, r1
 8007cf6:	7c81      	ldrb	r1, [r0, #18]
 8007cf8:	2901      	cmp	r1, #1
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	d90c      	bls.n	8007d18 <etharp_output+0xb8>
 8007cfe:	682f      	ldr	r7, [r5, #0]
 8007d00:	6843      	ldr	r3, [r0, #4]
 8007d02:	429f      	cmp	r7, r3
 8007d04:	d108      	bne.n	8007d18 <etharp_output+0xb8>
          ETHARP_STATS_INC(etharp.cachehit);
 8007d06:	4912      	ldr	r1, [pc, #72]	; (8007d50 <etharp_output+0xf0>)
 8007d08:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	85cb      	strh	r3, [r1, #46]	; 0x2e
        return etharp_output_to_arp_index(netif, q, i);
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff fef3 	bl	8007afc <etharp_output_to_arp_index>
 8007d16:	e7b2      	b.n	8007c7e <etharp_output+0x1e>
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <etharp_output+0xf8>)
{
 8007d1a:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007d1c:	7c98      	ldrb	r0, [r3, #18]
 8007d1e:	2801      	cmp	r0, #1
 8007d20:	d906      	bls.n	8007d30 <etharp_output+0xd0>
 8007d22:	682f      	ldr	r7, [r5, #0]
 8007d24:	6858      	ldr	r0, [r3, #4]
 8007d26:	4287      	cmp	r7, r0
 8007d28:	d102      	bne.n	8007d30 <etharp_output+0xd0>
        ETHARP_SET_HINT(netif, i);
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	700a      	strb	r2, [r1, #0]
 8007d2e:	e7ee      	b.n	8007d0e <etharp_output+0xae>
 8007d30:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8007d32:	2a0a      	cmp	r2, #10
 8007d34:	f103 0314 	add.w	r3, r3, #20
 8007d38:	d1f0      	bne.n	8007d1c <etharp_output+0xbc>
    return etharp_query(netif, dst_addr, q);
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7ff ff04 	bl	8007b4c <etharp_query>
 8007d44:	e79b      	b.n	8007c7e <etharp_output+0x1e>
    dest = (struct eth_addr *)&ethbroadcast;
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <etharp_output+0xfc>)
 8007d48:	e7ba      	b.n	8007cc0 <etharp_output+0x60>
          return ERR_RTE;
 8007d4a:	f06f 0003 	mvn.w	r0, #3
 8007d4e:	e796      	b.n	8007c7e <etharp_output+0x1e>
 8007d50:	2000b0fe 	.word	0x2000b0fe
 8007d54:	20007880 	.word	0x20007880
 8007d58:	200077b8 	.word	0x200077b8
 8007d5c:	08008120 	.word	0x08008120

08007d60 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8007d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8007d64:	8946      	ldrh	r6, [r0, #10]
 8007d66:	2e0e      	cmp	r6, #14
{
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460f      	mov	r7, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8007d6c:	d807      	bhi.n	8007d7e <ethernet_input+0x1e>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
 8007d6e:	4b58      	ldr	r3, [pc, #352]	; (8007ed0 <ethernet_input+0x170>)
 8007d70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007d72:	3201      	adds	r2, #1
 8007d74:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8007d76:	8bda      	ldrh	r2, [r3, #30]
 8007d78:	3201      	adds	r2, #1
 8007d7a:	83da      	strh	r2, [r3, #30]
      goto free_and_return;
 8007d7c:	e023      	b.n	8007dc6 <ethernet_input+0x66>
  ethhdr = (struct eth_hdr *)p->payload;
 8007d7e:	6844      	ldr	r4, [r0, #4]
  if (ethhdr->dest.addr[0] & 1) {
 8007d80:	7823      	ldrb	r3, [r4, #0]
  type = ethhdr->type;
 8007d82:	f8b4 800c 	ldrh.w	r8, [r4, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8007d86:	07da      	lsls	r2, r3, #31
 8007d88:	d50a      	bpl.n	8007da0 <ethernet_input+0x40>
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d11f      	bne.n	8007dce <ethernet_input+0x6e>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8007d8e:	7863      	ldrb	r3, [r4, #1]
 8007d90:	b933      	cbnz	r3, 8007da0 <ethernet_input+0x40>
 8007d92:	78a3      	ldrb	r3, [r4, #2]
 8007d94:	2b5e      	cmp	r3, #94	; 0x5e
 8007d96:	d103      	bne.n	8007da0 <ethernet_input+0x40>
        p->flags |= PBUF_FLAG_LLMCAST;
 8007d98:	7b43      	ldrb	r3, [r0, #13]
 8007d9a:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLBCAST;
 8007d9e:	736b      	strb	r3, [r5, #13]
  switch (type) {
 8007da0:	f1b8 0f08 	cmp.w	r8, #8
 8007da4:	d01e      	beq.n	8007de4 <ethernet_input+0x84>
 8007da6:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
 8007daa:	d1e0      	bne.n	8007d6e <ethernet_input+0xe>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8007dac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007db0:	0699      	lsls	r1, r3, #26
 8007db2:	d508      	bpl.n	8007dc6 <ethernet_input+0x66>
  if (p->len < SIZEOF_ETHARP_PACKET) {
 8007db4:	2e29      	cmp	r6, #41	; 0x29
 8007db6:	4e46      	ldr	r6, [pc, #280]	; (8007ed0 <ethernet_input+0x170>)
 8007db8:	d827      	bhi.n	8007e0a <ethernet_input+0xaa>
    ETHARP_STATS_INC(etharp.lenerr);
 8007dba:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	8473      	strh	r3, [r6, #34]	; 0x22
    ETHARP_STATS_INC(etharp.drop);
 8007dc0:	8bf3      	ldrh	r3, [r6, #30]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	83f3      	strh	r3, [r6, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7fd f81f 	bl	8004e0a <pbuf_free>
  return ERR_OK;
 8007dcc:	e019      	b.n	8007e02 <ethernet_input+0xa2>
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8007dce:	2206      	movs	r2, #6
 8007dd0:	4940      	ldr	r1, [pc, #256]	; (8007ed4 <ethernet_input+0x174>)
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f8ce 	bl	8007f74 <memcmp>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d1e1      	bne.n	8007da0 <ethernet_input+0x40>
      p->flags |= PBUF_FLAG_LLBCAST;
 8007ddc:	7b6b      	ldrb	r3, [r5, #13]
 8007dde:	f043 0308 	orr.w	r3, r3, #8
 8007de2:	e7dc      	b.n	8007d9e <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8007de4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007de8:	0698      	lsls	r0, r3, #26
 8007dea:	d5ec      	bpl.n	8007dc6 <ethernet_input+0x66>
      if(pbuf_header(p, -ip_hdr_offset)) {
 8007dec:	f06f 010d 	mvn.w	r1, #13
 8007df0:	4628      	mov	r0, r5
 8007df2:	f7fc ffdf 	bl	8004db4 <pbuf_header>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d1e5      	bne.n	8007dc6 <ethernet_input+0x66>
        ip_input(p, netif);
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7fc f8bd 	bl	8003f7c <ip_input>
}
 8007e02:	2000      	movs	r0, #0
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8007e0a:	89e3      	ldrh	r3, [r4, #14]
 8007e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e10:	d108      	bne.n	8007e24 <ethernet_input+0xc4>
 8007e12:	7ca3      	ldrb	r3, [r4, #18]
 8007e14:	2b06      	cmp	r3, #6
 8007e16:	d105      	bne.n	8007e24 <ethernet_input+0xc4>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8007e18:	7ce3      	ldrb	r3, [r4, #19]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d102      	bne.n	8007e24 <ethernet_input+0xc4>
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8007e1e:	8a23      	ldrh	r3, [r4, #16]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d003      	beq.n	8007e2c <ethernet_input+0xcc>
    ETHARP_STATS_INC(etharp.proterr);
 8007e24:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007e26:	3301      	adds	r3, #1
 8007e28:	8533      	strh	r3, [r6, #40]	; 0x28
 8007e2a:	e7c9      	b.n	8007dc0 <ethernet_input+0x60>
  ETHARP_STATS_INC(etharp.recv);
 8007e2c:	8b73      	ldrh	r3, [r6, #26]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8007e2e:	f8d4 8026 	ldr.w	r8, [r4, #38]	; 0x26
  ETHARP_STATS_INC(etharp.recv);
 8007e32:	3301      	adds	r3, #1
 8007e34:	8373      	strh	r3, [r6, #26]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8007e36:	69e3      	ldr	r3, [r4, #28]
 8007e38:	9301      	str	r3, [sp, #4]
  if (ip_addr_isany(&netif->ip_addr)) {
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	b1e3      	cbz	r3, 8007e78 <ethernet_input+0x118>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 8007e3e:	eba8 0203 	sub.w	r2, r8, r3
 8007e42:	f1d2 0800 	rsbs	r8, r2, #0
 8007e46:	eb48 0802 	adc.w	r8, r8, r2
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007e4a:	f1b8 0f00 	cmp.w	r8, #0
 8007e4e:	f104 0916 	add.w	r9, r4, #22
 8007e52:	bf14      	ite	ne
 8007e54:	2301      	movne	r3, #1
 8007e56:	2302      	moveq	r3, #2
 8007e58:	464a      	mov	r2, r9
 8007e5a:	a901      	add	r1, sp, #4
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7ff fd8b 	bl	8007978 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8007e62:	8aa3      	ldrh	r3, [r4, #20]
 8007e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e68:	d008      	beq.n	8007e7c <ethernet_input+0x11c>
 8007e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6e:	d0aa      	beq.n	8007dc6 <ethernet_input+0x66>
    ETHARP_STATS_INC(etharp.err);
 8007e70:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
 8007e72:	3301      	adds	r3, #1
 8007e74:	85b3      	strh	r3, [r6, #44]	; 0x2c
 8007e76:	e7a6      	b.n	8007dc6 <ethernet_input+0x66>
  if (ip_addr_isany(&netif->ip_addr)) {
 8007e78:	4698      	mov	r8, r3
 8007e7a:	e7e6      	b.n	8007e4a <ethernet_input+0xea>
    if (for_us) {
 8007e7c:	f1b8 0f00 	cmp.w	r8, #0
 8007e80:	d0a1      	beq.n	8007dc6 <ethernet_input+0x66>
      hdr->opcode = htons(ARP_REPLY);
 8007e82:	2002      	movs	r0, #2
 8007e84:	f7fb fe76 	bl	8003b74 <lwip_htons>
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8007e88:	69e3      	ldr	r3, [r4, #28]
      hdr->opcode = htons(ARP_REPLY);
 8007e8a:	82a0      	strh	r0, [r4, #20]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8007e8c:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	61e3      	str	r3, [r4, #28]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 8007e94:	f8d9 3000 	ldr.w	r3, [r9]
 8007e98:	6223      	str	r3, [r4, #32]
 8007e9a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8007e9e:	84a3      	strh	r3, [r4, #36]	; 0x24
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 8007ea0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8007eaa:	80a3      	strh	r3, [r4, #4]
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 8007eac:	463e      	mov	r6, r7
      netif->linkoutput(netif, p);
 8007eae:	4629      	mov	r1, r5
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 8007eb0:	f856 3f23 	ldr.w	r3, [r6, #35]!
 8007eb4:	f8c4 3016 	str.w	r3, [r4, #22]
 8007eb8:	88b3      	ldrh	r3, [r6, #4]
 8007eba:	f8a9 3004 	strh.w	r3, [r9, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 8007ebe:	6833      	ldr	r3, [r6, #0]
 8007ec0:	f8c4 3006 	str.w	r3, [r4, #6]
 8007ec4:	88b3      	ldrh	r3, [r6, #4]
 8007ec6:	8163      	strh	r3, [r4, #10]
      netif->linkoutput(netif, p);
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	4638      	mov	r0, r7
 8007ecc:	4798      	blx	r3
 8007ece:	e77a      	b.n	8007dc6 <ethernet_input+0x66>
 8007ed0:	2000b0fe 	.word	0x2000b0fe
 8007ed4:	08008120 	.word	0x08008120

08007ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007ede:	e003      	b.n	8007ee8 <LoopCopyDataInit>

08007ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007ee6:	3104      	adds	r1, #4

08007ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ee8:	480b      	ldr	r0, [pc, #44]	; (8007f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007eea:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ef0:	d3f6      	bcc.n	8007ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8007ef2:	4a0b      	ldr	r2, [pc, #44]	; (8007f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ef4:	e002      	b.n	8007efc <LoopFillZerobss>

08007ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ef8:	f842 3b04 	str.w	r3, [r2], #4

08007efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007f00:	d3f9      	bcc.n	8007ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007f02:	f7fb f9bb 	bl	800327c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f06:	f000 f811 	bl	8007f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007f0a:	f7fb f90d 	bl	8003128 <main>
  bx  lr    
 8007f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007f10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007f14:	0800813c 	.word	0x0800813c
  ldr  r0, =_sdata
 8007f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007f1c:	20000154 	.word	0x20000154
  ldr  r2, =_sbss
 8007f20:	20000158 	.word	0x20000158
  ldr  r3, = _ebss
 8007f24:	2000b238 	.word	0x2000b238

08007f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007f28:	e7fe      	b.n	8007f28 <ADC_IRQHandler>
	...

08007f2c <__libc_init_array>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4e0d      	ldr	r6, [pc, #52]	; (8007f64 <__libc_init_array+0x38>)
 8007f30:	4c0d      	ldr	r4, [pc, #52]	; (8007f68 <__libc_init_array+0x3c>)
 8007f32:	1ba4      	subs	r4, r4, r6
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	2500      	movs	r5, #0
 8007f38:	42a5      	cmp	r5, r4
 8007f3a:	d109      	bne.n	8007f50 <__libc_init_array+0x24>
 8007f3c:	4e0b      	ldr	r6, [pc, #44]	; (8007f6c <__libc_init_array+0x40>)
 8007f3e:	4c0c      	ldr	r4, [pc, #48]	; (8007f70 <__libc_init_array+0x44>)
 8007f40:	f000 f83a 	bl	8007fb8 <_init>
 8007f44:	1ba4      	subs	r4, r4, r6
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	2500      	movs	r5, #0
 8007f4a:	42a5      	cmp	r5, r4
 8007f4c:	d105      	bne.n	8007f5a <__libc_init_array+0x2e>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f54:	4798      	blx	r3
 8007f56:	3501      	adds	r5, #1
 8007f58:	e7ee      	b.n	8007f38 <__libc_init_array+0xc>
 8007f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f5e:	4798      	blx	r3
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7f2      	b.n	8007f4a <__libc_init_array+0x1e>
 8007f64:	08008134 	.word	0x08008134
 8007f68:	08008134 	.word	0x08008134
 8007f6c:	08008134 	.word	0x08008134
 8007f70:	08008138 	.word	0x08008138

08007f74 <memcmp>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	3901      	subs	r1, #1
 8007f78:	4402      	add	r2, r0
 8007f7a:	4290      	cmp	r0, r2
 8007f7c:	d101      	bne.n	8007f82 <memcmp+0xe>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	d0f5      	beq.n	8007f7a <memcmp+0x6>
 8007f8e:	1b18      	subs	r0, r3, r4
 8007f90:	bd10      	pop	{r4, pc}

08007f92 <memcpy>:
 8007f92:	b510      	push	{r4, lr}
 8007f94:	1e43      	subs	r3, r0, #1
 8007f96:	440a      	add	r2, r1
 8007f98:	4291      	cmp	r1, r2
 8007f9a:	d100      	bne.n	8007f9e <memcpy+0xc>
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa6:	e7f7      	b.n	8007f98 <memcpy+0x6>

08007fa8 <memset>:
 8007fa8:	4402      	add	r2, r0
 8007faa:	4603      	mov	r3, r0
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d100      	bne.n	8007fb2 <memset+0xa>
 8007fb0:	4770      	bx	lr
 8007fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb6:	e7f9      	b.n	8007fac <memset+0x4>

08007fb8 <_init>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr

08007fc4 <_fini>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr
